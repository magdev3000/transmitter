
Transmitter.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a310  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005a4  0800a3d0  0800a3d0  0001a3d0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a974  0800a974  000201e0  2**0
                  CONTENTS
  4 .ARM          00000008  0800a974  0800a974  0001a974  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a97c  0800a97c  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a97c  0800a97c  0001a97c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a980  0800a980  0001a980  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  0800a984  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004ec  200001e0  0800ab64  000201e0  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  200006cc  0800ab64  000206cc  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d7ca  00000000  00000000  00020208  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000228c  00000000  00000000  0002d9d2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b90  00000000  00000000  0002fc60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ab8  00000000  00000000  000307f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00015c31  00000000  00000000  000312a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d039  00000000  00000000  00046ed9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0007f580  00000000  00000000  00053f12  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000d3492  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003db0  00000000  00000000  000d34e8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	200001e0 	.word	0x200001e0
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0800a3b8 	.word	0x0800a3b8

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	200001e4 	.word	0x200001e4
 8000104:	0800a3b8 	.word	0x0800a3b8

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_uqi>:
 8000118:	b402      	push	{r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0049      	lsls	r1, r1, #1
 8000120:	5c09      	ldrb	r1, [r1, r0]
 8000122:	0049      	lsls	r1, r1, #1
 8000124:	448e      	add	lr, r1
 8000126:	bc02      	pop	{r1}
 8000128:	4770      	bx	lr
 800012a:	46c0      	nop			; (mov r8, r8)

0800012c <__gnu_thumb1_case_shi>:
 800012c:	b403      	push	{r0, r1}
 800012e:	4671      	mov	r1, lr
 8000130:	0849      	lsrs	r1, r1, #1
 8000132:	0040      	lsls	r0, r0, #1
 8000134:	0049      	lsls	r1, r1, #1
 8000136:	5e09      	ldrsh	r1, [r1, r0]
 8000138:	0049      	lsls	r1, r1, #1
 800013a:	448e      	add	lr, r1
 800013c:	bc03      	pop	{r0, r1}
 800013e:	4770      	bx	lr

08000140 <__udivsi3>:
 8000140:	2200      	movs	r2, #0
 8000142:	0843      	lsrs	r3, r0, #1
 8000144:	428b      	cmp	r3, r1
 8000146:	d374      	bcc.n	8000232 <__udivsi3+0xf2>
 8000148:	0903      	lsrs	r3, r0, #4
 800014a:	428b      	cmp	r3, r1
 800014c:	d35f      	bcc.n	800020e <__udivsi3+0xce>
 800014e:	0a03      	lsrs	r3, r0, #8
 8000150:	428b      	cmp	r3, r1
 8000152:	d344      	bcc.n	80001de <__udivsi3+0x9e>
 8000154:	0b03      	lsrs	r3, r0, #12
 8000156:	428b      	cmp	r3, r1
 8000158:	d328      	bcc.n	80001ac <__udivsi3+0x6c>
 800015a:	0c03      	lsrs	r3, r0, #16
 800015c:	428b      	cmp	r3, r1
 800015e:	d30d      	bcc.n	800017c <__udivsi3+0x3c>
 8000160:	22ff      	movs	r2, #255	; 0xff
 8000162:	0209      	lsls	r1, r1, #8
 8000164:	ba12      	rev	r2, r2
 8000166:	0c03      	lsrs	r3, r0, #16
 8000168:	428b      	cmp	r3, r1
 800016a:	d302      	bcc.n	8000172 <__udivsi3+0x32>
 800016c:	1212      	asrs	r2, r2, #8
 800016e:	0209      	lsls	r1, r1, #8
 8000170:	d065      	beq.n	800023e <__udivsi3+0xfe>
 8000172:	0b03      	lsrs	r3, r0, #12
 8000174:	428b      	cmp	r3, r1
 8000176:	d319      	bcc.n	80001ac <__udivsi3+0x6c>
 8000178:	e000      	b.n	800017c <__udivsi3+0x3c>
 800017a:	0a09      	lsrs	r1, r1, #8
 800017c:	0bc3      	lsrs	r3, r0, #15
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x46>
 8000182:	03cb      	lsls	r3, r1, #15
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0b83      	lsrs	r3, r0, #14
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x52>
 800018e:	038b      	lsls	r3, r1, #14
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0b43      	lsrs	r3, r0, #13
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x5e>
 800019a:	034b      	lsls	r3, r1, #13
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0b03      	lsrs	r3, r0, #12
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x6a>
 80001a6:	030b      	lsls	r3, r1, #12
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0ac3      	lsrs	r3, r0, #11
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x76>
 80001b2:	02cb      	lsls	r3, r1, #11
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	0a83      	lsrs	r3, r0, #10
 80001ba:	428b      	cmp	r3, r1
 80001bc:	d301      	bcc.n	80001c2 <__udivsi3+0x82>
 80001be:	028b      	lsls	r3, r1, #10
 80001c0:	1ac0      	subs	r0, r0, r3
 80001c2:	4152      	adcs	r2, r2
 80001c4:	0a43      	lsrs	r3, r0, #9
 80001c6:	428b      	cmp	r3, r1
 80001c8:	d301      	bcc.n	80001ce <__udivsi3+0x8e>
 80001ca:	024b      	lsls	r3, r1, #9
 80001cc:	1ac0      	subs	r0, r0, r3
 80001ce:	4152      	adcs	r2, r2
 80001d0:	0a03      	lsrs	r3, r0, #8
 80001d2:	428b      	cmp	r3, r1
 80001d4:	d301      	bcc.n	80001da <__udivsi3+0x9a>
 80001d6:	020b      	lsls	r3, r1, #8
 80001d8:	1ac0      	subs	r0, r0, r3
 80001da:	4152      	adcs	r2, r2
 80001dc:	d2cd      	bcs.n	800017a <__udivsi3+0x3a>
 80001de:	09c3      	lsrs	r3, r0, #7
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xa8>
 80001e4:	01cb      	lsls	r3, r1, #7
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0983      	lsrs	r3, r0, #6
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xb4>
 80001f0:	018b      	lsls	r3, r1, #6
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0943      	lsrs	r3, r0, #5
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xc0>
 80001fc:	014b      	lsls	r3, r1, #5
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0903      	lsrs	r3, r0, #4
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xcc>
 8000208:	010b      	lsls	r3, r1, #4
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	08c3      	lsrs	r3, r0, #3
 8000210:	428b      	cmp	r3, r1
 8000212:	d301      	bcc.n	8000218 <__udivsi3+0xd8>
 8000214:	00cb      	lsls	r3, r1, #3
 8000216:	1ac0      	subs	r0, r0, r3
 8000218:	4152      	adcs	r2, r2
 800021a:	0883      	lsrs	r3, r0, #2
 800021c:	428b      	cmp	r3, r1
 800021e:	d301      	bcc.n	8000224 <__udivsi3+0xe4>
 8000220:	008b      	lsls	r3, r1, #2
 8000222:	1ac0      	subs	r0, r0, r3
 8000224:	4152      	adcs	r2, r2
 8000226:	0843      	lsrs	r3, r0, #1
 8000228:	428b      	cmp	r3, r1
 800022a:	d301      	bcc.n	8000230 <__udivsi3+0xf0>
 800022c:	004b      	lsls	r3, r1, #1
 800022e:	1ac0      	subs	r0, r0, r3
 8000230:	4152      	adcs	r2, r2
 8000232:	1a41      	subs	r1, r0, r1
 8000234:	d200      	bcs.n	8000238 <__udivsi3+0xf8>
 8000236:	4601      	mov	r1, r0
 8000238:	4152      	adcs	r2, r2
 800023a:	4610      	mov	r0, r2
 800023c:	4770      	bx	lr
 800023e:	e7ff      	b.n	8000240 <__udivsi3+0x100>
 8000240:	b501      	push	{r0, lr}
 8000242:	2000      	movs	r0, #0
 8000244:	f000 f8f0 	bl	8000428 <__aeabi_idiv0>
 8000248:	bd02      	pop	{r1, pc}
 800024a:	46c0      	nop			; (mov r8, r8)

0800024c <__aeabi_uidivmod>:
 800024c:	2900      	cmp	r1, #0
 800024e:	d0f7      	beq.n	8000240 <__udivsi3+0x100>
 8000250:	e776      	b.n	8000140 <__udivsi3>
 8000252:	4770      	bx	lr

08000254 <__divsi3>:
 8000254:	4603      	mov	r3, r0
 8000256:	430b      	orrs	r3, r1
 8000258:	d47f      	bmi.n	800035a <__divsi3+0x106>
 800025a:	2200      	movs	r2, #0
 800025c:	0843      	lsrs	r3, r0, #1
 800025e:	428b      	cmp	r3, r1
 8000260:	d374      	bcc.n	800034c <__divsi3+0xf8>
 8000262:	0903      	lsrs	r3, r0, #4
 8000264:	428b      	cmp	r3, r1
 8000266:	d35f      	bcc.n	8000328 <__divsi3+0xd4>
 8000268:	0a03      	lsrs	r3, r0, #8
 800026a:	428b      	cmp	r3, r1
 800026c:	d344      	bcc.n	80002f8 <__divsi3+0xa4>
 800026e:	0b03      	lsrs	r3, r0, #12
 8000270:	428b      	cmp	r3, r1
 8000272:	d328      	bcc.n	80002c6 <__divsi3+0x72>
 8000274:	0c03      	lsrs	r3, r0, #16
 8000276:	428b      	cmp	r3, r1
 8000278:	d30d      	bcc.n	8000296 <__divsi3+0x42>
 800027a:	22ff      	movs	r2, #255	; 0xff
 800027c:	0209      	lsls	r1, r1, #8
 800027e:	ba12      	rev	r2, r2
 8000280:	0c03      	lsrs	r3, r0, #16
 8000282:	428b      	cmp	r3, r1
 8000284:	d302      	bcc.n	800028c <__divsi3+0x38>
 8000286:	1212      	asrs	r2, r2, #8
 8000288:	0209      	lsls	r1, r1, #8
 800028a:	d065      	beq.n	8000358 <__divsi3+0x104>
 800028c:	0b03      	lsrs	r3, r0, #12
 800028e:	428b      	cmp	r3, r1
 8000290:	d319      	bcc.n	80002c6 <__divsi3+0x72>
 8000292:	e000      	b.n	8000296 <__divsi3+0x42>
 8000294:	0a09      	lsrs	r1, r1, #8
 8000296:	0bc3      	lsrs	r3, r0, #15
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x4c>
 800029c:	03cb      	lsls	r3, r1, #15
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0b83      	lsrs	r3, r0, #14
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x58>
 80002a8:	038b      	lsls	r3, r1, #14
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0b43      	lsrs	r3, r0, #13
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0x64>
 80002b4:	034b      	lsls	r3, r1, #13
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	0b03      	lsrs	r3, r0, #12
 80002bc:	428b      	cmp	r3, r1
 80002be:	d301      	bcc.n	80002c4 <__divsi3+0x70>
 80002c0:	030b      	lsls	r3, r1, #12
 80002c2:	1ac0      	subs	r0, r0, r3
 80002c4:	4152      	adcs	r2, r2
 80002c6:	0ac3      	lsrs	r3, r0, #11
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d301      	bcc.n	80002d0 <__divsi3+0x7c>
 80002cc:	02cb      	lsls	r3, r1, #11
 80002ce:	1ac0      	subs	r0, r0, r3
 80002d0:	4152      	adcs	r2, r2
 80002d2:	0a83      	lsrs	r3, r0, #10
 80002d4:	428b      	cmp	r3, r1
 80002d6:	d301      	bcc.n	80002dc <__divsi3+0x88>
 80002d8:	028b      	lsls	r3, r1, #10
 80002da:	1ac0      	subs	r0, r0, r3
 80002dc:	4152      	adcs	r2, r2
 80002de:	0a43      	lsrs	r3, r0, #9
 80002e0:	428b      	cmp	r3, r1
 80002e2:	d301      	bcc.n	80002e8 <__divsi3+0x94>
 80002e4:	024b      	lsls	r3, r1, #9
 80002e6:	1ac0      	subs	r0, r0, r3
 80002e8:	4152      	adcs	r2, r2
 80002ea:	0a03      	lsrs	r3, r0, #8
 80002ec:	428b      	cmp	r3, r1
 80002ee:	d301      	bcc.n	80002f4 <__divsi3+0xa0>
 80002f0:	020b      	lsls	r3, r1, #8
 80002f2:	1ac0      	subs	r0, r0, r3
 80002f4:	4152      	adcs	r2, r2
 80002f6:	d2cd      	bcs.n	8000294 <__divsi3+0x40>
 80002f8:	09c3      	lsrs	r3, r0, #7
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xae>
 80002fe:	01cb      	lsls	r3, r1, #7
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	0983      	lsrs	r3, r0, #6
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xba>
 800030a:	018b      	lsls	r3, r1, #6
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	0943      	lsrs	r3, r0, #5
 8000312:	428b      	cmp	r3, r1
 8000314:	d301      	bcc.n	800031a <__divsi3+0xc6>
 8000316:	014b      	lsls	r3, r1, #5
 8000318:	1ac0      	subs	r0, r0, r3
 800031a:	4152      	adcs	r2, r2
 800031c:	0903      	lsrs	r3, r0, #4
 800031e:	428b      	cmp	r3, r1
 8000320:	d301      	bcc.n	8000326 <__divsi3+0xd2>
 8000322:	010b      	lsls	r3, r1, #4
 8000324:	1ac0      	subs	r0, r0, r3
 8000326:	4152      	adcs	r2, r2
 8000328:	08c3      	lsrs	r3, r0, #3
 800032a:	428b      	cmp	r3, r1
 800032c:	d301      	bcc.n	8000332 <__divsi3+0xde>
 800032e:	00cb      	lsls	r3, r1, #3
 8000330:	1ac0      	subs	r0, r0, r3
 8000332:	4152      	adcs	r2, r2
 8000334:	0883      	lsrs	r3, r0, #2
 8000336:	428b      	cmp	r3, r1
 8000338:	d301      	bcc.n	800033e <__divsi3+0xea>
 800033a:	008b      	lsls	r3, r1, #2
 800033c:	1ac0      	subs	r0, r0, r3
 800033e:	4152      	adcs	r2, r2
 8000340:	0843      	lsrs	r3, r0, #1
 8000342:	428b      	cmp	r3, r1
 8000344:	d301      	bcc.n	800034a <__divsi3+0xf6>
 8000346:	004b      	lsls	r3, r1, #1
 8000348:	1ac0      	subs	r0, r0, r3
 800034a:	4152      	adcs	r2, r2
 800034c:	1a41      	subs	r1, r0, r1
 800034e:	d200      	bcs.n	8000352 <__divsi3+0xfe>
 8000350:	4601      	mov	r1, r0
 8000352:	4152      	adcs	r2, r2
 8000354:	4610      	mov	r0, r2
 8000356:	4770      	bx	lr
 8000358:	e05d      	b.n	8000416 <__divsi3+0x1c2>
 800035a:	0fca      	lsrs	r2, r1, #31
 800035c:	d000      	beq.n	8000360 <__divsi3+0x10c>
 800035e:	4249      	negs	r1, r1
 8000360:	1003      	asrs	r3, r0, #32
 8000362:	d300      	bcc.n	8000366 <__divsi3+0x112>
 8000364:	4240      	negs	r0, r0
 8000366:	4053      	eors	r3, r2
 8000368:	2200      	movs	r2, #0
 800036a:	469c      	mov	ip, r3
 800036c:	0903      	lsrs	r3, r0, #4
 800036e:	428b      	cmp	r3, r1
 8000370:	d32d      	bcc.n	80003ce <__divsi3+0x17a>
 8000372:	0a03      	lsrs	r3, r0, #8
 8000374:	428b      	cmp	r3, r1
 8000376:	d312      	bcc.n	800039e <__divsi3+0x14a>
 8000378:	22fc      	movs	r2, #252	; 0xfc
 800037a:	0189      	lsls	r1, r1, #6
 800037c:	ba12      	rev	r2, r2
 800037e:	0a03      	lsrs	r3, r0, #8
 8000380:	428b      	cmp	r3, r1
 8000382:	d30c      	bcc.n	800039e <__divsi3+0x14a>
 8000384:	0189      	lsls	r1, r1, #6
 8000386:	1192      	asrs	r2, r2, #6
 8000388:	428b      	cmp	r3, r1
 800038a:	d308      	bcc.n	800039e <__divsi3+0x14a>
 800038c:	0189      	lsls	r1, r1, #6
 800038e:	1192      	asrs	r2, r2, #6
 8000390:	428b      	cmp	r3, r1
 8000392:	d304      	bcc.n	800039e <__divsi3+0x14a>
 8000394:	0189      	lsls	r1, r1, #6
 8000396:	d03a      	beq.n	800040e <__divsi3+0x1ba>
 8000398:	1192      	asrs	r2, r2, #6
 800039a:	e000      	b.n	800039e <__divsi3+0x14a>
 800039c:	0989      	lsrs	r1, r1, #6
 800039e:	09c3      	lsrs	r3, r0, #7
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x154>
 80003a4:	01cb      	lsls	r3, r1, #7
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	0983      	lsrs	r3, r0, #6
 80003ac:	428b      	cmp	r3, r1
 80003ae:	d301      	bcc.n	80003b4 <__divsi3+0x160>
 80003b0:	018b      	lsls	r3, r1, #6
 80003b2:	1ac0      	subs	r0, r0, r3
 80003b4:	4152      	adcs	r2, r2
 80003b6:	0943      	lsrs	r3, r0, #5
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d301      	bcc.n	80003c0 <__divsi3+0x16c>
 80003bc:	014b      	lsls	r3, r1, #5
 80003be:	1ac0      	subs	r0, r0, r3
 80003c0:	4152      	adcs	r2, r2
 80003c2:	0903      	lsrs	r3, r0, #4
 80003c4:	428b      	cmp	r3, r1
 80003c6:	d301      	bcc.n	80003cc <__divsi3+0x178>
 80003c8:	010b      	lsls	r3, r1, #4
 80003ca:	1ac0      	subs	r0, r0, r3
 80003cc:	4152      	adcs	r2, r2
 80003ce:	08c3      	lsrs	r3, r0, #3
 80003d0:	428b      	cmp	r3, r1
 80003d2:	d301      	bcc.n	80003d8 <__divsi3+0x184>
 80003d4:	00cb      	lsls	r3, r1, #3
 80003d6:	1ac0      	subs	r0, r0, r3
 80003d8:	4152      	adcs	r2, r2
 80003da:	0883      	lsrs	r3, r0, #2
 80003dc:	428b      	cmp	r3, r1
 80003de:	d301      	bcc.n	80003e4 <__divsi3+0x190>
 80003e0:	008b      	lsls	r3, r1, #2
 80003e2:	1ac0      	subs	r0, r0, r3
 80003e4:	4152      	adcs	r2, r2
 80003e6:	d2d9      	bcs.n	800039c <__divsi3+0x148>
 80003e8:	0843      	lsrs	r3, r0, #1
 80003ea:	428b      	cmp	r3, r1
 80003ec:	d301      	bcc.n	80003f2 <__divsi3+0x19e>
 80003ee:	004b      	lsls	r3, r1, #1
 80003f0:	1ac0      	subs	r0, r0, r3
 80003f2:	4152      	adcs	r2, r2
 80003f4:	1a41      	subs	r1, r0, r1
 80003f6:	d200      	bcs.n	80003fa <__divsi3+0x1a6>
 80003f8:	4601      	mov	r1, r0
 80003fa:	4663      	mov	r3, ip
 80003fc:	4152      	adcs	r2, r2
 80003fe:	105b      	asrs	r3, r3, #1
 8000400:	4610      	mov	r0, r2
 8000402:	d301      	bcc.n	8000408 <__divsi3+0x1b4>
 8000404:	4240      	negs	r0, r0
 8000406:	2b00      	cmp	r3, #0
 8000408:	d500      	bpl.n	800040c <__divsi3+0x1b8>
 800040a:	4249      	negs	r1, r1
 800040c:	4770      	bx	lr
 800040e:	4663      	mov	r3, ip
 8000410:	105b      	asrs	r3, r3, #1
 8000412:	d300      	bcc.n	8000416 <__divsi3+0x1c2>
 8000414:	4240      	negs	r0, r0
 8000416:	b501      	push	{r0, lr}
 8000418:	2000      	movs	r0, #0
 800041a:	f000 f805 	bl	8000428 <__aeabi_idiv0>
 800041e:	bd02      	pop	{r1, pc}

08000420 <__aeabi_idivmod>:
 8000420:	2900      	cmp	r1, #0
 8000422:	d0f8      	beq.n	8000416 <__divsi3+0x1c2>
 8000424:	e716      	b.n	8000254 <__divsi3>
 8000426:	4770      	bx	lr

08000428 <__aeabi_idiv0>:
 8000428:	4770      	bx	lr
 800042a:	46c0      	nop			; (mov r8, r8)

0800042c <__aeabi_cdrcmple>:
 800042c:	4684      	mov	ip, r0
 800042e:	1c10      	adds	r0, r2, #0
 8000430:	4662      	mov	r2, ip
 8000432:	468c      	mov	ip, r1
 8000434:	1c19      	adds	r1, r3, #0
 8000436:	4663      	mov	r3, ip
 8000438:	e000      	b.n	800043c <__aeabi_cdcmpeq>
 800043a:	46c0      	nop			; (mov r8, r8)

0800043c <__aeabi_cdcmpeq>:
 800043c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800043e:	f001 fcc9 	bl	8001dd4 <__ledf2>
 8000442:	2800      	cmp	r0, #0
 8000444:	d401      	bmi.n	800044a <__aeabi_cdcmpeq+0xe>
 8000446:	2100      	movs	r1, #0
 8000448:	42c8      	cmn	r0, r1
 800044a:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

0800044c <__aeabi_dcmpeq>:
 800044c:	b510      	push	{r4, lr}
 800044e:	f001 fc13 	bl	8001c78 <__eqdf2>
 8000452:	4240      	negs	r0, r0
 8000454:	3001      	adds	r0, #1
 8000456:	bd10      	pop	{r4, pc}

08000458 <__aeabi_dcmplt>:
 8000458:	b510      	push	{r4, lr}
 800045a:	f001 fcbb 	bl	8001dd4 <__ledf2>
 800045e:	2800      	cmp	r0, #0
 8000460:	db01      	blt.n	8000466 <__aeabi_dcmplt+0xe>
 8000462:	2000      	movs	r0, #0
 8000464:	bd10      	pop	{r4, pc}
 8000466:	2001      	movs	r0, #1
 8000468:	bd10      	pop	{r4, pc}
 800046a:	46c0      	nop			; (mov r8, r8)

0800046c <__aeabi_dcmple>:
 800046c:	b510      	push	{r4, lr}
 800046e:	f001 fcb1 	bl	8001dd4 <__ledf2>
 8000472:	2800      	cmp	r0, #0
 8000474:	dd01      	ble.n	800047a <__aeabi_dcmple+0xe>
 8000476:	2000      	movs	r0, #0
 8000478:	bd10      	pop	{r4, pc}
 800047a:	2001      	movs	r0, #1
 800047c:	bd10      	pop	{r4, pc}
 800047e:	46c0      	nop			; (mov r8, r8)

08000480 <__aeabi_dcmpgt>:
 8000480:	b510      	push	{r4, lr}
 8000482:	f001 fc35 	bl	8001cf0 <__gedf2>
 8000486:	2800      	cmp	r0, #0
 8000488:	dc01      	bgt.n	800048e <__aeabi_dcmpgt+0xe>
 800048a:	2000      	movs	r0, #0
 800048c:	bd10      	pop	{r4, pc}
 800048e:	2001      	movs	r0, #1
 8000490:	bd10      	pop	{r4, pc}
 8000492:	46c0      	nop			; (mov r8, r8)

08000494 <__aeabi_dcmpge>:
 8000494:	b510      	push	{r4, lr}
 8000496:	f001 fc2b 	bl	8001cf0 <__gedf2>
 800049a:	2800      	cmp	r0, #0
 800049c:	da01      	bge.n	80004a2 <__aeabi_dcmpge+0xe>
 800049e:	2000      	movs	r0, #0
 80004a0:	bd10      	pop	{r4, pc}
 80004a2:	2001      	movs	r0, #1
 80004a4:	bd10      	pop	{r4, pc}
 80004a6:	46c0      	nop			; (mov r8, r8)

080004a8 <__aeabi_cfrcmple>:
 80004a8:	4684      	mov	ip, r0
 80004aa:	1c08      	adds	r0, r1, #0
 80004ac:	4661      	mov	r1, ip
 80004ae:	e7ff      	b.n	80004b0 <__aeabi_cfcmpeq>

080004b0 <__aeabi_cfcmpeq>:
 80004b0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80004b2:	f000 fa43 	bl	800093c <__lesf2>
 80004b6:	2800      	cmp	r0, #0
 80004b8:	d401      	bmi.n	80004be <__aeabi_cfcmpeq+0xe>
 80004ba:	2100      	movs	r1, #0
 80004bc:	42c8      	cmn	r0, r1
 80004be:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

080004c0 <__aeabi_fcmpeq>:
 80004c0:	b510      	push	{r4, lr}
 80004c2:	f000 f9c7 	bl	8000854 <__eqsf2>
 80004c6:	4240      	negs	r0, r0
 80004c8:	3001      	adds	r0, #1
 80004ca:	bd10      	pop	{r4, pc}

080004cc <__aeabi_fcmplt>:
 80004cc:	b510      	push	{r4, lr}
 80004ce:	f000 fa35 	bl	800093c <__lesf2>
 80004d2:	2800      	cmp	r0, #0
 80004d4:	db01      	blt.n	80004da <__aeabi_fcmplt+0xe>
 80004d6:	2000      	movs	r0, #0
 80004d8:	bd10      	pop	{r4, pc}
 80004da:	2001      	movs	r0, #1
 80004dc:	bd10      	pop	{r4, pc}
 80004de:	46c0      	nop			; (mov r8, r8)

080004e0 <__aeabi_fcmple>:
 80004e0:	b510      	push	{r4, lr}
 80004e2:	f000 fa2b 	bl	800093c <__lesf2>
 80004e6:	2800      	cmp	r0, #0
 80004e8:	dd01      	ble.n	80004ee <__aeabi_fcmple+0xe>
 80004ea:	2000      	movs	r0, #0
 80004ec:	bd10      	pop	{r4, pc}
 80004ee:	2001      	movs	r0, #1
 80004f0:	bd10      	pop	{r4, pc}
 80004f2:	46c0      	nop			; (mov r8, r8)

080004f4 <__aeabi_fcmpgt>:
 80004f4:	b510      	push	{r4, lr}
 80004f6:	f000 f9d5 	bl	80008a4 <__gesf2>
 80004fa:	2800      	cmp	r0, #0
 80004fc:	dc01      	bgt.n	8000502 <__aeabi_fcmpgt+0xe>
 80004fe:	2000      	movs	r0, #0
 8000500:	bd10      	pop	{r4, pc}
 8000502:	2001      	movs	r0, #1
 8000504:	bd10      	pop	{r4, pc}
 8000506:	46c0      	nop			; (mov r8, r8)

08000508 <__aeabi_fcmpge>:
 8000508:	b510      	push	{r4, lr}
 800050a:	f000 f9cb 	bl	80008a4 <__gesf2>
 800050e:	2800      	cmp	r0, #0
 8000510:	da01      	bge.n	8000516 <__aeabi_fcmpge+0xe>
 8000512:	2000      	movs	r0, #0
 8000514:	bd10      	pop	{r4, pc}
 8000516:	2001      	movs	r0, #1
 8000518:	bd10      	pop	{r4, pc}
 800051a:	46c0      	nop			; (mov r8, r8)

0800051c <__aeabi_uldivmod>:
 800051c:	2b00      	cmp	r3, #0
 800051e:	d111      	bne.n	8000544 <__aeabi_uldivmod+0x28>
 8000520:	2a00      	cmp	r2, #0
 8000522:	d10f      	bne.n	8000544 <__aeabi_uldivmod+0x28>
 8000524:	2900      	cmp	r1, #0
 8000526:	d100      	bne.n	800052a <__aeabi_uldivmod+0xe>
 8000528:	2800      	cmp	r0, #0
 800052a:	d002      	beq.n	8000532 <__aeabi_uldivmod+0x16>
 800052c:	2100      	movs	r1, #0
 800052e:	43c9      	mvns	r1, r1
 8000530:	1c08      	adds	r0, r1, #0
 8000532:	b407      	push	{r0, r1, r2}
 8000534:	4802      	ldr	r0, [pc, #8]	; (8000540 <__aeabi_uldivmod+0x24>)
 8000536:	a102      	add	r1, pc, #8	; (adr r1, 8000540 <__aeabi_uldivmod+0x24>)
 8000538:	1840      	adds	r0, r0, r1
 800053a:	9002      	str	r0, [sp, #8]
 800053c:	bd03      	pop	{r0, r1, pc}
 800053e:	46c0      	nop			; (mov r8, r8)
 8000540:	fffffee9 	.word	0xfffffee9
 8000544:	b403      	push	{r0, r1}
 8000546:	4668      	mov	r0, sp
 8000548:	b501      	push	{r0, lr}
 800054a:	9802      	ldr	r0, [sp, #8]
 800054c:	f000 f8b6 	bl	80006bc <__udivmoddi4>
 8000550:	9b01      	ldr	r3, [sp, #4]
 8000552:	469e      	mov	lr, r3
 8000554:	b002      	add	sp, #8
 8000556:	bc0c      	pop	{r2, r3}
 8000558:	4770      	bx	lr
 800055a:	46c0      	nop			; (mov r8, r8)

0800055c <__aeabi_lmul>:
 800055c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800055e:	0415      	lsls	r5, r2, #16
 8000560:	0c2d      	lsrs	r5, r5, #16
 8000562:	000f      	movs	r7, r1
 8000564:	0001      	movs	r1, r0
 8000566:	002e      	movs	r6, r5
 8000568:	46c6      	mov	lr, r8
 800056a:	4684      	mov	ip, r0
 800056c:	0400      	lsls	r0, r0, #16
 800056e:	0c14      	lsrs	r4, r2, #16
 8000570:	0c00      	lsrs	r0, r0, #16
 8000572:	0c09      	lsrs	r1, r1, #16
 8000574:	4346      	muls	r6, r0
 8000576:	434d      	muls	r5, r1
 8000578:	4360      	muls	r0, r4
 800057a:	4361      	muls	r1, r4
 800057c:	1940      	adds	r0, r0, r5
 800057e:	0c34      	lsrs	r4, r6, #16
 8000580:	1824      	adds	r4, r4, r0
 8000582:	b500      	push	{lr}
 8000584:	42a5      	cmp	r5, r4
 8000586:	d903      	bls.n	8000590 <__aeabi_lmul+0x34>
 8000588:	2080      	movs	r0, #128	; 0x80
 800058a:	0240      	lsls	r0, r0, #9
 800058c:	4680      	mov	r8, r0
 800058e:	4441      	add	r1, r8
 8000590:	0c25      	lsrs	r5, r4, #16
 8000592:	186d      	adds	r5, r5, r1
 8000594:	4661      	mov	r1, ip
 8000596:	4359      	muls	r1, r3
 8000598:	437a      	muls	r2, r7
 800059a:	0430      	lsls	r0, r6, #16
 800059c:	1949      	adds	r1, r1, r5
 800059e:	0424      	lsls	r4, r4, #16
 80005a0:	0c00      	lsrs	r0, r0, #16
 80005a2:	1820      	adds	r0, r4, r0
 80005a4:	1889      	adds	r1, r1, r2
 80005a6:	bc80      	pop	{r7}
 80005a8:	46b8      	mov	r8, r7
 80005aa:	bdf0      	pop	{r4, r5, r6, r7, pc}

080005ac <__aeabi_f2uiz>:
 80005ac:	219e      	movs	r1, #158	; 0x9e
 80005ae:	b510      	push	{r4, lr}
 80005b0:	05c9      	lsls	r1, r1, #23
 80005b2:	1c04      	adds	r4, r0, #0
 80005b4:	f7ff ffa8 	bl	8000508 <__aeabi_fcmpge>
 80005b8:	2800      	cmp	r0, #0
 80005ba:	d103      	bne.n	80005c4 <__aeabi_f2uiz+0x18>
 80005bc:	1c20      	adds	r0, r4, #0
 80005be:	f000 fce9 	bl	8000f94 <__aeabi_f2iz>
 80005c2:	bd10      	pop	{r4, pc}
 80005c4:	219e      	movs	r1, #158	; 0x9e
 80005c6:	1c20      	adds	r0, r4, #0
 80005c8:	05c9      	lsls	r1, r1, #23
 80005ca:	f000 fb1b 	bl	8000c04 <__aeabi_fsub>
 80005ce:	f000 fce1 	bl	8000f94 <__aeabi_f2iz>
 80005d2:	2380      	movs	r3, #128	; 0x80
 80005d4:	061b      	lsls	r3, r3, #24
 80005d6:	469c      	mov	ip, r3
 80005d8:	4460      	add	r0, ip
 80005da:	e7f2      	b.n	80005c2 <__aeabi_f2uiz+0x16>

080005dc <__aeabi_d2uiz>:
 80005dc:	b570      	push	{r4, r5, r6, lr}
 80005de:	2200      	movs	r2, #0
 80005e0:	4b0c      	ldr	r3, [pc, #48]	; (8000614 <__aeabi_d2uiz+0x38>)
 80005e2:	0004      	movs	r4, r0
 80005e4:	000d      	movs	r5, r1
 80005e6:	f7ff ff55 	bl	8000494 <__aeabi_dcmpge>
 80005ea:	2800      	cmp	r0, #0
 80005ec:	d104      	bne.n	80005f8 <__aeabi_d2uiz+0x1c>
 80005ee:	0020      	movs	r0, r4
 80005f0:	0029      	movs	r1, r5
 80005f2:	f002 fa5d 	bl	8002ab0 <__aeabi_d2iz>
 80005f6:	bd70      	pop	{r4, r5, r6, pc}
 80005f8:	4b06      	ldr	r3, [pc, #24]	; (8000614 <__aeabi_d2uiz+0x38>)
 80005fa:	2200      	movs	r2, #0
 80005fc:	0020      	movs	r0, r4
 80005fe:	0029      	movs	r1, r5
 8000600:	f001 fec4 	bl	800238c <__aeabi_dsub>
 8000604:	f002 fa54 	bl	8002ab0 <__aeabi_d2iz>
 8000608:	2380      	movs	r3, #128	; 0x80
 800060a:	061b      	lsls	r3, r3, #24
 800060c:	469c      	mov	ip, r3
 800060e:	4460      	add	r0, ip
 8000610:	e7f1      	b.n	80005f6 <__aeabi_d2uiz+0x1a>
 8000612:	46c0      	nop			; (mov r8, r8)
 8000614:	41e00000 	.word	0x41e00000

08000618 <__aeabi_d2lz>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	0005      	movs	r5, r0
 800061c:	000c      	movs	r4, r1
 800061e:	2200      	movs	r2, #0
 8000620:	2300      	movs	r3, #0
 8000622:	0028      	movs	r0, r5
 8000624:	0021      	movs	r1, r4
 8000626:	f7ff ff17 	bl	8000458 <__aeabi_dcmplt>
 800062a:	2800      	cmp	r0, #0
 800062c:	d108      	bne.n	8000640 <__aeabi_d2lz+0x28>
 800062e:	0028      	movs	r0, r5
 8000630:	0021      	movs	r1, r4
 8000632:	f000 f80f 	bl	8000654 <__aeabi_d2ulz>
 8000636:	0002      	movs	r2, r0
 8000638:	000b      	movs	r3, r1
 800063a:	0010      	movs	r0, r2
 800063c:	0019      	movs	r1, r3
 800063e:	bd70      	pop	{r4, r5, r6, pc}
 8000640:	2380      	movs	r3, #128	; 0x80
 8000642:	061b      	lsls	r3, r3, #24
 8000644:	18e1      	adds	r1, r4, r3
 8000646:	0028      	movs	r0, r5
 8000648:	f000 f804 	bl	8000654 <__aeabi_d2ulz>
 800064c:	2300      	movs	r3, #0
 800064e:	4242      	negs	r2, r0
 8000650:	418b      	sbcs	r3, r1
 8000652:	e7f2      	b.n	800063a <__aeabi_d2lz+0x22>

08000654 <__aeabi_d2ulz>:
 8000654:	b570      	push	{r4, r5, r6, lr}
 8000656:	2200      	movs	r2, #0
 8000658:	4b0b      	ldr	r3, [pc, #44]	; (8000688 <__aeabi_d2ulz+0x34>)
 800065a:	000d      	movs	r5, r1
 800065c:	0004      	movs	r4, r0
 800065e:	f001 fc29 	bl	8001eb4 <__aeabi_dmul>
 8000662:	f7ff ffbb 	bl	80005dc <__aeabi_d2uiz>
 8000666:	0006      	movs	r6, r0
 8000668:	f002 fa88 	bl	8002b7c <__aeabi_ui2d>
 800066c:	2200      	movs	r2, #0
 800066e:	4b07      	ldr	r3, [pc, #28]	; (800068c <__aeabi_d2ulz+0x38>)
 8000670:	f001 fc20 	bl	8001eb4 <__aeabi_dmul>
 8000674:	0002      	movs	r2, r0
 8000676:	000b      	movs	r3, r1
 8000678:	0020      	movs	r0, r4
 800067a:	0029      	movs	r1, r5
 800067c:	f001 fe86 	bl	800238c <__aeabi_dsub>
 8000680:	f7ff ffac 	bl	80005dc <__aeabi_d2uiz>
 8000684:	0031      	movs	r1, r6
 8000686:	bd70      	pop	{r4, r5, r6, pc}
 8000688:	3df00000 	.word	0x3df00000
 800068c:	41f00000 	.word	0x41f00000

08000690 <__aeabi_l2d>:
 8000690:	b570      	push	{r4, r5, r6, lr}
 8000692:	0006      	movs	r6, r0
 8000694:	0008      	movs	r0, r1
 8000696:	f002 fa41 	bl	8002b1c <__aeabi_i2d>
 800069a:	2200      	movs	r2, #0
 800069c:	4b06      	ldr	r3, [pc, #24]	; (80006b8 <__aeabi_l2d+0x28>)
 800069e:	f001 fc09 	bl	8001eb4 <__aeabi_dmul>
 80006a2:	000d      	movs	r5, r1
 80006a4:	0004      	movs	r4, r0
 80006a6:	0030      	movs	r0, r6
 80006a8:	f002 fa68 	bl	8002b7c <__aeabi_ui2d>
 80006ac:	002b      	movs	r3, r5
 80006ae:	0022      	movs	r2, r4
 80006b0:	f000 fc90 	bl	8000fd4 <__aeabi_dadd>
 80006b4:	bd70      	pop	{r4, r5, r6, pc}
 80006b6:	46c0      	nop			; (mov r8, r8)
 80006b8:	41f00000 	.word	0x41f00000

080006bc <__udivmoddi4>:
 80006bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80006be:	4657      	mov	r7, sl
 80006c0:	464e      	mov	r6, r9
 80006c2:	4645      	mov	r5, r8
 80006c4:	46de      	mov	lr, fp
 80006c6:	b5e0      	push	{r5, r6, r7, lr}
 80006c8:	0004      	movs	r4, r0
 80006ca:	000d      	movs	r5, r1
 80006cc:	4692      	mov	sl, r2
 80006ce:	4699      	mov	r9, r3
 80006d0:	b083      	sub	sp, #12
 80006d2:	428b      	cmp	r3, r1
 80006d4:	d830      	bhi.n	8000738 <__udivmoddi4+0x7c>
 80006d6:	d02d      	beq.n	8000734 <__udivmoddi4+0x78>
 80006d8:	4649      	mov	r1, r9
 80006da:	4650      	mov	r0, sl
 80006dc:	f002 fb62 	bl	8002da4 <__clzdi2>
 80006e0:	0029      	movs	r1, r5
 80006e2:	0006      	movs	r6, r0
 80006e4:	0020      	movs	r0, r4
 80006e6:	f002 fb5d 	bl	8002da4 <__clzdi2>
 80006ea:	1a33      	subs	r3, r6, r0
 80006ec:	4698      	mov	r8, r3
 80006ee:	3b20      	subs	r3, #32
 80006f0:	469b      	mov	fp, r3
 80006f2:	d433      	bmi.n	800075c <__udivmoddi4+0xa0>
 80006f4:	465a      	mov	r2, fp
 80006f6:	4653      	mov	r3, sl
 80006f8:	4093      	lsls	r3, r2
 80006fa:	4642      	mov	r2, r8
 80006fc:	001f      	movs	r7, r3
 80006fe:	4653      	mov	r3, sl
 8000700:	4093      	lsls	r3, r2
 8000702:	001e      	movs	r6, r3
 8000704:	42af      	cmp	r7, r5
 8000706:	d83a      	bhi.n	800077e <__udivmoddi4+0xc2>
 8000708:	42af      	cmp	r7, r5
 800070a:	d100      	bne.n	800070e <__udivmoddi4+0x52>
 800070c:	e078      	b.n	8000800 <__udivmoddi4+0x144>
 800070e:	465b      	mov	r3, fp
 8000710:	1ba4      	subs	r4, r4, r6
 8000712:	41bd      	sbcs	r5, r7
 8000714:	2b00      	cmp	r3, #0
 8000716:	da00      	bge.n	800071a <__udivmoddi4+0x5e>
 8000718:	e075      	b.n	8000806 <__udivmoddi4+0x14a>
 800071a:	2200      	movs	r2, #0
 800071c:	2300      	movs	r3, #0
 800071e:	9200      	str	r2, [sp, #0]
 8000720:	9301      	str	r3, [sp, #4]
 8000722:	2301      	movs	r3, #1
 8000724:	465a      	mov	r2, fp
 8000726:	4093      	lsls	r3, r2
 8000728:	9301      	str	r3, [sp, #4]
 800072a:	2301      	movs	r3, #1
 800072c:	4642      	mov	r2, r8
 800072e:	4093      	lsls	r3, r2
 8000730:	9300      	str	r3, [sp, #0]
 8000732:	e028      	b.n	8000786 <__udivmoddi4+0xca>
 8000734:	4282      	cmp	r2, r0
 8000736:	d9cf      	bls.n	80006d8 <__udivmoddi4+0x1c>
 8000738:	2200      	movs	r2, #0
 800073a:	2300      	movs	r3, #0
 800073c:	9200      	str	r2, [sp, #0]
 800073e:	9301      	str	r3, [sp, #4]
 8000740:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8000742:	2b00      	cmp	r3, #0
 8000744:	d001      	beq.n	800074a <__udivmoddi4+0x8e>
 8000746:	601c      	str	r4, [r3, #0]
 8000748:	605d      	str	r5, [r3, #4]
 800074a:	9800      	ldr	r0, [sp, #0]
 800074c:	9901      	ldr	r1, [sp, #4]
 800074e:	b003      	add	sp, #12
 8000750:	bcf0      	pop	{r4, r5, r6, r7}
 8000752:	46bb      	mov	fp, r7
 8000754:	46b2      	mov	sl, r6
 8000756:	46a9      	mov	r9, r5
 8000758:	46a0      	mov	r8, r4
 800075a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800075c:	4642      	mov	r2, r8
 800075e:	2320      	movs	r3, #32
 8000760:	1a9b      	subs	r3, r3, r2
 8000762:	4652      	mov	r2, sl
 8000764:	40da      	lsrs	r2, r3
 8000766:	4641      	mov	r1, r8
 8000768:	0013      	movs	r3, r2
 800076a:	464a      	mov	r2, r9
 800076c:	408a      	lsls	r2, r1
 800076e:	0017      	movs	r7, r2
 8000770:	4642      	mov	r2, r8
 8000772:	431f      	orrs	r7, r3
 8000774:	4653      	mov	r3, sl
 8000776:	4093      	lsls	r3, r2
 8000778:	001e      	movs	r6, r3
 800077a:	42af      	cmp	r7, r5
 800077c:	d9c4      	bls.n	8000708 <__udivmoddi4+0x4c>
 800077e:	2200      	movs	r2, #0
 8000780:	2300      	movs	r3, #0
 8000782:	9200      	str	r2, [sp, #0]
 8000784:	9301      	str	r3, [sp, #4]
 8000786:	4643      	mov	r3, r8
 8000788:	2b00      	cmp	r3, #0
 800078a:	d0d9      	beq.n	8000740 <__udivmoddi4+0x84>
 800078c:	07fb      	lsls	r3, r7, #31
 800078e:	0872      	lsrs	r2, r6, #1
 8000790:	431a      	orrs	r2, r3
 8000792:	4646      	mov	r6, r8
 8000794:	087b      	lsrs	r3, r7, #1
 8000796:	e00e      	b.n	80007b6 <__udivmoddi4+0xfa>
 8000798:	42ab      	cmp	r3, r5
 800079a:	d101      	bne.n	80007a0 <__udivmoddi4+0xe4>
 800079c:	42a2      	cmp	r2, r4
 800079e:	d80c      	bhi.n	80007ba <__udivmoddi4+0xfe>
 80007a0:	1aa4      	subs	r4, r4, r2
 80007a2:	419d      	sbcs	r5, r3
 80007a4:	2001      	movs	r0, #1
 80007a6:	1924      	adds	r4, r4, r4
 80007a8:	416d      	adcs	r5, r5
 80007aa:	2100      	movs	r1, #0
 80007ac:	3e01      	subs	r6, #1
 80007ae:	1824      	adds	r4, r4, r0
 80007b0:	414d      	adcs	r5, r1
 80007b2:	2e00      	cmp	r6, #0
 80007b4:	d006      	beq.n	80007c4 <__udivmoddi4+0x108>
 80007b6:	42ab      	cmp	r3, r5
 80007b8:	d9ee      	bls.n	8000798 <__udivmoddi4+0xdc>
 80007ba:	3e01      	subs	r6, #1
 80007bc:	1924      	adds	r4, r4, r4
 80007be:	416d      	adcs	r5, r5
 80007c0:	2e00      	cmp	r6, #0
 80007c2:	d1f8      	bne.n	80007b6 <__udivmoddi4+0xfa>
 80007c4:	9800      	ldr	r0, [sp, #0]
 80007c6:	9901      	ldr	r1, [sp, #4]
 80007c8:	465b      	mov	r3, fp
 80007ca:	1900      	adds	r0, r0, r4
 80007cc:	4169      	adcs	r1, r5
 80007ce:	2b00      	cmp	r3, #0
 80007d0:	db24      	blt.n	800081c <__udivmoddi4+0x160>
 80007d2:	002b      	movs	r3, r5
 80007d4:	465a      	mov	r2, fp
 80007d6:	4644      	mov	r4, r8
 80007d8:	40d3      	lsrs	r3, r2
 80007da:	002a      	movs	r2, r5
 80007dc:	40e2      	lsrs	r2, r4
 80007de:	001c      	movs	r4, r3
 80007e0:	465b      	mov	r3, fp
 80007e2:	0015      	movs	r5, r2
 80007e4:	2b00      	cmp	r3, #0
 80007e6:	db2a      	blt.n	800083e <__udivmoddi4+0x182>
 80007e8:	0026      	movs	r6, r4
 80007ea:	409e      	lsls	r6, r3
 80007ec:	0033      	movs	r3, r6
 80007ee:	0026      	movs	r6, r4
 80007f0:	4647      	mov	r7, r8
 80007f2:	40be      	lsls	r6, r7
 80007f4:	0032      	movs	r2, r6
 80007f6:	1a80      	subs	r0, r0, r2
 80007f8:	4199      	sbcs	r1, r3
 80007fa:	9000      	str	r0, [sp, #0]
 80007fc:	9101      	str	r1, [sp, #4]
 80007fe:	e79f      	b.n	8000740 <__udivmoddi4+0x84>
 8000800:	42a3      	cmp	r3, r4
 8000802:	d8bc      	bhi.n	800077e <__udivmoddi4+0xc2>
 8000804:	e783      	b.n	800070e <__udivmoddi4+0x52>
 8000806:	4642      	mov	r2, r8
 8000808:	2320      	movs	r3, #32
 800080a:	2100      	movs	r1, #0
 800080c:	1a9b      	subs	r3, r3, r2
 800080e:	2200      	movs	r2, #0
 8000810:	9100      	str	r1, [sp, #0]
 8000812:	9201      	str	r2, [sp, #4]
 8000814:	2201      	movs	r2, #1
 8000816:	40da      	lsrs	r2, r3
 8000818:	9201      	str	r2, [sp, #4]
 800081a:	e786      	b.n	800072a <__udivmoddi4+0x6e>
 800081c:	4642      	mov	r2, r8
 800081e:	2320      	movs	r3, #32
 8000820:	1a9b      	subs	r3, r3, r2
 8000822:	002a      	movs	r2, r5
 8000824:	4646      	mov	r6, r8
 8000826:	409a      	lsls	r2, r3
 8000828:	0023      	movs	r3, r4
 800082a:	40f3      	lsrs	r3, r6
 800082c:	4644      	mov	r4, r8
 800082e:	4313      	orrs	r3, r2
 8000830:	002a      	movs	r2, r5
 8000832:	40e2      	lsrs	r2, r4
 8000834:	001c      	movs	r4, r3
 8000836:	465b      	mov	r3, fp
 8000838:	0015      	movs	r5, r2
 800083a:	2b00      	cmp	r3, #0
 800083c:	dad4      	bge.n	80007e8 <__udivmoddi4+0x12c>
 800083e:	4642      	mov	r2, r8
 8000840:	002f      	movs	r7, r5
 8000842:	2320      	movs	r3, #32
 8000844:	0026      	movs	r6, r4
 8000846:	4097      	lsls	r7, r2
 8000848:	1a9b      	subs	r3, r3, r2
 800084a:	40de      	lsrs	r6, r3
 800084c:	003b      	movs	r3, r7
 800084e:	4333      	orrs	r3, r6
 8000850:	e7cd      	b.n	80007ee <__udivmoddi4+0x132>
 8000852:	46c0      	nop			; (mov r8, r8)

08000854 <__eqsf2>:
 8000854:	b570      	push	{r4, r5, r6, lr}
 8000856:	0042      	lsls	r2, r0, #1
 8000858:	024e      	lsls	r6, r1, #9
 800085a:	004c      	lsls	r4, r1, #1
 800085c:	0245      	lsls	r5, r0, #9
 800085e:	0a6d      	lsrs	r5, r5, #9
 8000860:	0e12      	lsrs	r2, r2, #24
 8000862:	0fc3      	lsrs	r3, r0, #31
 8000864:	0a76      	lsrs	r6, r6, #9
 8000866:	0e24      	lsrs	r4, r4, #24
 8000868:	0fc9      	lsrs	r1, r1, #31
 800086a:	2aff      	cmp	r2, #255	; 0xff
 800086c:	d00f      	beq.n	800088e <__eqsf2+0x3a>
 800086e:	2cff      	cmp	r4, #255	; 0xff
 8000870:	d011      	beq.n	8000896 <__eqsf2+0x42>
 8000872:	2001      	movs	r0, #1
 8000874:	42a2      	cmp	r2, r4
 8000876:	d000      	beq.n	800087a <__eqsf2+0x26>
 8000878:	bd70      	pop	{r4, r5, r6, pc}
 800087a:	42b5      	cmp	r5, r6
 800087c:	d1fc      	bne.n	8000878 <__eqsf2+0x24>
 800087e:	428b      	cmp	r3, r1
 8000880:	d00d      	beq.n	800089e <__eqsf2+0x4a>
 8000882:	2a00      	cmp	r2, #0
 8000884:	d1f8      	bne.n	8000878 <__eqsf2+0x24>
 8000886:	0028      	movs	r0, r5
 8000888:	1e45      	subs	r5, r0, #1
 800088a:	41a8      	sbcs	r0, r5
 800088c:	e7f4      	b.n	8000878 <__eqsf2+0x24>
 800088e:	2001      	movs	r0, #1
 8000890:	2d00      	cmp	r5, #0
 8000892:	d1f1      	bne.n	8000878 <__eqsf2+0x24>
 8000894:	e7eb      	b.n	800086e <__eqsf2+0x1a>
 8000896:	2001      	movs	r0, #1
 8000898:	2e00      	cmp	r6, #0
 800089a:	d1ed      	bne.n	8000878 <__eqsf2+0x24>
 800089c:	e7e9      	b.n	8000872 <__eqsf2+0x1e>
 800089e:	2000      	movs	r0, #0
 80008a0:	e7ea      	b.n	8000878 <__eqsf2+0x24>
 80008a2:	46c0      	nop			; (mov r8, r8)

080008a4 <__gesf2>:
 80008a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80008a6:	0042      	lsls	r2, r0, #1
 80008a8:	0246      	lsls	r6, r0, #9
 80008aa:	024d      	lsls	r5, r1, #9
 80008ac:	004c      	lsls	r4, r1, #1
 80008ae:	0fc3      	lsrs	r3, r0, #31
 80008b0:	0a76      	lsrs	r6, r6, #9
 80008b2:	0e12      	lsrs	r2, r2, #24
 80008b4:	0a6d      	lsrs	r5, r5, #9
 80008b6:	0e24      	lsrs	r4, r4, #24
 80008b8:	0fc8      	lsrs	r0, r1, #31
 80008ba:	2aff      	cmp	r2, #255	; 0xff
 80008bc:	d01f      	beq.n	80008fe <__gesf2+0x5a>
 80008be:	2cff      	cmp	r4, #255	; 0xff
 80008c0:	d010      	beq.n	80008e4 <__gesf2+0x40>
 80008c2:	2a00      	cmp	r2, #0
 80008c4:	d11f      	bne.n	8000906 <__gesf2+0x62>
 80008c6:	4271      	negs	r1, r6
 80008c8:	4171      	adcs	r1, r6
 80008ca:	2c00      	cmp	r4, #0
 80008cc:	d101      	bne.n	80008d2 <__gesf2+0x2e>
 80008ce:	2d00      	cmp	r5, #0
 80008d0:	d01e      	beq.n	8000910 <__gesf2+0x6c>
 80008d2:	2900      	cmp	r1, #0
 80008d4:	d10e      	bne.n	80008f4 <__gesf2+0x50>
 80008d6:	4283      	cmp	r3, r0
 80008d8:	d01e      	beq.n	8000918 <__gesf2+0x74>
 80008da:	2102      	movs	r1, #2
 80008dc:	1e58      	subs	r0, r3, #1
 80008de:	4008      	ands	r0, r1
 80008e0:	3801      	subs	r0, #1
 80008e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80008e4:	2d00      	cmp	r5, #0
 80008e6:	d126      	bne.n	8000936 <__gesf2+0x92>
 80008e8:	2a00      	cmp	r2, #0
 80008ea:	d1f4      	bne.n	80008d6 <__gesf2+0x32>
 80008ec:	4271      	negs	r1, r6
 80008ee:	4171      	adcs	r1, r6
 80008f0:	2900      	cmp	r1, #0
 80008f2:	d0f0      	beq.n	80008d6 <__gesf2+0x32>
 80008f4:	2800      	cmp	r0, #0
 80008f6:	d1f4      	bne.n	80008e2 <__gesf2+0x3e>
 80008f8:	2001      	movs	r0, #1
 80008fa:	4240      	negs	r0, r0
 80008fc:	e7f1      	b.n	80008e2 <__gesf2+0x3e>
 80008fe:	2e00      	cmp	r6, #0
 8000900:	d119      	bne.n	8000936 <__gesf2+0x92>
 8000902:	2cff      	cmp	r4, #255	; 0xff
 8000904:	d0ee      	beq.n	80008e4 <__gesf2+0x40>
 8000906:	2c00      	cmp	r4, #0
 8000908:	d1e5      	bne.n	80008d6 <__gesf2+0x32>
 800090a:	2d00      	cmp	r5, #0
 800090c:	d1e3      	bne.n	80008d6 <__gesf2+0x32>
 800090e:	e7e4      	b.n	80008da <__gesf2+0x36>
 8000910:	2000      	movs	r0, #0
 8000912:	2e00      	cmp	r6, #0
 8000914:	d0e5      	beq.n	80008e2 <__gesf2+0x3e>
 8000916:	e7e0      	b.n	80008da <__gesf2+0x36>
 8000918:	42a2      	cmp	r2, r4
 800091a:	dc05      	bgt.n	8000928 <__gesf2+0x84>
 800091c:	dbea      	blt.n	80008f4 <__gesf2+0x50>
 800091e:	42ae      	cmp	r6, r5
 8000920:	d802      	bhi.n	8000928 <__gesf2+0x84>
 8000922:	d3e7      	bcc.n	80008f4 <__gesf2+0x50>
 8000924:	2000      	movs	r0, #0
 8000926:	e7dc      	b.n	80008e2 <__gesf2+0x3e>
 8000928:	4241      	negs	r1, r0
 800092a:	4141      	adcs	r1, r0
 800092c:	4248      	negs	r0, r1
 800092e:	2102      	movs	r1, #2
 8000930:	4008      	ands	r0, r1
 8000932:	3801      	subs	r0, #1
 8000934:	e7d5      	b.n	80008e2 <__gesf2+0x3e>
 8000936:	2002      	movs	r0, #2
 8000938:	4240      	negs	r0, r0
 800093a:	e7d2      	b.n	80008e2 <__gesf2+0x3e>

0800093c <__lesf2>:
 800093c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800093e:	0042      	lsls	r2, r0, #1
 8000940:	0246      	lsls	r6, r0, #9
 8000942:	024d      	lsls	r5, r1, #9
 8000944:	004c      	lsls	r4, r1, #1
 8000946:	0fc3      	lsrs	r3, r0, #31
 8000948:	0a76      	lsrs	r6, r6, #9
 800094a:	0e12      	lsrs	r2, r2, #24
 800094c:	0a6d      	lsrs	r5, r5, #9
 800094e:	0e24      	lsrs	r4, r4, #24
 8000950:	0fc8      	lsrs	r0, r1, #31
 8000952:	2aff      	cmp	r2, #255	; 0xff
 8000954:	d00d      	beq.n	8000972 <__lesf2+0x36>
 8000956:	2cff      	cmp	r4, #255	; 0xff
 8000958:	d00f      	beq.n	800097a <__lesf2+0x3e>
 800095a:	2a00      	cmp	r2, #0
 800095c:	d123      	bne.n	80009a6 <__lesf2+0x6a>
 800095e:	4271      	negs	r1, r6
 8000960:	4171      	adcs	r1, r6
 8000962:	2c00      	cmp	r4, #0
 8000964:	d10f      	bne.n	8000986 <__lesf2+0x4a>
 8000966:	2d00      	cmp	r5, #0
 8000968:	d10d      	bne.n	8000986 <__lesf2+0x4a>
 800096a:	2000      	movs	r0, #0
 800096c:	2e00      	cmp	r6, #0
 800096e:	d014      	beq.n	800099a <__lesf2+0x5e>
 8000970:	e00d      	b.n	800098e <__lesf2+0x52>
 8000972:	2e00      	cmp	r6, #0
 8000974:	d110      	bne.n	8000998 <__lesf2+0x5c>
 8000976:	2cff      	cmp	r4, #255	; 0xff
 8000978:	d115      	bne.n	80009a6 <__lesf2+0x6a>
 800097a:	2d00      	cmp	r5, #0
 800097c:	d10c      	bne.n	8000998 <__lesf2+0x5c>
 800097e:	2a00      	cmp	r2, #0
 8000980:	d103      	bne.n	800098a <__lesf2+0x4e>
 8000982:	4271      	negs	r1, r6
 8000984:	4171      	adcs	r1, r6
 8000986:	2900      	cmp	r1, #0
 8000988:	d108      	bne.n	800099c <__lesf2+0x60>
 800098a:	4283      	cmp	r3, r0
 800098c:	d010      	beq.n	80009b0 <__lesf2+0x74>
 800098e:	2102      	movs	r1, #2
 8000990:	1e58      	subs	r0, r3, #1
 8000992:	4008      	ands	r0, r1
 8000994:	3801      	subs	r0, #1
 8000996:	e000      	b.n	800099a <__lesf2+0x5e>
 8000998:	2002      	movs	r0, #2
 800099a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800099c:	2800      	cmp	r0, #0
 800099e:	d1fc      	bne.n	800099a <__lesf2+0x5e>
 80009a0:	2001      	movs	r0, #1
 80009a2:	4240      	negs	r0, r0
 80009a4:	e7f9      	b.n	800099a <__lesf2+0x5e>
 80009a6:	2c00      	cmp	r4, #0
 80009a8:	d1ef      	bne.n	800098a <__lesf2+0x4e>
 80009aa:	2d00      	cmp	r5, #0
 80009ac:	d1ed      	bne.n	800098a <__lesf2+0x4e>
 80009ae:	e7ee      	b.n	800098e <__lesf2+0x52>
 80009b0:	42a2      	cmp	r2, r4
 80009b2:	dc05      	bgt.n	80009c0 <__lesf2+0x84>
 80009b4:	dbf2      	blt.n	800099c <__lesf2+0x60>
 80009b6:	42ae      	cmp	r6, r5
 80009b8:	d802      	bhi.n	80009c0 <__lesf2+0x84>
 80009ba:	d3ef      	bcc.n	800099c <__lesf2+0x60>
 80009bc:	2000      	movs	r0, #0
 80009be:	e7ec      	b.n	800099a <__lesf2+0x5e>
 80009c0:	4241      	negs	r1, r0
 80009c2:	4141      	adcs	r1, r0
 80009c4:	4248      	negs	r0, r1
 80009c6:	2102      	movs	r1, #2
 80009c8:	4008      	ands	r0, r1
 80009ca:	3801      	subs	r0, #1
 80009cc:	e7e5      	b.n	800099a <__lesf2+0x5e>
 80009ce:	46c0      	nop			; (mov r8, r8)

080009d0 <__aeabi_fmul>:
 80009d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80009d2:	4657      	mov	r7, sl
 80009d4:	464e      	mov	r6, r9
 80009d6:	4645      	mov	r5, r8
 80009d8:	46de      	mov	lr, fp
 80009da:	0244      	lsls	r4, r0, #9
 80009dc:	b5e0      	push	{r5, r6, r7, lr}
 80009de:	0045      	lsls	r5, r0, #1
 80009e0:	1c0f      	adds	r7, r1, #0
 80009e2:	0a64      	lsrs	r4, r4, #9
 80009e4:	0e2d      	lsrs	r5, r5, #24
 80009e6:	0fc6      	lsrs	r6, r0, #31
 80009e8:	2d00      	cmp	r5, #0
 80009ea:	d047      	beq.n	8000a7c <__aeabi_fmul+0xac>
 80009ec:	2dff      	cmp	r5, #255	; 0xff
 80009ee:	d04d      	beq.n	8000a8c <__aeabi_fmul+0xbc>
 80009f0:	2300      	movs	r3, #0
 80009f2:	2080      	movs	r0, #128	; 0x80
 80009f4:	469a      	mov	sl, r3
 80009f6:	469b      	mov	fp, r3
 80009f8:	00e4      	lsls	r4, r4, #3
 80009fa:	04c0      	lsls	r0, r0, #19
 80009fc:	4304      	orrs	r4, r0
 80009fe:	3d7f      	subs	r5, #127	; 0x7f
 8000a00:	0278      	lsls	r0, r7, #9
 8000a02:	0a43      	lsrs	r3, r0, #9
 8000a04:	4699      	mov	r9, r3
 8000a06:	007a      	lsls	r2, r7, #1
 8000a08:	0ffb      	lsrs	r3, r7, #31
 8000a0a:	4698      	mov	r8, r3
 8000a0c:	0e12      	lsrs	r2, r2, #24
 8000a0e:	464b      	mov	r3, r9
 8000a10:	d044      	beq.n	8000a9c <__aeabi_fmul+0xcc>
 8000a12:	2aff      	cmp	r2, #255	; 0xff
 8000a14:	d011      	beq.n	8000a3a <__aeabi_fmul+0x6a>
 8000a16:	00d8      	lsls	r0, r3, #3
 8000a18:	2380      	movs	r3, #128	; 0x80
 8000a1a:	04db      	lsls	r3, r3, #19
 8000a1c:	4303      	orrs	r3, r0
 8000a1e:	4699      	mov	r9, r3
 8000a20:	2000      	movs	r0, #0
 8000a22:	3a7f      	subs	r2, #127	; 0x7f
 8000a24:	18ad      	adds	r5, r5, r2
 8000a26:	4647      	mov	r7, r8
 8000a28:	4653      	mov	r3, sl
 8000a2a:	4077      	eors	r7, r6
 8000a2c:	1c69      	adds	r1, r5, #1
 8000a2e:	2b0f      	cmp	r3, #15
 8000a30:	d83f      	bhi.n	8000ab2 <__aeabi_fmul+0xe2>
 8000a32:	4a72      	ldr	r2, [pc, #456]	; (8000bfc <__aeabi_fmul+0x22c>)
 8000a34:	009b      	lsls	r3, r3, #2
 8000a36:	58d3      	ldr	r3, [r2, r3]
 8000a38:	469f      	mov	pc, r3
 8000a3a:	35ff      	adds	r5, #255	; 0xff
 8000a3c:	2b00      	cmp	r3, #0
 8000a3e:	d000      	beq.n	8000a42 <__aeabi_fmul+0x72>
 8000a40:	e079      	b.n	8000b36 <__aeabi_fmul+0x166>
 8000a42:	4652      	mov	r2, sl
 8000a44:	2302      	movs	r3, #2
 8000a46:	431a      	orrs	r2, r3
 8000a48:	4692      	mov	sl, r2
 8000a4a:	2002      	movs	r0, #2
 8000a4c:	e7eb      	b.n	8000a26 <__aeabi_fmul+0x56>
 8000a4e:	4647      	mov	r7, r8
 8000a50:	464c      	mov	r4, r9
 8000a52:	4683      	mov	fp, r0
 8000a54:	465b      	mov	r3, fp
 8000a56:	2b02      	cmp	r3, #2
 8000a58:	d028      	beq.n	8000aac <__aeabi_fmul+0xdc>
 8000a5a:	2b03      	cmp	r3, #3
 8000a5c:	d100      	bne.n	8000a60 <__aeabi_fmul+0x90>
 8000a5e:	e0c6      	b.n	8000bee <__aeabi_fmul+0x21e>
 8000a60:	2b01      	cmp	r3, #1
 8000a62:	d14f      	bne.n	8000b04 <__aeabi_fmul+0x134>
 8000a64:	2000      	movs	r0, #0
 8000a66:	2400      	movs	r4, #0
 8000a68:	05c0      	lsls	r0, r0, #23
 8000a6a:	07ff      	lsls	r7, r7, #31
 8000a6c:	4320      	orrs	r0, r4
 8000a6e:	4338      	orrs	r0, r7
 8000a70:	bcf0      	pop	{r4, r5, r6, r7}
 8000a72:	46bb      	mov	fp, r7
 8000a74:	46b2      	mov	sl, r6
 8000a76:	46a9      	mov	r9, r5
 8000a78:	46a0      	mov	r8, r4
 8000a7a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000a7c:	2c00      	cmp	r4, #0
 8000a7e:	d171      	bne.n	8000b64 <__aeabi_fmul+0x194>
 8000a80:	2304      	movs	r3, #4
 8000a82:	469a      	mov	sl, r3
 8000a84:	3b03      	subs	r3, #3
 8000a86:	2500      	movs	r5, #0
 8000a88:	469b      	mov	fp, r3
 8000a8a:	e7b9      	b.n	8000a00 <__aeabi_fmul+0x30>
 8000a8c:	2c00      	cmp	r4, #0
 8000a8e:	d163      	bne.n	8000b58 <__aeabi_fmul+0x188>
 8000a90:	2308      	movs	r3, #8
 8000a92:	469a      	mov	sl, r3
 8000a94:	3b06      	subs	r3, #6
 8000a96:	25ff      	movs	r5, #255	; 0xff
 8000a98:	469b      	mov	fp, r3
 8000a9a:	e7b1      	b.n	8000a00 <__aeabi_fmul+0x30>
 8000a9c:	2b00      	cmp	r3, #0
 8000a9e:	d150      	bne.n	8000b42 <__aeabi_fmul+0x172>
 8000aa0:	4652      	mov	r2, sl
 8000aa2:	3301      	adds	r3, #1
 8000aa4:	431a      	orrs	r2, r3
 8000aa6:	4692      	mov	sl, r2
 8000aa8:	2001      	movs	r0, #1
 8000aaa:	e7bc      	b.n	8000a26 <__aeabi_fmul+0x56>
 8000aac:	20ff      	movs	r0, #255	; 0xff
 8000aae:	2400      	movs	r4, #0
 8000ab0:	e7da      	b.n	8000a68 <__aeabi_fmul+0x98>
 8000ab2:	4648      	mov	r0, r9
 8000ab4:	0c26      	lsrs	r6, r4, #16
 8000ab6:	0424      	lsls	r4, r4, #16
 8000ab8:	0c22      	lsrs	r2, r4, #16
 8000aba:	0404      	lsls	r4, r0, #16
 8000abc:	0c24      	lsrs	r4, r4, #16
 8000abe:	464b      	mov	r3, r9
 8000ac0:	0020      	movs	r0, r4
 8000ac2:	0c1b      	lsrs	r3, r3, #16
 8000ac4:	4350      	muls	r0, r2
 8000ac6:	4374      	muls	r4, r6
 8000ac8:	435a      	muls	r2, r3
 8000aca:	435e      	muls	r6, r3
 8000acc:	1912      	adds	r2, r2, r4
 8000ace:	0c03      	lsrs	r3, r0, #16
 8000ad0:	189b      	adds	r3, r3, r2
 8000ad2:	429c      	cmp	r4, r3
 8000ad4:	d903      	bls.n	8000ade <__aeabi_fmul+0x10e>
 8000ad6:	2280      	movs	r2, #128	; 0x80
 8000ad8:	0252      	lsls	r2, r2, #9
 8000ada:	4694      	mov	ip, r2
 8000adc:	4466      	add	r6, ip
 8000ade:	0400      	lsls	r0, r0, #16
 8000ae0:	041a      	lsls	r2, r3, #16
 8000ae2:	0c00      	lsrs	r0, r0, #16
 8000ae4:	1812      	adds	r2, r2, r0
 8000ae6:	0194      	lsls	r4, r2, #6
 8000ae8:	1e60      	subs	r0, r4, #1
 8000aea:	4184      	sbcs	r4, r0
 8000aec:	0c1b      	lsrs	r3, r3, #16
 8000aee:	0e92      	lsrs	r2, r2, #26
 8000af0:	199b      	adds	r3, r3, r6
 8000af2:	4314      	orrs	r4, r2
 8000af4:	019b      	lsls	r3, r3, #6
 8000af6:	431c      	orrs	r4, r3
 8000af8:	011b      	lsls	r3, r3, #4
 8000afa:	d572      	bpl.n	8000be2 <__aeabi_fmul+0x212>
 8000afc:	2001      	movs	r0, #1
 8000afe:	0863      	lsrs	r3, r4, #1
 8000b00:	4004      	ands	r4, r0
 8000b02:	431c      	orrs	r4, r3
 8000b04:	0008      	movs	r0, r1
 8000b06:	307f      	adds	r0, #127	; 0x7f
 8000b08:	2800      	cmp	r0, #0
 8000b0a:	dd3c      	ble.n	8000b86 <__aeabi_fmul+0x1b6>
 8000b0c:	0763      	lsls	r3, r4, #29
 8000b0e:	d004      	beq.n	8000b1a <__aeabi_fmul+0x14a>
 8000b10:	230f      	movs	r3, #15
 8000b12:	4023      	ands	r3, r4
 8000b14:	2b04      	cmp	r3, #4
 8000b16:	d000      	beq.n	8000b1a <__aeabi_fmul+0x14a>
 8000b18:	3404      	adds	r4, #4
 8000b1a:	0123      	lsls	r3, r4, #4
 8000b1c:	d503      	bpl.n	8000b26 <__aeabi_fmul+0x156>
 8000b1e:	3180      	adds	r1, #128	; 0x80
 8000b20:	0008      	movs	r0, r1
 8000b22:	4b37      	ldr	r3, [pc, #220]	; (8000c00 <__aeabi_fmul+0x230>)
 8000b24:	401c      	ands	r4, r3
 8000b26:	28fe      	cmp	r0, #254	; 0xfe
 8000b28:	dcc0      	bgt.n	8000aac <__aeabi_fmul+0xdc>
 8000b2a:	01a4      	lsls	r4, r4, #6
 8000b2c:	0a64      	lsrs	r4, r4, #9
 8000b2e:	b2c0      	uxtb	r0, r0
 8000b30:	e79a      	b.n	8000a68 <__aeabi_fmul+0x98>
 8000b32:	0037      	movs	r7, r6
 8000b34:	e78e      	b.n	8000a54 <__aeabi_fmul+0x84>
 8000b36:	4652      	mov	r2, sl
 8000b38:	2303      	movs	r3, #3
 8000b3a:	431a      	orrs	r2, r3
 8000b3c:	4692      	mov	sl, r2
 8000b3e:	2003      	movs	r0, #3
 8000b40:	e771      	b.n	8000a26 <__aeabi_fmul+0x56>
 8000b42:	4648      	mov	r0, r9
 8000b44:	f002 f910 	bl	8002d68 <__clzsi2>
 8000b48:	464a      	mov	r2, r9
 8000b4a:	1f43      	subs	r3, r0, #5
 8000b4c:	409a      	lsls	r2, r3
 8000b4e:	1a2d      	subs	r5, r5, r0
 8000b50:	4691      	mov	r9, r2
 8000b52:	2000      	movs	r0, #0
 8000b54:	3d76      	subs	r5, #118	; 0x76
 8000b56:	e766      	b.n	8000a26 <__aeabi_fmul+0x56>
 8000b58:	230c      	movs	r3, #12
 8000b5a:	469a      	mov	sl, r3
 8000b5c:	3b09      	subs	r3, #9
 8000b5e:	25ff      	movs	r5, #255	; 0xff
 8000b60:	469b      	mov	fp, r3
 8000b62:	e74d      	b.n	8000a00 <__aeabi_fmul+0x30>
 8000b64:	0020      	movs	r0, r4
 8000b66:	f002 f8ff 	bl	8002d68 <__clzsi2>
 8000b6a:	2576      	movs	r5, #118	; 0x76
 8000b6c:	1f43      	subs	r3, r0, #5
 8000b6e:	409c      	lsls	r4, r3
 8000b70:	2300      	movs	r3, #0
 8000b72:	426d      	negs	r5, r5
 8000b74:	469a      	mov	sl, r3
 8000b76:	469b      	mov	fp, r3
 8000b78:	1a2d      	subs	r5, r5, r0
 8000b7a:	e741      	b.n	8000a00 <__aeabi_fmul+0x30>
 8000b7c:	2480      	movs	r4, #128	; 0x80
 8000b7e:	2700      	movs	r7, #0
 8000b80:	20ff      	movs	r0, #255	; 0xff
 8000b82:	03e4      	lsls	r4, r4, #15
 8000b84:	e770      	b.n	8000a68 <__aeabi_fmul+0x98>
 8000b86:	2301      	movs	r3, #1
 8000b88:	1a1b      	subs	r3, r3, r0
 8000b8a:	2b1b      	cmp	r3, #27
 8000b8c:	dd00      	ble.n	8000b90 <__aeabi_fmul+0x1c0>
 8000b8e:	e769      	b.n	8000a64 <__aeabi_fmul+0x94>
 8000b90:	319e      	adds	r1, #158	; 0x9e
 8000b92:	0020      	movs	r0, r4
 8000b94:	408c      	lsls	r4, r1
 8000b96:	40d8      	lsrs	r0, r3
 8000b98:	1e63      	subs	r3, r4, #1
 8000b9a:	419c      	sbcs	r4, r3
 8000b9c:	4304      	orrs	r4, r0
 8000b9e:	0763      	lsls	r3, r4, #29
 8000ba0:	d004      	beq.n	8000bac <__aeabi_fmul+0x1dc>
 8000ba2:	230f      	movs	r3, #15
 8000ba4:	4023      	ands	r3, r4
 8000ba6:	2b04      	cmp	r3, #4
 8000ba8:	d000      	beq.n	8000bac <__aeabi_fmul+0x1dc>
 8000baa:	3404      	adds	r4, #4
 8000bac:	0163      	lsls	r3, r4, #5
 8000bae:	d51a      	bpl.n	8000be6 <__aeabi_fmul+0x216>
 8000bb0:	2001      	movs	r0, #1
 8000bb2:	2400      	movs	r4, #0
 8000bb4:	e758      	b.n	8000a68 <__aeabi_fmul+0x98>
 8000bb6:	2080      	movs	r0, #128	; 0x80
 8000bb8:	03c0      	lsls	r0, r0, #15
 8000bba:	4204      	tst	r4, r0
 8000bbc:	d009      	beq.n	8000bd2 <__aeabi_fmul+0x202>
 8000bbe:	464b      	mov	r3, r9
 8000bc0:	4203      	tst	r3, r0
 8000bc2:	d106      	bne.n	8000bd2 <__aeabi_fmul+0x202>
 8000bc4:	464c      	mov	r4, r9
 8000bc6:	4304      	orrs	r4, r0
 8000bc8:	0264      	lsls	r4, r4, #9
 8000bca:	4647      	mov	r7, r8
 8000bcc:	20ff      	movs	r0, #255	; 0xff
 8000bce:	0a64      	lsrs	r4, r4, #9
 8000bd0:	e74a      	b.n	8000a68 <__aeabi_fmul+0x98>
 8000bd2:	2080      	movs	r0, #128	; 0x80
 8000bd4:	03c0      	lsls	r0, r0, #15
 8000bd6:	4304      	orrs	r4, r0
 8000bd8:	0264      	lsls	r4, r4, #9
 8000bda:	0037      	movs	r7, r6
 8000bdc:	20ff      	movs	r0, #255	; 0xff
 8000bde:	0a64      	lsrs	r4, r4, #9
 8000be0:	e742      	b.n	8000a68 <__aeabi_fmul+0x98>
 8000be2:	0029      	movs	r1, r5
 8000be4:	e78e      	b.n	8000b04 <__aeabi_fmul+0x134>
 8000be6:	01a4      	lsls	r4, r4, #6
 8000be8:	2000      	movs	r0, #0
 8000bea:	0a64      	lsrs	r4, r4, #9
 8000bec:	e73c      	b.n	8000a68 <__aeabi_fmul+0x98>
 8000bee:	2080      	movs	r0, #128	; 0x80
 8000bf0:	03c0      	lsls	r0, r0, #15
 8000bf2:	4304      	orrs	r4, r0
 8000bf4:	0264      	lsls	r4, r4, #9
 8000bf6:	20ff      	movs	r0, #255	; 0xff
 8000bf8:	0a64      	lsrs	r4, r4, #9
 8000bfa:	e735      	b.n	8000a68 <__aeabi_fmul+0x98>
 8000bfc:	0800a3f0 	.word	0x0800a3f0
 8000c00:	f7ffffff 	.word	0xf7ffffff

08000c04 <__aeabi_fsub>:
 8000c04:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000c06:	4646      	mov	r6, r8
 8000c08:	46d6      	mov	lr, sl
 8000c0a:	464f      	mov	r7, r9
 8000c0c:	0243      	lsls	r3, r0, #9
 8000c0e:	0a5b      	lsrs	r3, r3, #9
 8000c10:	00da      	lsls	r2, r3, #3
 8000c12:	4694      	mov	ip, r2
 8000c14:	024a      	lsls	r2, r1, #9
 8000c16:	b5c0      	push	{r6, r7, lr}
 8000c18:	0044      	lsls	r4, r0, #1
 8000c1a:	0a56      	lsrs	r6, r2, #9
 8000c1c:	1c05      	adds	r5, r0, #0
 8000c1e:	46b0      	mov	r8, r6
 8000c20:	0e24      	lsrs	r4, r4, #24
 8000c22:	004e      	lsls	r6, r1, #1
 8000c24:	0992      	lsrs	r2, r2, #6
 8000c26:	001f      	movs	r7, r3
 8000c28:	0020      	movs	r0, r4
 8000c2a:	4692      	mov	sl, r2
 8000c2c:	0fed      	lsrs	r5, r5, #31
 8000c2e:	0e36      	lsrs	r6, r6, #24
 8000c30:	0fc9      	lsrs	r1, r1, #31
 8000c32:	2eff      	cmp	r6, #255	; 0xff
 8000c34:	d100      	bne.n	8000c38 <__aeabi_fsub+0x34>
 8000c36:	e07f      	b.n	8000d38 <__aeabi_fsub+0x134>
 8000c38:	2201      	movs	r2, #1
 8000c3a:	4051      	eors	r1, r2
 8000c3c:	428d      	cmp	r5, r1
 8000c3e:	d051      	beq.n	8000ce4 <__aeabi_fsub+0xe0>
 8000c40:	1ba2      	subs	r2, r4, r6
 8000c42:	4691      	mov	r9, r2
 8000c44:	2a00      	cmp	r2, #0
 8000c46:	dc00      	bgt.n	8000c4a <__aeabi_fsub+0x46>
 8000c48:	e07e      	b.n	8000d48 <__aeabi_fsub+0x144>
 8000c4a:	2e00      	cmp	r6, #0
 8000c4c:	d100      	bne.n	8000c50 <__aeabi_fsub+0x4c>
 8000c4e:	e099      	b.n	8000d84 <__aeabi_fsub+0x180>
 8000c50:	2cff      	cmp	r4, #255	; 0xff
 8000c52:	d100      	bne.n	8000c56 <__aeabi_fsub+0x52>
 8000c54:	e08c      	b.n	8000d70 <__aeabi_fsub+0x16c>
 8000c56:	2380      	movs	r3, #128	; 0x80
 8000c58:	4652      	mov	r2, sl
 8000c5a:	04db      	lsls	r3, r3, #19
 8000c5c:	431a      	orrs	r2, r3
 8000c5e:	4692      	mov	sl, r2
 8000c60:	464a      	mov	r2, r9
 8000c62:	2301      	movs	r3, #1
 8000c64:	2a1b      	cmp	r2, #27
 8000c66:	dc08      	bgt.n	8000c7a <__aeabi_fsub+0x76>
 8000c68:	4653      	mov	r3, sl
 8000c6a:	2120      	movs	r1, #32
 8000c6c:	40d3      	lsrs	r3, r2
 8000c6e:	1a89      	subs	r1, r1, r2
 8000c70:	4652      	mov	r2, sl
 8000c72:	408a      	lsls	r2, r1
 8000c74:	1e51      	subs	r1, r2, #1
 8000c76:	418a      	sbcs	r2, r1
 8000c78:	4313      	orrs	r3, r2
 8000c7a:	4662      	mov	r2, ip
 8000c7c:	1ad3      	subs	r3, r2, r3
 8000c7e:	015a      	lsls	r2, r3, #5
 8000c80:	d400      	bmi.n	8000c84 <__aeabi_fsub+0x80>
 8000c82:	e0f3      	b.n	8000e6c <__aeabi_fsub+0x268>
 8000c84:	019b      	lsls	r3, r3, #6
 8000c86:	099e      	lsrs	r6, r3, #6
 8000c88:	0030      	movs	r0, r6
 8000c8a:	f002 f86d 	bl	8002d68 <__clzsi2>
 8000c8e:	3805      	subs	r0, #5
 8000c90:	4086      	lsls	r6, r0
 8000c92:	4284      	cmp	r4, r0
 8000c94:	dd00      	ble.n	8000c98 <__aeabi_fsub+0x94>
 8000c96:	e0f7      	b.n	8000e88 <__aeabi_fsub+0x284>
 8000c98:	0032      	movs	r2, r6
 8000c9a:	1b04      	subs	r4, r0, r4
 8000c9c:	2020      	movs	r0, #32
 8000c9e:	3401      	adds	r4, #1
 8000ca0:	40e2      	lsrs	r2, r4
 8000ca2:	1b04      	subs	r4, r0, r4
 8000ca4:	40a6      	lsls	r6, r4
 8000ca6:	0033      	movs	r3, r6
 8000ca8:	1e5e      	subs	r6, r3, #1
 8000caa:	41b3      	sbcs	r3, r6
 8000cac:	2400      	movs	r4, #0
 8000cae:	4313      	orrs	r3, r2
 8000cb0:	075a      	lsls	r2, r3, #29
 8000cb2:	d004      	beq.n	8000cbe <__aeabi_fsub+0xba>
 8000cb4:	220f      	movs	r2, #15
 8000cb6:	401a      	ands	r2, r3
 8000cb8:	2a04      	cmp	r2, #4
 8000cba:	d000      	beq.n	8000cbe <__aeabi_fsub+0xba>
 8000cbc:	3304      	adds	r3, #4
 8000cbe:	015a      	lsls	r2, r3, #5
 8000cc0:	d400      	bmi.n	8000cc4 <__aeabi_fsub+0xc0>
 8000cc2:	e0d6      	b.n	8000e72 <__aeabi_fsub+0x26e>
 8000cc4:	1c62      	adds	r2, r4, #1
 8000cc6:	2cfe      	cmp	r4, #254	; 0xfe
 8000cc8:	d100      	bne.n	8000ccc <__aeabi_fsub+0xc8>
 8000cca:	e0da      	b.n	8000e82 <__aeabi_fsub+0x27e>
 8000ccc:	019b      	lsls	r3, r3, #6
 8000cce:	0a5f      	lsrs	r7, r3, #9
 8000cd0:	b2d0      	uxtb	r0, r2
 8000cd2:	05c0      	lsls	r0, r0, #23
 8000cd4:	4338      	orrs	r0, r7
 8000cd6:	07ed      	lsls	r5, r5, #31
 8000cd8:	4328      	orrs	r0, r5
 8000cda:	bce0      	pop	{r5, r6, r7}
 8000cdc:	46ba      	mov	sl, r7
 8000cde:	46b1      	mov	r9, r6
 8000ce0:	46a8      	mov	r8, r5
 8000ce2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000ce4:	1ba2      	subs	r2, r4, r6
 8000ce6:	4691      	mov	r9, r2
 8000ce8:	2a00      	cmp	r2, #0
 8000cea:	dd63      	ble.n	8000db4 <__aeabi_fsub+0x1b0>
 8000cec:	2e00      	cmp	r6, #0
 8000cee:	d100      	bne.n	8000cf2 <__aeabi_fsub+0xee>
 8000cf0:	e099      	b.n	8000e26 <__aeabi_fsub+0x222>
 8000cf2:	2cff      	cmp	r4, #255	; 0xff
 8000cf4:	d03c      	beq.n	8000d70 <__aeabi_fsub+0x16c>
 8000cf6:	2380      	movs	r3, #128	; 0x80
 8000cf8:	4652      	mov	r2, sl
 8000cfa:	04db      	lsls	r3, r3, #19
 8000cfc:	431a      	orrs	r2, r3
 8000cfe:	4692      	mov	sl, r2
 8000d00:	464a      	mov	r2, r9
 8000d02:	2301      	movs	r3, #1
 8000d04:	2a1b      	cmp	r2, #27
 8000d06:	dc08      	bgt.n	8000d1a <__aeabi_fsub+0x116>
 8000d08:	4653      	mov	r3, sl
 8000d0a:	2120      	movs	r1, #32
 8000d0c:	40d3      	lsrs	r3, r2
 8000d0e:	1a89      	subs	r1, r1, r2
 8000d10:	4652      	mov	r2, sl
 8000d12:	408a      	lsls	r2, r1
 8000d14:	1e51      	subs	r1, r2, #1
 8000d16:	418a      	sbcs	r2, r1
 8000d18:	4313      	orrs	r3, r2
 8000d1a:	4463      	add	r3, ip
 8000d1c:	015a      	lsls	r2, r3, #5
 8000d1e:	d400      	bmi.n	8000d22 <__aeabi_fsub+0x11e>
 8000d20:	e0a4      	b.n	8000e6c <__aeabi_fsub+0x268>
 8000d22:	3401      	adds	r4, #1
 8000d24:	2cff      	cmp	r4, #255	; 0xff
 8000d26:	d100      	bne.n	8000d2a <__aeabi_fsub+0x126>
 8000d28:	e0ab      	b.n	8000e82 <__aeabi_fsub+0x27e>
 8000d2a:	2201      	movs	r2, #1
 8000d2c:	4997      	ldr	r1, [pc, #604]	; (8000f8c <__aeabi_fsub+0x388>)
 8000d2e:	401a      	ands	r2, r3
 8000d30:	085b      	lsrs	r3, r3, #1
 8000d32:	400b      	ands	r3, r1
 8000d34:	4313      	orrs	r3, r2
 8000d36:	e7bb      	b.n	8000cb0 <__aeabi_fsub+0xac>
 8000d38:	2a00      	cmp	r2, #0
 8000d3a:	d032      	beq.n	8000da2 <__aeabi_fsub+0x19e>
 8000d3c:	428d      	cmp	r5, r1
 8000d3e:	d035      	beq.n	8000dac <__aeabi_fsub+0x1a8>
 8000d40:	22ff      	movs	r2, #255	; 0xff
 8000d42:	4252      	negs	r2, r2
 8000d44:	4691      	mov	r9, r2
 8000d46:	44a1      	add	r9, r4
 8000d48:	464a      	mov	r2, r9
 8000d4a:	2a00      	cmp	r2, #0
 8000d4c:	d051      	beq.n	8000df2 <__aeabi_fsub+0x1ee>
 8000d4e:	1b30      	subs	r0, r6, r4
 8000d50:	2c00      	cmp	r4, #0
 8000d52:	d000      	beq.n	8000d56 <__aeabi_fsub+0x152>
 8000d54:	e09c      	b.n	8000e90 <__aeabi_fsub+0x28c>
 8000d56:	4663      	mov	r3, ip
 8000d58:	2b00      	cmp	r3, #0
 8000d5a:	d100      	bne.n	8000d5e <__aeabi_fsub+0x15a>
 8000d5c:	e0df      	b.n	8000f1e <__aeabi_fsub+0x31a>
 8000d5e:	3801      	subs	r0, #1
 8000d60:	2800      	cmp	r0, #0
 8000d62:	d100      	bne.n	8000d66 <__aeabi_fsub+0x162>
 8000d64:	e0f7      	b.n	8000f56 <__aeabi_fsub+0x352>
 8000d66:	2eff      	cmp	r6, #255	; 0xff
 8000d68:	d000      	beq.n	8000d6c <__aeabi_fsub+0x168>
 8000d6a:	e099      	b.n	8000ea0 <__aeabi_fsub+0x29c>
 8000d6c:	000d      	movs	r5, r1
 8000d6e:	4643      	mov	r3, r8
 8000d70:	2b00      	cmp	r3, #0
 8000d72:	d100      	bne.n	8000d76 <__aeabi_fsub+0x172>
 8000d74:	e085      	b.n	8000e82 <__aeabi_fsub+0x27e>
 8000d76:	2780      	movs	r7, #128	; 0x80
 8000d78:	03ff      	lsls	r7, r7, #15
 8000d7a:	431f      	orrs	r7, r3
 8000d7c:	027f      	lsls	r7, r7, #9
 8000d7e:	20ff      	movs	r0, #255	; 0xff
 8000d80:	0a7f      	lsrs	r7, r7, #9
 8000d82:	e7a6      	b.n	8000cd2 <__aeabi_fsub+0xce>
 8000d84:	4652      	mov	r2, sl
 8000d86:	2a00      	cmp	r2, #0
 8000d88:	d074      	beq.n	8000e74 <__aeabi_fsub+0x270>
 8000d8a:	2201      	movs	r2, #1
 8000d8c:	4252      	negs	r2, r2
 8000d8e:	4690      	mov	r8, r2
 8000d90:	44c1      	add	r9, r8
 8000d92:	464a      	mov	r2, r9
 8000d94:	2a00      	cmp	r2, #0
 8000d96:	d100      	bne.n	8000d9a <__aeabi_fsub+0x196>
 8000d98:	e0c8      	b.n	8000f2c <__aeabi_fsub+0x328>
 8000d9a:	2cff      	cmp	r4, #255	; 0xff
 8000d9c:	d000      	beq.n	8000da0 <__aeabi_fsub+0x19c>
 8000d9e:	e75f      	b.n	8000c60 <__aeabi_fsub+0x5c>
 8000da0:	e7e6      	b.n	8000d70 <__aeabi_fsub+0x16c>
 8000da2:	2201      	movs	r2, #1
 8000da4:	4051      	eors	r1, r2
 8000da6:	42a9      	cmp	r1, r5
 8000da8:	d000      	beq.n	8000dac <__aeabi_fsub+0x1a8>
 8000daa:	e749      	b.n	8000c40 <__aeabi_fsub+0x3c>
 8000dac:	22ff      	movs	r2, #255	; 0xff
 8000dae:	4252      	negs	r2, r2
 8000db0:	4691      	mov	r9, r2
 8000db2:	44a1      	add	r9, r4
 8000db4:	464a      	mov	r2, r9
 8000db6:	2a00      	cmp	r2, #0
 8000db8:	d043      	beq.n	8000e42 <__aeabi_fsub+0x23e>
 8000dba:	1b31      	subs	r1, r6, r4
 8000dbc:	2c00      	cmp	r4, #0
 8000dbe:	d100      	bne.n	8000dc2 <__aeabi_fsub+0x1be>
 8000dc0:	e08c      	b.n	8000edc <__aeabi_fsub+0x2d8>
 8000dc2:	2eff      	cmp	r6, #255	; 0xff
 8000dc4:	d100      	bne.n	8000dc8 <__aeabi_fsub+0x1c4>
 8000dc6:	e092      	b.n	8000eee <__aeabi_fsub+0x2ea>
 8000dc8:	2380      	movs	r3, #128	; 0x80
 8000dca:	4662      	mov	r2, ip
 8000dcc:	04db      	lsls	r3, r3, #19
 8000dce:	431a      	orrs	r2, r3
 8000dd0:	4694      	mov	ip, r2
 8000dd2:	2301      	movs	r3, #1
 8000dd4:	291b      	cmp	r1, #27
 8000dd6:	dc09      	bgt.n	8000dec <__aeabi_fsub+0x1e8>
 8000dd8:	2020      	movs	r0, #32
 8000dda:	4663      	mov	r3, ip
 8000ddc:	4662      	mov	r2, ip
 8000dde:	40cb      	lsrs	r3, r1
 8000de0:	1a41      	subs	r1, r0, r1
 8000de2:	408a      	lsls	r2, r1
 8000de4:	0011      	movs	r1, r2
 8000de6:	1e48      	subs	r0, r1, #1
 8000de8:	4181      	sbcs	r1, r0
 8000dea:	430b      	orrs	r3, r1
 8000dec:	0034      	movs	r4, r6
 8000dee:	4453      	add	r3, sl
 8000df0:	e794      	b.n	8000d1c <__aeabi_fsub+0x118>
 8000df2:	22fe      	movs	r2, #254	; 0xfe
 8000df4:	1c66      	adds	r6, r4, #1
 8000df6:	4232      	tst	r2, r6
 8000df8:	d164      	bne.n	8000ec4 <__aeabi_fsub+0x2c0>
 8000dfa:	2c00      	cmp	r4, #0
 8000dfc:	d000      	beq.n	8000e00 <__aeabi_fsub+0x1fc>
 8000dfe:	e082      	b.n	8000f06 <__aeabi_fsub+0x302>
 8000e00:	4663      	mov	r3, ip
 8000e02:	2b00      	cmp	r3, #0
 8000e04:	d100      	bne.n	8000e08 <__aeabi_fsub+0x204>
 8000e06:	e0ab      	b.n	8000f60 <__aeabi_fsub+0x35c>
 8000e08:	4653      	mov	r3, sl
 8000e0a:	2b00      	cmp	r3, #0
 8000e0c:	d100      	bne.n	8000e10 <__aeabi_fsub+0x20c>
 8000e0e:	e760      	b.n	8000cd2 <__aeabi_fsub+0xce>
 8000e10:	4663      	mov	r3, ip
 8000e12:	4652      	mov	r2, sl
 8000e14:	1a9b      	subs	r3, r3, r2
 8000e16:	015a      	lsls	r2, r3, #5
 8000e18:	d400      	bmi.n	8000e1c <__aeabi_fsub+0x218>
 8000e1a:	e0aa      	b.n	8000f72 <__aeabi_fsub+0x36e>
 8000e1c:	4663      	mov	r3, ip
 8000e1e:	4652      	mov	r2, sl
 8000e20:	000d      	movs	r5, r1
 8000e22:	1ad3      	subs	r3, r2, r3
 8000e24:	e744      	b.n	8000cb0 <__aeabi_fsub+0xac>
 8000e26:	4652      	mov	r2, sl
 8000e28:	2a00      	cmp	r2, #0
 8000e2a:	d023      	beq.n	8000e74 <__aeabi_fsub+0x270>
 8000e2c:	2201      	movs	r2, #1
 8000e2e:	4252      	negs	r2, r2
 8000e30:	4690      	mov	r8, r2
 8000e32:	44c1      	add	r9, r8
 8000e34:	464a      	mov	r2, r9
 8000e36:	2a00      	cmp	r2, #0
 8000e38:	d075      	beq.n	8000f26 <__aeabi_fsub+0x322>
 8000e3a:	2cff      	cmp	r4, #255	; 0xff
 8000e3c:	d000      	beq.n	8000e40 <__aeabi_fsub+0x23c>
 8000e3e:	e75f      	b.n	8000d00 <__aeabi_fsub+0xfc>
 8000e40:	e796      	b.n	8000d70 <__aeabi_fsub+0x16c>
 8000e42:	26fe      	movs	r6, #254	; 0xfe
 8000e44:	3401      	adds	r4, #1
 8000e46:	4226      	tst	r6, r4
 8000e48:	d153      	bne.n	8000ef2 <__aeabi_fsub+0x2ee>
 8000e4a:	2800      	cmp	r0, #0
 8000e4c:	d172      	bne.n	8000f34 <__aeabi_fsub+0x330>
 8000e4e:	4663      	mov	r3, ip
 8000e50:	2b00      	cmp	r3, #0
 8000e52:	d100      	bne.n	8000e56 <__aeabi_fsub+0x252>
 8000e54:	e093      	b.n	8000f7e <__aeabi_fsub+0x37a>
 8000e56:	4653      	mov	r3, sl
 8000e58:	2b00      	cmp	r3, #0
 8000e5a:	d100      	bne.n	8000e5e <__aeabi_fsub+0x25a>
 8000e5c:	e739      	b.n	8000cd2 <__aeabi_fsub+0xce>
 8000e5e:	4463      	add	r3, ip
 8000e60:	2400      	movs	r4, #0
 8000e62:	015a      	lsls	r2, r3, #5
 8000e64:	d502      	bpl.n	8000e6c <__aeabi_fsub+0x268>
 8000e66:	4a4a      	ldr	r2, [pc, #296]	; (8000f90 <__aeabi_fsub+0x38c>)
 8000e68:	3401      	adds	r4, #1
 8000e6a:	4013      	ands	r3, r2
 8000e6c:	075a      	lsls	r2, r3, #29
 8000e6e:	d000      	beq.n	8000e72 <__aeabi_fsub+0x26e>
 8000e70:	e720      	b.n	8000cb4 <__aeabi_fsub+0xb0>
 8000e72:	08db      	lsrs	r3, r3, #3
 8000e74:	2cff      	cmp	r4, #255	; 0xff
 8000e76:	d100      	bne.n	8000e7a <__aeabi_fsub+0x276>
 8000e78:	e77a      	b.n	8000d70 <__aeabi_fsub+0x16c>
 8000e7a:	025b      	lsls	r3, r3, #9
 8000e7c:	0a5f      	lsrs	r7, r3, #9
 8000e7e:	b2e0      	uxtb	r0, r4
 8000e80:	e727      	b.n	8000cd2 <__aeabi_fsub+0xce>
 8000e82:	20ff      	movs	r0, #255	; 0xff
 8000e84:	2700      	movs	r7, #0
 8000e86:	e724      	b.n	8000cd2 <__aeabi_fsub+0xce>
 8000e88:	4b41      	ldr	r3, [pc, #260]	; (8000f90 <__aeabi_fsub+0x38c>)
 8000e8a:	1a24      	subs	r4, r4, r0
 8000e8c:	4033      	ands	r3, r6
 8000e8e:	e70f      	b.n	8000cb0 <__aeabi_fsub+0xac>
 8000e90:	2eff      	cmp	r6, #255	; 0xff
 8000e92:	d100      	bne.n	8000e96 <__aeabi_fsub+0x292>
 8000e94:	e76a      	b.n	8000d6c <__aeabi_fsub+0x168>
 8000e96:	2380      	movs	r3, #128	; 0x80
 8000e98:	4662      	mov	r2, ip
 8000e9a:	04db      	lsls	r3, r3, #19
 8000e9c:	431a      	orrs	r2, r3
 8000e9e:	4694      	mov	ip, r2
 8000ea0:	2301      	movs	r3, #1
 8000ea2:	281b      	cmp	r0, #27
 8000ea4:	dc09      	bgt.n	8000eba <__aeabi_fsub+0x2b6>
 8000ea6:	2420      	movs	r4, #32
 8000ea8:	4663      	mov	r3, ip
 8000eaa:	4662      	mov	r2, ip
 8000eac:	40c3      	lsrs	r3, r0
 8000eae:	1a20      	subs	r0, r4, r0
 8000eb0:	4082      	lsls	r2, r0
 8000eb2:	0010      	movs	r0, r2
 8000eb4:	1e44      	subs	r4, r0, #1
 8000eb6:	41a0      	sbcs	r0, r4
 8000eb8:	4303      	orrs	r3, r0
 8000eba:	4652      	mov	r2, sl
 8000ebc:	000d      	movs	r5, r1
 8000ebe:	0034      	movs	r4, r6
 8000ec0:	1ad3      	subs	r3, r2, r3
 8000ec2:	e6dc      	b.n	8000c7e <__aeabi_fsub+0x7a>
 8000ec4:	4663      	mov	r3, ip
 8000ec6:	4652      	mov	r2, sl
 8000ec8:	1a9e      	subs	r6, r3, r2
 8000eca:	0173      	lsls	r3, r6, #5
 8000ecc:	d417      	bmi.n	8000efe <__aeabi_fsub+0x2fa>
 8000ece:	2e00      	cmp	r6, #0
 8000ed0:	d000      	beq.n	8000ed4 <__aeabi_fsub+0x2d0>
 8000ed2:	e6d9      	b.n	8000c88 <__aeabi_fsub+0x84>
 8000ed4:	2500      	movs	r5, #0
 8000ed6:	2000      	movs	r0, #0
 8000ed8:	2700      	movs	r7, #0
 8000eda:	e6fa      	b.n	8000cd2 <__aeabi_fsub+0xce>
 8000edc:	4663      	mov	r3, ip
 8000ede:	2b00      	cmp	r3, #0
 8000ee0:	d044      	beq.n	8000f6c <__aeabi_fsub+0x368>
 8000ee2:	3901      	subs	r1, #1
 8000ee4:	2900      	cmp	r1, #0
 8000ee6:	d04c      	beq.n	8000f82 <__aeabi_fsub+0x37e>
 8000ee8:	2eff      	cmp	r6, #255	; 0xff
 8000eea:	d000      	beq.n	8000eee <__aeabi_fsub+0x2ea>
 8000eec:	e771      	b.n	8000dd2 <__aeabi_fsub+0x1ce>
 8000eee:	4643      	mov	r3, r8
 8000ef0:	e73e      	b.n	8000d70 <__aeabi_fsub+0x16c>
 8000ef2:	2cff      	cmp	r4, #255	; 0xff
 8000ef4:	d0c5      	beq.n	8000e82 <__aeabi_fsub+0x27e>
 8000ef6:	4652      	mov	r2, sl
 8000ef8:	4462      	add	r2, ip
 8000efa:	0853      	lsrs	r3, r2, #1
 8000efc:	e7b6      	b.n	8000e6c <__aeabi_fsub+0x268>
 8000efe:	4663      	mov	r3, ip
 8000f00:	000d      	movs	r5, r1
 8000f02:	1ad6      	subs	r6, r2, r3
 8000f04:	e6c0      	b.n	8000c88 <__aeabi_fsub+0x84>
 8000f06:	4662      	mov	r2, ip
 8000f08:	2a00      	cmp	r2, #0
 8000f0a:	d116      	bne.n	8000f3a <__aeabi_fsub+0x336>
 8000f0c:	4653      	mov	r3, sl
 8000f0e:	2b00      	cmp	r3, #0
 8000f10:	d000      	beq.n	8000f14 <__aeabi_fsub+0x310>
 8000f12:	e72b      	b.n	8000d6c <__aeabi_fsub+0x168>
 8000f14:	2780      	movs	r7, #128	; 0x80
 8000f16:	2500      	movs	r5, #0
 8000f18:	20ff      	movs	r0, #255	; 0xff
 8000f1a:	03ff      	lsls	r7, r7, #15
 8000f1c:	e6d9      	b.n	8000cd2 <__aeabi_fsub+0xce>
 8000f1e:	000d      	movs	r5, r1
 8000f20:	4643      	mov	r3, r8
 8000f22:	0034      	movs	r4, r6
 8000f24:	e7a6      	b.n	8000e74 <__aeabi_fsub+0x270>
 8000f26:	4653      	mov	r3, sl
 8000f28:	4463      	add	r3, ip
 8000f2a:	e6f7      	b.n	8000d1c <__aeabi_fsub+0x118>
 8000f2c:	4663      	mov	r3, ip
 8000f2e:	4652      	mov	r2, sl
 8000f30:	1a9b      	subs	r3, r3, r2
 8000f32:	e6a4      	b.n	8000c7e <__aeabi_fsub+0x7a>
 8000f34:	4662      	mov	r2, ip
 8000f36:	2a00      	cmp	r2, #0
 8000f38:	d0d9      	beq.n	8000eee <__aeabi_fsub+0x2ea>
 8000f3a:	4652      	mov	r2, sl
 8000f3c:	2a00      	cmp	r2, #0
 8000f3e:	d100      	bne.n	8000f42 <__aeabi_fsub+0x33e>
 8000f40:	e716      	b.n	8000d70 <__aeabi_fsub+0x16c>
 8000f42:	2280      	movs	r2, #128	; 0x80
 8000f44:	03d2      	lsls	r2, r2, #15
 8000f46:	4213      	tst	r3, r2
 8000f48:	d100      	bne.n	8000f4c <__aeabi_fsub+0x348>
 8000f4a:	e711      	b.n	8000d70 <__aeabi_fsub+0x16c>
 8000f4c:	4640      	mov	r0, r8
 8000f4e:	4210      	tst	r0, r2
 8000f50:	d000      	beq.n	8000f54 <__aeabi_fsub+0x350>
 8000f52:	e70d      	b.n	8000d70 <__aeabi_fsub+0x16c>
 8000f54:	e70a      	b.n	8000d6c <__aeabi_fsub+0x168>
 8000f56:	4652      	mov	r2, sl
 8000f58:	000d      	movs	r5, r1
 8000f5a:	0034      	movs	r4, r6
 8000f5c:	1ad3      	subs	r3, r2, r3
 8000f5e:	e68e      	b.n	8000c7e <__aeabi_fsub+0x7a>
 8000f60:	4653      	mov	r3, sl
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	d008      	beq.n	8000f78 <__aeabi_fsub+0x374>
 8000f66:	000d      	movs	r5, r1
 8000f68:	4647      	mov	r7, r8
 8000f6a:	e6b2      	b.n	8000cd2 <__aeabi_fsub+0xce>
 8000f6c:	4643      	mov	r3, r8
 8000f6e:	0034      	movs	r4, r6
 8000f70:	e780      	b.n	8000e74 <__aeabi_fsub+0x270>
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	d000      	beq.n	8000f78 <__aeabi_fsub+0x374>
 8000f76:	e779      	b.n	8000e6c <__aeabi_fsub+0x268>
 8000f78:	2500      	movs	r5, #0
 8000f7a:	2700      	movs	r7, #0
 8000f7c:	e6a9      	b.n	8000cd2 <__aeabi_fsub+0xce>
 8000f7e:	4647      	mov	r7, r8
 8000f80:	e6a7      	b.n	8000cd2 <__aeabi_fsub+0xce>
 8000f82:	4653      	mov	r3, sl
 8000f84:	0034      	movs	r4, r6
 8000f86:	4463      	add	r3, ip
 8000f88:	e6c8      	b.n	8000d1c <__aeabi_fsub+0x118>
 8000f8a:	46c0      	nop			; (mov r8, r8)
 8000f8c:	7dffffff 	.word	0x7dffffff
 8000f90:	fbffffff 	.word	0xfbffffff

08000f94 <__aeabi_f2iz>:
 8000f94:	0241      	lsls	r1, r0, #9
 8000f96:	0042      	lsls	r2, r0, #1
 8000f98:	0fc3      	lsrs	r3, r0, #31
 8000f9a:	0a49      	lsrs	r1, r1, #9
 8000f9c:	2000      	movs	r0, #0
 8000f9e:	0e12      	lsrs	r2, r2, #24
 8000fa0:	2a7e      	cmp	r2, #126	; 0x7e
 8000fa2:	d903      	bls.n	8000fac <__aeabi_f2iz+0x18>
 8000fa4:	2a9d      	cmp	r2, #157	; 0x9d
 8000fa6:	d902      	bls.n	8000fae <__aeabi_f2iz+0x1a>
 8000fa8:	4a09      	ldr	r2, [pc, #36]	; (8000fd0 <__aeabi_f2iz+0x3c>)
 8000faa:	1898      	adds	r0, r3, r2
 8000fac:	4770      	bx	lr
 8000fae:	2080      	movs	r0, #128	; 0x80
 8000fb0:	0400      	lsls	r0, r0, #16
 8000fb2:	4301      	orrs	r1, r0
 8000fb4:	2a95      	cmp	r2, #149	; 0x95
 8000fb6:	dc07      	bgt.n	8000fc8 <__aeabi_f2iz+0x34>
 8000fb8:	2096      	movs	r0, #150	; 0x96
 8000fba:	1a82      	subs	r2, r0, r2
 8000fbc:	40d1      	lsrs	r1, r2
 8000fbe:	4248      	negs	r0, r1
 8000fc0:	2b00      	cmp	r3, #0
 8000fc2:	d1f3      	bne.n	8000fac <__aeabi_f2iz+0x18>
 8000fc4:	0008      	movs	r0, r1
 8000fc6:	e7f1      	b.n	8000fac <__aeabi_f2iz+0x18>
 8000fc8:	3a96      	subs	r2, #150	; 0x96
 8000fca:	4091      	lsls	r1, r2
 8000fcc:	e7f7      	b.n	8000fbe <__aeabi_f2iz+0x2a>
 8000fce:	46c0      	nop			; (mov r8, r8)
 8000fd0:	7fffffff 	.word	0x7fffffff

08000fd4 <__aeabi_dadd>:
 8000fd4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000fd6:	464f      	mov	r7, r9
 8000fd8:	46d6      	mov	lr, sl
 8000fda:	4646      	mov	r6, r8
 8000fdc:	000d      	movs	r5, r1
 8000fde:	0001      	movs	r1, r0
 8000fe0:	0018      	movs	r0, r3
 8000fe2:	b5c0      	push	{r6, r7, lr}
 8000fe4:	0017      	movs	r7, r2
 8000fe6:	032b      	lsls	r3, r5, #12
 8000fe8:	0a5a      	lsrs	r2, r3, #9
 8000fea:	0f4b      	lsrs	r3, r1, #29
 8000fec:	4313      	orrs	r3, r2
 8000fee:	00ca      	lsls	r2, r1, #3
 8000ff0:	4691      	mov	r9, r2
 8000ff2:	0302      	lsls	r2, r0, #12
 8000ff4:	006e      	lsls	r6, r5, #1
 8000ff6:	0041      	lsls	r1, r0, #1
 8000ff8:	0a52      	lsrs	r2, r2, #9
 8000ffa:	0fec      	lsrs	r4, r5, #31
 8000ffc:	0f7d      	lsrs	r5, r7, #29
 8000ffe:	4315      	orrs	r5, r2
 8001000:	0d76      	lsrs	r6, r6, #21
 8001002:	0d49      	lsrs	r1, r1, #21
 8001004:	0fc0      	lsrs	r0, r0, #31
 8001006:	4682      	mov	sl, r0
 8001008:	46ac      	mov	ip, r5
 800100a:	00ff      	lsls	r7, r7, #3
 800100c:	1a72      	subs	r2, r6, r1
 800100e:	4284      	cmp	r4, r0
 8001010:	d100      	bne.n	8001014 <__aeabi_dadd+0x40>
 8001012:	e098      	b.n	8001146 <__aeabi_dadd+0x172>
 8001014:	2a00      	cmp	r2, #0
 8001016:	dc00      	bgt.n	800101a <__aeabi_dadd+0x46>
 8001018:	e081      	b.n	800111e <__aeabi_dadd+0x14a>
 800101a:	2900      	cmp	r1, #0
 800101c:	d100      	bne.n	8001020 <__aeabi_dadd+0x4c>
 800101e:	e0b6      	b.n	800118e <__aeabi_dadd+0x1ba>
 8001020:	49c9      	ldr	r1, [pc, #804]	; (8001348 <__aeabi_dadd+0x374>)
 8001022:	428e      	cmp	r6, r1
 8001024:	d100      	bne.n	8001028 <__aeabi_dadd+0x54>
 8001026:	e172      	b.n	800130e <__aeabi_dadd+0x33a>
 8001028:	2180      	movs	r1, #128	; 0x80
 800102a:	0028      	movs	r0, r5
 800102c:	0409      	lsls	r1, r1, #16
 800102e:	4308      	orrs	r0, r1
 8001030:	4684      	mov	ip, r0
 8001032:	2a38      	cmp	r2, #56	; 0x38
 8001034:	dd00      	ble.n	8001038 <__aeabi_dadd+0x64>
 8001036:	e15e      	b.n	80012f6 <__aeabi_dadd+0x322>
 8001038:	2a1f      	cmp	r2, #31
 800103a:	dd00      	ble.n	800103e <__aeabi_dadd+0x6a>
 800103c:	e1ee      	b.n	800141c <__aeabi_dadd+0x448>
 800103e:	2020      	movs	r0, #32
 8001040:	0039      	movs	r1, r7
 8001042:	4665      	mov	r5, ip
 8001044:	1a80      	subs	r0, r0, r2
 8001046:	4087      	lsls	r7, r0
 8001048:	40d1      	lsrs	r1, r2
 800104a:	4085      	lsls	r5, r0
 800104c:	430d      	orrs	r5, r1
 800104e:	0039      	movs	r1, r7
 8001050:	1e4f      	subs	r7, r1, #1
 8001052:	41b9      	sbcs	r1, r7
 8001054:	4667      	mov	r7, ip
 8001056:	40d7      	lsrs	r7, r2
 8001058:	4329      	orrs	r1, r5
 800105a:	1bdb      	subs	r3, r3, r7
 800105c:	464a      	mov	r2, r9
 800105e:	1a55      	subs	r5, r2, r1
 8001060:	45a9      	cmp	r9, r5
 8001062:	4189      	sbcs	r1, r1
 8001064:	4249      	negs	r1, r1
 8001066:	1a5b      	subs	r3, r3, r1
 8001068:	4698      	mov	r8, r3
 800106a:	4643      	mov	r3, r8
 800106c:	021b      	lsls	r3, r3, #8
 800106e:	d400      	bmi.n	8001072 <__aeabi_dadd+0x9e>
 8001070:	e0cc      	b.n	800120c <__aeabi_dadd+0x238>
 8001072:	4643      	mov	r3, r8
 8001074:	025b      	lsls	r3, r3, #9
 8001076:	0a5b      	lsrs	r3, r3, #9
 8001078:	4698      	mov	r8, r3
 800107a:	4643      	mov	r3, r8
 800107c:	2b00      	cmp	r3, #0
 800107e:	d100      	bne.n	8001082 <__aeabi_dadd+0xae>
 8001080:	e12c      	b.n	80012dc <__aeabi_dadd+0x308>
 8001082:	4640      	mov	r0, r8
 8001084:	f001 fe70 	bl	8002d68 <__clzsi2>
 8001088:	0001      	movs	r1, r0
 800108a:	3908      	subs	r1, #8
 800108c:	2220      	movs	r2, #32
 800108e:	0028      	movs	r0, r5
 8001090:	4643      	mov	r3, r8
 8001092:	1a52      	subs	r2, r2, r1
 8001094:	408b      	lsls	r3, r1
 8001096:	40d0      	lsrs	r0, r2
 8001098:	408d      	lsls	r5, r1
 800109a:	4303      	orrs	r3, r0
 800109c:	428e      	cmp	r6, r1
 800109e:	dd00      	ble.n	80010a2 <__aeabi_dadd+0xce>
 80010a0:	e117      	b.n	80012d2 <__aeabi_dadd+0x2fe>
 80010a2:	1b8e      	subs	r6, r1, r6
 80010a4:	1c72      	adds	r2, r6, #1
 80010a6:	2a1f      	cmp	r2, #31
 80010a8:	dd00      	ble.n	80010ac <__aeabi_dadd+0xd8>
 80010aa:	e1a7      	b.n	80013fc <__aeabi_dadd+0x428>
 80010ac:	2120      	movs	r1, #32
 80010ae:	0018      	movs	r0, r3
 80010b0:	002e      	movs	r6, r5
 80010b2:	1a89      	subs	r1, r1, r2
 80010b4:	408d      	lsls	r5, r1
 80010b6:	4088      	lsls	r0, r1
 80010b8:	40d6      	lsrs	r6, r2
 80010ba:	40d3      	lsrs	r3, r2
 80010bc:	1e69      	subs	r1, r5, #1
 80010be:	418d      	sbcs	r5, r1
 80010c0:	4330      	orrs	r0, r6
 80010c2:	4698      	mov	r8, r3
 80010c4:	2600      	movs	r6, #0
 80010c6:	4305      	orrs	r5, r0
 80010c8:	076b      	lsls	r3, r5, #29
 80010ca:	d009      	beq.n	80010e0 <__aeabi_dadd+0x10c>
 80010cc:	230f      	movs	r3, #15
 80010ce:	402b      	ands	r3, r5
 80010d0:	2b04      	cmp	r3, #4
 80010d2:	d005      	beq.n	80010e0 <__aeabi_dadd+0x10c>
 80010d4:	1d2b      	adds	r3, r5, #4
 80010d6:	42ab      	cmp	r3, r5
 80010d8:	41ad      	sbcs	r5, r5
 80010da:	426d      	negs	r5, r5
 80010dc:	44a8      	add	r8, r5
 80010de:	001d      	movs	r5, r3
 80010e0:	4643      	mov	r3, r8
 80010e2:	021b      	lsls	r3, r3, #8
 80010e4:	d400      	bmi.n	80010e8 <__aeabi_dadd+0x114>
 80010e6:	e094      	b.n	8001212 <__aeabi_dadd+0x23e>
 80010e8:	4b97      	ldr	r3, [pc, #604]	; (8001348 <__aeabi_dadd+0x374>)
 80010ea:	1c72      	adds	r2, r6, #1
 80010ec:	429a      	cmp	r2, r3
 80010ee:	d100      	bne.n	80010f2 <__aeabi_dadd+0x11e>
 80010f0:	e09d      	b.n	800122e <__aeabi_dadd+0x25a>
 80010f2:	4641      	mov	r1, r8
 80010f4:	4b95      	ldr	r3, [pc, #596]	; (800134c <__aeabi_dadd+0x378>)
 80010f6:	08ed      	lsrs	r5, r5, #3
 80010f8:	4019      	ands	r1, r3
 80010fa:	000b      	movs	r3, r1
 80010fc:	0552      	lsls	r2, r2, #21
 80010fe:	0749      	lsls	r1, r1, #29
 8001100:	025b      	lsls	r3, r3, #9
 8001102:	4329      	orrs	r1, r5
 8001104:	0b1b      	lsrs	r3, r3, #12
 8001106:	0d52      	lsrs	r2, r2, #21
 8001108:	0512      	lsls	r2, r2, #20
 800110a:	4313      	orrs	r3, r2
 800110c:	07e4      	lsls	r4, r4, #31
 800110e:	4323      	orrs	r3, r4
 8001110:	0008      	movs	r0, r1
 8001112:	0019      	movs	r1, r3
 8001114:	bce0      	pop	{r5, r6, r7}
 8001116:	46ba      	mov	sl, r7
 8001118:	46b1      	mov	r9, r6
 800111a:	46a8      	mov	r8, r5
 800111c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800111e:	2a00      	cmp	r2, #0
 8001120:	d043      	beq.n	80011aa <__aeabi_dadd+0x1d6>
 8001122:	1b8a      	subs	r2, r1, r6
 8001124:	2e00      	cmp	r6, #0
 8001126:	d000      	beq.n	800112a <__aeabi_dadd+0x156>
 8001128:	e12a      	b.n	8001380 <__aeabi_dadd+0x3ac>
 800112a:	464c      	mov	r4, r9
 800112c:	431c      	orrs	r4, r3
 800112e:	d100      	bne.n	8001132 <__aeabi_dadd+0x15e>
 8001130:	e1d1      	b.n	80014d6 <__aeabi_dadd+0x502>
 8001132:	1e54      	subs	r4, r2, #1
 8001134:	2a01      	cmp	r2, #1
 8001136:	d100      	bne.n	800113a <__aeabi_dadd+0x166>
 8001138:	e21f      	b.n	800157a <__aeabi_dadd+0x5a6>
 800113a:	4d83      	ldr	r5, [pc, #524]	; (8001348 <__aeabi_dadd+0x374>)
 800113c:	42aa      	cmp	r2, r5
 800113e:	d100      	bne.n	8001142 <__aeabi_dadd+0x16e>
 8001140:	e272      	b.n	8001628 <__aeabi_dadd+0x654>
 8001142:	0022      	movs	r2, r4
 8001144:	e123      	b.n	800138e <__aeabi_dadd+0x3ba>
 8001146:	2a00      	cmp	r2, #0
 8001148:	dc00      	bgt.n	800114c <__aeabi_dadd+0x178>
 800114a:	e098      	b.n	800127e <__aeabi_dadd+0x2aa>
 800114c:	2900      	cmp	r1, #0
 800114e:	d042      	beq.n	80011d6 <__aeabi_dadd+0x202>
 8001150:	497d      	ldr	r1, [pc, #500]	; (8001348 <__aeabi_dadd+0x374>)
 8001152:	428e      	cmp	r6, r1
 8001154:	d100      	bne.n	8001158 <__aeabi_dadd+0x184>
 8001156:	e0da      	b.n	800130e <__aeabi_dadd+0x33a>
 8001158:	2180      	movs	r1, #128	; 0x80
 800115a:	0028      	movs	r0, r5
 800115c:	0409      	lsls	r1, r1, #16
 800115e:	4308      	orrs	r0, r1
 8001160:	4684      	mov	ip, r0
 8001162:	2a38      	cmp	r2, #56	; 0x38
 8001164:	dd00      	ble.n	8001168 <__aeabi_dadd+0x194>
 8001166:	e129      	b.n	80013bc <__aeabi_dadd+0x3e8>
 8001168:	2a1f      	cmp	r2, #31
 800116a:	dc00      	bgt.n	800116e <__aeabi_dadd+0x19a>
 800116c:	e187      	b.n	800147e <__aeabi_dadd+0x4aa>
 800116e:	0011      	movs	r1, r2
 8001170:	4665      	mov	r5, ip
 8001172:	3920      	subs	r1, #32
 8001174:	40cd      	lsrs	r5, r1
 8001176:	2a20      	cmp	r2, #32
 8001178:	d004      	beq.n	8001184 <__aeabi_dadd+0x1b0>
 800117a:	2040      	movs	r0, #64	; 0x40
 800117c:	4661      	mov	r1, ip
 800117e:	1a82      	subs	r2, r0, r2
 8001180:	4091      	lsls	r1, r2
 8001182:	430f      	orrs	r7, r1
 8001184:	0039      	movs	r1, r7
 8001186:	1e4f      	subs	r7, r1, #1
 8001188:	41b9      	sbcs	r1, r7
 800118a:	430d      	orrs	r5, r1
 800118c:	e11b      	b.n	80013c6 <__aeabi_dadd+0x3f2>
 800118e:	0029      	movs	r1, r5
 8001190:	4339      	orrs	r1, r7
 8001192:	d100      	bne.n	8001196 <__aeabi_dadd+0x1c2>
 8001194:	e0b5      	b.n	8001302 <__aeabi_dadd+0x32e>
 8001196:	1e51      	subs	r1, r2, #1
 8001198:	2a01      	cmp	r2, #1
 800119a:	d100      	bne.n	800119e <__aeabi_dadd+0x1ca>
 800119c:	e1ab      	b.n	80014f6 <__aeabi_dadd+0x522>
 800119e:	486a      	ldr	r0, [pc, #424]	; (8001348 <__aeabi_dadd+0x374>)
 80011a0:	4282      	cmp	r2, r0
 80011a2:	d100      	bne.n	80011a6 <__aeabi_dadd+0x1d2>
 80011a4:	e1b2      	b.n	800150c <__aeabi_dadd+0x538>
 80011a6:	000a      	movs	r2, r1
 80011a8:	e743      	b.n	8001032 <__aeabi_dadd+0x5e>
 80011aa:	4969      	ldr	r1, [pc, #420]	; (8001350 <__aeabi_dadd+0x37c>)
 80011ac:	1c75      	adds	r5, r6, #1
 80011ae:	420d      	tst	r5, r1
 80011b0:	d000      	beq.n	80011b4 <__aeabi_dadd+0x1e0>
 80011b2:	e0cf      	b.n	8001354 <__aeabi_dadd+0x380>
 80011b4:	2e00      	cmp	r6, #0
 80011b6:	d000      	beq.n	80011ba <__aeabi_dadd+0x1e6>
 80011b8:	e193      	b.n	80014e2 <__aeabi_dadd+0x50e>
 80011ba:	4649      	mov	r1, r9
 80011bc:	4319      	orrs	r1, r3
 80011be:	d100      	bne.n	80011c2 <__aeabi_dadd+0x1ee>
 80011c0:	e1d1      	b.n	8001566 <__aeabi_dadd+0x592>
 80011c2:	4661      	mov	r1, ip
 80011c4:	4339      	orrs	r1, r7
 80011c6:	d000      	beq.n	80011ca <__aeabi_dadd+0x1f6>
 80011c8:	e1e3      	b.n	8001592 <__aeabi_dadd+0x5be>
 80011ca:	4649      	mov	r1, r9
 80011cc:	0758      	lsls	r0, r3, #29
 80011ce:	08c9      	lsrs	r1, r1, #3
 80011d0:	4301      	orrs	r1, r0
 80011d2:	08db      	lsrs	r3, r3, #3
 80011d4:	e026      	b.n	8001224 <__aeabi_dadd+0x250>
 80011d6:	0029      	movs	r1, r5
 80011d8:	4339      	orrs	r1, r7
 80011da:	d100      	bne.n	80011de <__aeabi_dadd+0x20a>
 80011dc:	e091      	b.n	8001302 <__aeabi_dadd+0x32e>
 80011de:	1e51      	subs	r1, r2, #1
 80011e0:	2a01      	cmp	r2, #1
 80011e2:	d005      	beq.n	80011f0 <__aeabi_dadd+0x21c>
 80011e4:	4858      	ldr	r0, [pc, #352]	; (8001348 <__aeabi_dadd+0x374>)
 80011e6:	4282      	cmp	r2, r0
 80011e8:	d100      	bne.n	80011ec <__aeabi_dadd+0x218>
 80011ea:	e18f      	b.n	800150c <__aeabi_dadd+0x538>
 80011ec:	000a      	movs	r2, r1
 80011ee:	e7b8      	b.n	8001162 <__aeabi_dadd+0x18e>
 80011f0:	003d      	movs	r5, r7
 80011f2:	444d      	add	r5, r9
 80011f4:	454d      	cmp	r5, r9
 80011f6:	4189      	sbcs	r1, r1
 80011f8:	4463      	add	r3, ip
 80011fa:	4698      	mov	r8, r3
 80011fc:	4249      	negs	r1, r1
 80011fe:	4488      	add	r8, r1
 8001200:	4643      	mov	r3, r8
 8001202:	2602      	movs	r6, #2
 8001204:	021b      	lsls	r3, r3, #8
 8001206:	d500      	bpl.n	800120a <__aeabi_dadd+0x236>
 8001208:	e0eb      	b.n	80013e2 <__aeabi_dadd+0x40e>
 800120a:	3e01      	subs	r6, #1
 800120c:	076b      	lsls	r3, r5, #29
 800120e:	d000      	beq.n	8001212 <__aeabi_dadd+0x23e>
 8001210:	e75c      	b.n	80010cc <__aeabi_dadd+0xf8>
 8001212:	4643      	mov	r3, r8
 8001214:	08e9      	lsrs	r1, r5, #3
 8001216:	075a      	lsls	r2, r3, #29
 8001218:	4311      	orrs	r1, r2
 800121a:	0032      	movs	r2, r6
 800121c:	08db      	lsrs	r3, r3, #3
 800121e:	484a      	ldr	r0, [pc, #296]	; (8001348 <__aeabi_dadd+0x374>)
 8001220:	4282      	cmp	r2, r0
 8001222:	d021      	beq.n	8001268 <__aeabi_dadd+0x294>
 8001224:	031b      	lsls	r3, r3, #12
 8001226:	0552      	lsls	r2, r2, #21
 8001228:	0b1b      	lsrs	r3, r3, #12
 800122a:	0d52      	lsrs	r2, r2, #21
 800122c:	e76c      	b.n	8001108 <__aeabi_dadd+0x134>
 800122e:	2300      	movs	r3, #0
 8001230:	2100      	movs	r1, #0
 8001232:	e769      	b.n	8001108 <__aeabi_dadd+0x134>
 8001234:	002a      	movs	r2, r5
 8001236:	433a      	orrs	r2, r7
 8001238:	d069      	beq.n	800130e <__aeabi_dadd+0x33a>
 800123a:	464a      	mov	r2, r9
 800123c:	0758      	lsls	r0, r3, #29
 800123e:	08d1      	lsrs	r1, r2, #3
 8001240:	08da      	lsrs	r2, r3, #3
 8001242:	2380      	movs	r3, #128	; 0x80
 8001244:	031b      	lsls	r3, r3, #12
 8001246:	4308      	orrs	r0, r1
 8001248:	421a      	tst	r2, r3
 800124a:	d007      	beq.n	800125c <__aeabi_dadd+0x288>
 800124c:	0029      	movs	r1, r5
 800124e:	08ed      	lsrs	r5, r5, #3
 8001250:	421d      	tst	r5, r3
 8001252:	d103      	bne.n	800125c <__aeabi_dadd+0x288>
 8001254:	002a      	movs	r2, r5
 8001256:	08ff      	lsrs	r7, r7, #3
 8001258:	0748      	lsls	r0, r1, #29
 800125a:	4338      	orrs	r0, r7
 800125c:	0f43      	lsrs	r3, r0, #29
 800125e:	00c1      	lsls	r1, r0, #3
 8001260:	075b      	lsls	r3, r3, #29
 8001262:	08c9      	lsrs	r1, r1, #3
 8001264:	4319      	orrs	r1, r3
 8001266:	0013      	movs	r3, r2
 8001268:	000a      	movs	r2, r1
 800126a:	431a      	orrs	r2, r3
 800126c:	d100      	bne.n	8001270 <__aeabi_dadd+0x29c>
 800126e:	e213      	b.n	8001698 <__aeabi_dadd+0x6c4>
 8001270:	2280      	movs	r2, #128	; 0x80
 8001272:	0312      	lsls	r2, r2, #12
 8001274:	4313      	orrs	r3, r2
 8001276:	031b      	lsls	r3, r3, #12
 8001278:	4a33      	ldr	r2, [pc, #204]	; (8001348 <__aeabi_dadd+0x374>)
 800127a:	0b1b      	lsrs	r3, r3, #12
 800127c:	e744      	b.n	8001108 <__aeabi_dadd+0x134>
 800127e:	2a00      	cmp	r2, #0
 8001280:	d04b      	beq.n	800131a <__aeabi_dadd+0x346>
 8001282:	1b8a      	subs	r2, r1, r6
 8001284:	2e00      	cmp	r6, #0
 8001286:	d100      	bne.n	800128a <__aeabi_dadd+0x2b6>
 8001288:	e0e7      	b.n	800145a <__aeabi_dadd+0x486>
 800128a:	482f      	ldr	r0, [pc, #188]	; (8001348 <__aeabi_dadd+0x374>)
 800128c:	4281      	cmp	r1, r0
 800128e:	d100      	bne.n	8001292 <__aeabi_dadd+0x2be>
 8001290:	e195      	b.n	80015be <__aeabi_dadd+0x5ea>
 8001292:	2080      	movs	r0, #128	; 0x80
 8001294:	0400      	lsls	r0, r0, #16
 8001296:	4303      	orrs	r3, r0
 8001298:	2a38      	cmp	r2, #56	; 0x38
 800129a:	dd00      	ble.n	800129e <__aeabi_dadd+0x2ca>
 800129c:	e143      	b.n	8001526 <__aeabi_dadd+0x552>
 800129e:	2a1f      	cmp	r2, #31
 80012a0:	dd00      	ble.n	80012a4 <__aeabi_dadd+0x2d0>
 80012a2:	e1db      	b.n	800165c <__aeabi_dadd+0x688>
 80012a4:	2020      	movs	r0, #32
 80012a6:	001d      	movs	r5, r3
 80012a8:	464e      	mov	r6, r9
 80012aa:	1a80      	subs	r0, r0, r2
 80012ac:	4085      	lsls	r5, r0
 80012ae:	40d6      	lsrs	r6, r2
 80012b0:	4335      	orrs	r5, r6
 80012b2:	464e      	mov	r6, r9
 80012b4:	4086      	lsls	r6, r0
 80012b6:	0030      	movs	r0, r6
 80012b8:	40d3      	lsrs	r3, r2
 80012ba:	1e46      	subs	r6, r0, #1
 80012bc:	41b0      	sbcs	r0, r6
 80012be:	449c      	add	ip, r3
 80012c0:	4305      	orrs	r5, r0
 80012c2:	19ed      	adds	r5, r5, r7
 80012c4:	42bd      	cmp	r5, r7
 80012c6:	419b      	sbcs	r3, r3
 80012c8:	425b      	negs	r3, r3
 80012ca:	4463      	add	r3, ip
 80012cc:	4698      	mov	r8, r3
 80012ce:	000e      	movs	r6, r1
 80012d0:	e07f      	b.n	80013d2 <__aeabi_dadd+0x3fe>
 80012d2:	4a1e      	ldr	r2, [pc, #120]	; (800134c <__aeabi_dadd+0x378>)
 80012d4:	1a76      	subs	r6, r6, r1
 80012d6:	4013      	ands	r3, r2
 80012d8:	4698      	mov	r8, r3
 80012da:	e6f5      	b.n	80010c8 <__aeabi_dadd+0xf4>
 80012dc:	0028      	movs	r0, r5
 80012de:	f001 fd43 	bl	8002d68 <__clzsi2>
 80012e2:	0001      	movs	r1, r0
 80012e4:	3118      	adds	r1, #24
 80012e6:	291f      	cmp	r1, #31
 80012e8:	dc00      	bgt.n	80012ec <__aeabi_dadd+0x318>
 80012ea:	e6cf      	b.n	800108c <__aeabi_dadd+0xb8>
 80012ec:	002b      	movs	r3, r5
 80012ee:	3808      	subs	r0, #8
 80012f0:	4083      	lsls	r3, r0
 80012f2:	2500      	movs	r5, #0
 80012f4:	e6d2      	b.n	800109c <__aeabi_dadd+0xc8>
 80012f6:	4662      	mov	r2, ip
 80012f8:	433a      	orrs	r2, r7
 80012fa:	0011      	movs	r1, r2
 80012fc:	1e4f      	subs	r7, r1, #1
 80012fe:	41b9      	sbcs	r1, r7
 8001300:	e6ac      	b.n	800105c <__aeabi_dadd+0x88>
 8001302:	4649      	mov	r1, r9
 8001304:	0758      	lsls	r0, r3, #29
 8001306:	08c9      	lsrs	r1, r1, #3
 8001308:	4301      	orrs	r1, r0
 800130a:	08db      	lsrs	r3, r3, #3
 800130c:	e787      	b.n	800121e <__aeabi_dadd+0x24a>
 800130e:	4649      	mov	r1, r9
 8001310:	075a      	lsls	r2, r3, #29
 8001312:	08c9      	lsrs	r1, r1, #3
 8001314:	4311      	orrs	r1, r2
 8001316:	08db      	lsrs	r3, r3, #3
 8001318:	e7a6      	b.n	8001268 <__aeabi_dadd+0x294>
 800131a:	490d      	ldr	r1, [pc, #52]	; (8001350 <__aeabi_dadd+0x37c>)
 800131c:	1c70      	adds	r0, r6, #1
 800131e:	4208      	tst	r0, r1
 8001320:	d000      	beq.n	8001324 <__aeabi_dadd+0x350>
 8001322:	e0bb      	b.n	800149c <__aeabi_dadd+0x4c8>
 8001324:	2e00      	cmp	r6, #0
 8001326:	d000      	beq.n	800132a <__aeabi_dadd+0x356>
 8001328:	e114      	b.n	8001554 <__aeabi_dadd+0x580>
 800132a:	4649      	mov	r1, r9
 800132c:	4319      	orrs	r1, r3
 800132e:	d100      	bne.n	8001332 <__aeabi_dadd+0x35e>
 8001330:	e175      	b.n	800161e <__aeabi_dadd+0x64a>
 8001332:	0029      	movs	r1, r5
 8001334:	4339      	orrs	r1, r7
 8001336:	d000      	beq.n	800133a <__aeabi_dadd+0x366>
 8001338:	e17e      	b.n	8001638 <__aeabi_dadd+0x664>
 800133a:	4649      	mov	r1, r9
 800133c:	0758      	lsls	r0, r3, #29
 800133e:	08c9      	lsrs	r1, r1, #3
 8001340:	4301      	orrs	r1, r0
 8001342:	08db      	lsrs	r3, r3, #3
 8001344:	e76e      	b.n	8001224 <__aeabi_dadd+0x250>
 8001346:	46c0      	nop			; (mov r8, r8)
 8001348:	000007ff 	.word	0x000007ff
 800134c:	ff7fffff 	.word	0xff7fffff
 8001350:	000007fe 	.word	0x000007fe
 8001354:	4649      	mov	r1, r9
 8001356:	1bcd      	subs	r5, r1, r7
 8001358:	4661      	mov	r1, ip
 800135a:	1a58      	subs	r0, r3, r1
 800135c:	45a9      	cmp	r9, r5
 800135e:	4189      	sbcs	r1, r1
 8001360:	4249      	negs	r1, r1
 8001362:	4688      	mov	r8, r1
 8001364:	0001      	movs	r1, r0
 8001366:	4640      	mov	r0, r8
 8001368:	1a09      	subs	r1, r1, r0
 800136a:	4688      	mov	r8, r1
 800136c:	0209      	lsls	r1, r1, #8
 800136e:	d500      	bpl.n	8001372 <__aeabi_dadd+0x39e>
 8001370:	e0a6      	b.n	80014c0 <__aeabi_dadd+0x4ec>
 8001372:	4641      	mov	r1, r8
 8001374:	4329      	orrs	r1, r5
 8001376:	d000      	beq.n	800137a <__aeabi_dadd+0x3a6>
 8001378:	e67f      	b.n	800107a <__aeabi_dadd+0xa6>
 800137a:	2300      	movs	r3, #0
 800137c:	2400      	movs	r4, #0
 800137e:	e751      	b.n	8001224 <__aeabi_dadd+0x250>
 8001380:	4cc7      	ldr	r4, [pc, #796]	; (80016a0 <__aeabi_dadd+0x6cc>)
 8001382:	42a1      	cmp	r1, r4
 8001384:	d100      	bne.n	8001388 <__aeabi_dadd+0x3b4>
 8001386:	e0c7      	b.n	8001518 <__aeabi_dadd+0x544>
 8001388:	2480      	movs	r4, #128	; 0x80
 800138a:	0424      	lsls	r4, r4, #16
 800138c:	4323      	orrs	r3, r4
 800138e:	2a38      	cmp	r2, #56	; 0x38
 8001390:	dc54      	bgt.n	800143c <__aeabi_dadd+0x468>
 8001392:	2a1f      	cmp	r2, #31
 8001394:	dd00      	ble.n	8001398 <__aeabi_dadd+0x3c4>
 8001396:	e0cc      	b.n	8001532 <__aeabi_dadd+0x55e>
 8001398:	2420      	movs	r4, #32
 800139a:	4648      	mov	r0, r9
 800139c:	1aa4      	subs	r4, r4, r2
 800139e:	001d      	movs	r5, r3
 80013a0:	464e      	mov	r6, r9
 80013a2:	40a0      	lsls	r0, r4
 80013a4:	40d6      	lsrs	r6, r2
 80013a6:	40a5      	lsls	r5, r4
 80013a8:	0004      	movs	r4, r0
 80013aa:	40d3      	lsrs	r3, r2
 80013ac:	4662      	mov	r2, ip
 80013ae:	4335      	orrs	r5, r6
 80013b0:	1e66      	subs	r6, r4, #1
 80013b2:	41b4      	sbcs	r4, r6
 80013b4:	1ad3      	subs	r3, r2, r3
 80013b6:	469c      	mov	ip, r3
 80013b8:	4325      	orrs	r5, r4
 80013ba:	e044      	b.n	8001446 <__aeabi_dadd+0x472>
 80013bc:	4662      	mov	r2, ip
 80013be:	433a      	orrs	r2, r7
 80013c0:	0015      	movs	r5, r2
 80013c2:	1e6f      	subs	r7, r5, #1
 80013c4:	41bd      	sbcs	r5, r7
 80013c6:	444d      	add	r5, r9
 80013c8:	454d      	cmp	r5, r9
 80013ca:	4189      	sbcs	r1, r1
 80013cc:	4249      	negs	r1, r1
 80013ce:	4688      	mov	r8, r1
 80013d0:	4498      	add	r8, r3
 80013d2:	4643      	mov	r3, r8
 80013d4:	021b      	lsls	r3, r3, #8
 80013d6:	d400      	bmi.n	80013da <__aeabi_dadd+0x406>
 80013d8:	e718      	b.n	800120c <__aeabi_dadd+0x238>
 80013da:	4bb1      	ldr	r3, [pc, #708]	; (80016a0 <__aeabi_dadd+0x6cc>)
 80013dc:	3601      	adds	r6, #1
 80013de:	429e      	cmp	r6, r3
 80013e0:	d049      	beq.n	8001476 <__aeabi_dadd+0x4a2>
 80013e2:	4642      	mov	r2, r8
 80013e4:	4baf      	ldr	r3, [pc, #700]	; (80016a4 <__aeabi_dadd+0x6d0>)
 80013e6:	2101      	movs	r1, #1
 80013e8:	401a      	ands	r2, r3
 80013ea:	0013      	movs	r3, r2
 80013ec:	086a      	lsrs	r2, r5, #1
 80013ee:	400d      	ands	r5, r1
 80013f0:	4315      	orrs	r5, r2
 80013f2:	07d9      	lsls	r1, r3, #31
 80013f4:	085b      	lsrs	r3, r3, #1
 80013f6:	4698      	mov	r8, r3
 80013f8:	430d      	orrs	r5, r1
 80013fa:	e665      	b.n	80010c8 <__aeabi_dadd+0xf4>
 80013fc:	0018      	movs	r0, r3
 80013fe:	3e1f      	subs	r6, #31
 8001400:	40f0      	lsrs	r0, r6
 8001402:	2a20      	cmp	r2, #32
 8001404:	d003      	beq.n	800140e <__aeabi_dadd+0x43a>
 8001406:	2140      	movs	r1, #64	; 0x40
 8001408:	1a8a      	subs	r2, r1, r2
 800140a:	4093      	lsls	r3, r2
 800140c:	431d      	orrs	r5, r3
 800140e:	1e69      	subs	r1, r5, #1
 8001410:	418d      	sbcs	r5, r1
 8001412:	2300      	movs	r3, #0
 8001414:	2600      	movs	r6, #0
 8001416:	4698      	mov	r8, r3
 8001418:	4305      	orrs	r5, r0
 800141a:	e6f7      	b.n	800120c <__aeabi_dadd+0x238>
 800141c:	0011      	movs	r1, r2
 800141e:	4665      	mov	r5, ip
 8001420:	3920      	subs	r1, #32
 8001422:	40cd      	lsrs	r5, r1
 8001424:	2a20      	cmp	r2, #32
 8001426:	d004      	beq.n	8001432 <__aeabi_dadd+0x45e>
 8001428:	2040      	movs	r0, #64	; 0x40
 800142a:	4661      	mov	r1, ip
 800142c:	1a82      	subs	r2, r0, r2
 800142e:	4091      	lsls	r1, r2
 8001430:	430f      	orrs	r7, r1
 8001432:	0039      	movs	r1, r7
 8001434:	1e4f      	subs	r7, r1, #1
 8001436:	41b9      	sbcs	r1, r7
 8001438:	4329      	orrs	r1, r5
 800143a:	e60f      	b.n	800105c <__aeabi_dadd+0x88>
 800143c:	464a      	mov	r2, r9
 800143e:	4313      	orrs	r3, r2
 8001440:	001d      	movs	r5, r3
 8001442:	1e6b      	subs	r3, r5, #1
 8001444:	419d      	sbcs	r5, r3
 8001446:	1b7d      	subs	r5, r7, r5
 8001448:	42af      	cmp	r7, r5
 800144a:	419b      	sbcs	r3, r3
 800144c:	4662      	mov	r2, ip
 800144e:	425b      	negs	r3, r3
 8001450:	1ad3      	subs	r3, r2, r3
 8001452:	4698      	mov	r8, r3
 8001454:	4654      	mov	r4, sl
 8001456:	000e      	movs	r6, r1
 8001458:	e607      	b.n	800106a <__aeabi_dadd+0x96>
 800145a:	4648      	mov	r0, r9
 800145c:	4318      	orrs	r0, r3
 800145e:	d100      	bne.n	8001462 <__aeabi_dadd+0x48e>
 8001460:	e0b3      	b.n	80015ca <__aeabi_dadd+0x5f6>
 8001462:	1e50      	subs	r0, r2, #1
 8001464:	2a01      	cmp	r2, #1
 8001466:	d100      	bne.n	800146a <__aeabi_dadd+0x496>
 8001468:	e10d      	b.n	8001686 <__aeabi_dadd+0x6b2>
 800146a:	4d8d      	ldr	r5, [pc, #564]	; (80016a0 <__aeabi_dadd+0x6cc>)
 800146c:	42aa      	cmp	r2, r5
 800146e:	d100      	bne.n	8001472 <__aeabi_dadd+0x49e>
 8001470:	e0a5      	b.n	80015be <__aeabi_dadd+0x5ea>
 8001472:	0002      	movs	r2, r0
 8001474:	e710      	b.n	8001298 <__aeabi_dadd+0x2c4>
 8001476:	0032      	movs	r2, r6
 8001478:	2300      	movs	r3, #0
 800147a:	2100      	movs	r1, #0
 800147c:	e644      	b.n	8001108 <__aeabi_dadd+0x134>
 800147e:	2120      	movs	r1, #32
 8001480:	0038      	movs	r0, r7
 8001482:	1a89      	subs	r1, r1, r2
 8001484:	4665      	mov	r5, ip
 8001486:	408f      	lsls	r7, r1
 8001488:	408d      	lsls	r5, r1
 800148a:	40d0      	lsrs	r0, r2
 800148c:	1e79      	subs	r1, r7, #1
 800148e:	418f      	sbcs	r7, r1
 8001490:	4305      	orrs	r5, r0
 8001492:	433d      	orrs	r5, r7
 8001494:	4667      	mov	r7, ip
 8001496:	40d7      	lsrs	r7, r2
 8001498:	19db      	adds	r3, r3, r7
 800149a:	e794      	b.n	80013c6 <__aeabi_dadd+0x3f2>
 800149c:	4a80      	ldr	r2, [pc, #512]	; (80016a0 <__aeabi_dadd+0x6cc>)
 800149e:	4290      	cmp	r0, r2
 80014a0:	d100      	bne.n	80014a4 <__aeabi_dadd+0x4d0>
 80014a2:	e0ec      	b.n	800167e <__aeabi_dadd+0x6aa>
 80014a4:	0039      	movs	r1, r7
 80014a6:	4449      	add	r1, r9
 80014a8:	4549      	cmp	r1, r9
 80014aa:	4192      	sbcs	r2, r2
 80014ac:	4463      	add	r3, ip
 80014ae:	4252      	negs	r2, r2
 80014b0:	189b      	adds	r3, r3, r2
 80014b2:	07dd      	lsls	r5, r3, #31
 80014b4:	0849      	lsrs	r1, r1, #1
 80014b6:	085b      	lsrs	r3, r3, #1
 80014b8:	4698      	mov	r8, r3
 80014ba:	0006      	movs	r6, r0
 80014bc:	430d      	orrs	r5, r1
 80014be:	e6a5      	b.n	800120c <__aeabi_dadd+0x238>
 80014c0:	464a      	mov	r2, r9
 80014c2:	1abd      	subs	r5, r7, r2
 80014c4:	42af      	cmp	r7, r5
 80014c6:	4189      	sbcs	r1, r1
 80014c8:	4662      	mov	r2, ip
 80014ca:	4249      	negs	r1, r1
 80014cc:	1ad3      	subs	r3, r2, r3
 80014ce:	1a5b      	subs	r3, r3, r1
 80014d0:	4698      	mov	r8, r3
 80014d2:	4654      	mov	r4, sl
 80014d4:	e5d1      	b.n	800107a <__aeabi_dadd+0xa6>
 80014d6:	076c      	lsls	r4, r5, #29
 80014d8:	08f9      	lsrs	r1, r7, #3
 80014da:	4321      	orrs	r1, r4
 80014dc:	08eb      	lsrs	r3, r5, #3
 80014de:	0004      	movs	r4, r0
 80014e0:	e69d      	b.n	800121e <__aeabi_dadd+0x24a>
 80014e2:	464a      	mov	r2, r9
 80014e4:	431a      	orrs	r2, r3
 80014e6:	d175      	bne.n	80015d4 <__aeabi_dadd+0x600>
 80014e8:	4661      	mov	r1, ip
 80014ea:	4339      	orrs	r1, r7
 80014ec:	d114      	bne.n	8001518 <__aeabi_dadd+0x544>
 80014ee:	2380      	movs	r3, #128	; 0x80
 80014f0:	2400      	movs	r4, #0
 80014f2:	031b      	lsls	r3, r3, #12
 80014f4:	e6bc      	b.n	8001270 <__aeabi_dadd+0x29c>
 80014f6:	464a      	mov	r2, r9
 80014f8:	1bd5      	subs	r5, r2, r7
 80014fa:	45a9      	cmp	r9, r5
 80014fc:	4189      	sbcs	r1, r1
 80014fe:	4662      	mov	r2, ip
 8001500:	4249      	negs	r1, r1
 8001502:	1a9b      	subs	r3, r3, r2
 8001504:	1a5b      	subs	r3, r3, r1
 8001506:	4698      	mov	r8, r3
 8001508:	2601      	movs	r6, #1
 800150a:	e5ae      	b.n	800106a <__aeabi_dadd+0x96>
 800150c:	464a      	mov	r2, r9
 800150e:	08d1      	lsrs	r1, r2, #3
 8001510:	075a      	lsls	r2, r3, #29
 8001512:	4311      	orrs	r1, r2
 8001514:	08db      	lsrs	r3, r3, #3
 8001516:	e6a7      	b.n	8001268 <__aeabi_dadd+0x294>
 8001518:	4663      	mov	r3, ip
 800151a:	08f9      	lsrs	r1, r7, #3
 800151c:	075a      	lsls	r2, r3, #29
 800151e:	4654      	mov	r4, sl
 8001520:	4311      	orrs	r1, r2
 8001522:	08db      	lsrs	r3, r3, #3
 8001524:	e6a0      	b.n	8001268 <__aeabi_dadd+0x294>
 8001526:	464a      	mov	r2, r9
 8001528:	4313      	orrs	r3, r2
 800152a:	001d      	movs	r5, r3
 800152c:	1e6b      	subs	r3, r5, #1
 800152e:	419d      	sbcs	r5, r3
 8001530:	e6c7      	b.n	80012c2 <__aeabi_dadd+0x2ee>
 8001532:	0014      	movs	r4, r2
 8001534:	001e      	movs	r6, r3
 8001536:	3c20      	subs	r4, #32
 8001538:	40e6      	lsrs	r6, r4
 800153a:	2a20      	cmp	r2, #32
 800153c:	d005      	beq.n	800154a <__aeabi_dadd+0x576>
 800153e:	2440      	movs	r4, #64	; 0x40
 8001540:	1aa2      	subs	r2, r4, r2
 8001542:	4093      	lsls	r3, r2
 8001544:	464a      	mov	r2, r9
 8001546:	431a      	orrs	r2, r3
 8001548:	4691      	mov	r9, r2
 800154a:	464d      	mov	r5, r9
 800154c:	1e6b      	subs	r3, r5, #1
 800154e:	419d      	sbcs	r5, r3
 8001550:	4335      	orrs	r5, r6
 8001552:	e778      	b.n	8001446 <__aeabi_dadd+0x472>
 8001554:	464a      	mov	r2, r9
 8001556:	431a      	orrs	r2, r3
 8001558:	d000      	beq.n	800155c <__aeabi_dadd+0x588>
 800155a:	e66b      	b.n	8001234 <__aeabi_dadd+0x260>
 800155c:	076b      	lsls	r3, r5, #29
 800155e:	08f9      	lsrs	r1, r7, #3
 8001560:	4319      	orrs	r1, r3
 8001562:	08eb      	lsrs	r3, r5, #3
 8001564:	e680      	b.n	8001268 <__aeabi_dadd+0x294>
 8001566:	4661      	mov	r1, ip
 8001568:	4339      	orrs	r1, r7
 800156a:	d054      	beq.n	8001616 <__aeabi_dadd+0x642>
 800156c:	4663      	mov	r3, ip
 800156e:	08f9      	lsrs	r1, r7, #3
 8001570:	075c      	lsls	r4, r3, #29
 8001572:	4321      	orrs	r1, r4
 8001574:	08db      	lsrs	r3, r3, #3
 8001576:	0004      	movs	r4, r0
 8001578:	e654      	b.n	8001224 <__aeabi_dadd+0x250>
 800157a:	464a      	mov	r2, r9
 800157c:	1abd      	subs	r5, r7, r2
 800157e:	42af      	cmp	r7, r5
 8001580:	4189      	sbcs	r1, r1
 8001582:	4662      	mov	r2, ip
 8001584:	4249      	negs	r1, r1
 8001586:	1ad3      	subs	r3, r2, r3
 8001588:	1a5b      	subs	r3, r3, r1
 800158a:	4698      	mov	r8, r3
 800158c:	0004      	movs	r4, r0
 800158e:	2601      	movs	r6, #1
 8001590:	e56b      	b.n	800106a <__aeabi_dadd+0x96>
 8001592:	464a      	mov	r2, r9
 8001594:	1bd5      	subs	r5, r2, r7
 8001596:	45a9      	cmp	r9, r5
 8001598:	4189      	sbcs	r1, r1
 800159a:	4662      	mov	r2, ip
 800159c:	4249      	negs	r1, r1
 800159e:	1a9a      	subs	r2, r3, r2
 80015a0:	1a52      	subs	r2, r2, r1
 80015a2:	4690      	mov	r8, r2
 80015a4:	0212      	lsls	r2, r2, #8
 80015a6:	d532      	bpl.n	800160e <__aeabi_dadd+0x63a>
 80015a8:	464a      	mov	r2, r9
 80015aa:	1abd      	subs	r5, r7, r2
 80015ac:	42af      	cmp	r7, r5
 80015ae:	4189      	sbcs	r1, r1
 80015b0:	4662      	mov	r2, ip
 80015b2:	4249      	negs	r1, r1
 80015b4:	1ad3      	subs	r3, r2, r3
 80015b6:	1a5b      	subs	r3, r3, r1
 80015b8:	4698      	mov	r8, r3
 80015ba:	0004      	movs	r4, r0
 80015bc:	e584      	b.n	80010c8 <__aeabi_dadd+0xf4>
 80015be:	4663      	mov	r3, ip
 80015c0:	08f9      	lsrs	r1, r7, #3
 80015c2:	075a      	lsls	r2, r3, #29
 80015c4:	4311      	orrs	r1, r2
 80015c6:	08db      	lsrs	r3, r3, #3
 80015c8:	e64e      	b.n	8001268 <__aeabi_dadd+0x294>
 80015ca:	08f9      	lsrs	r1, r7, #3
 80015cc:	0768      	lsls	r0, r5, #29
 80015ce:	4301      	orrs	r1, r0
 80015d0:	08eb      	lsrs	r3, r5, #3
 80015d2:	e624      	b.n	800121e <__aeabi_dadd+0x24a>
 80015d4:	4662      	mov	r2, ip
 80015d6:	433a      	orrs	r2, r7
 80015d8:	d100      	bne.n	80015dc <__aeabi_dadd+0x608>
 80015da:	e698      	b.n	800130e <__aeabi_dadd+0x33a>
 80015dc:	464a      	mov	r2, r9
 80015de:	08d1      	lsrs	r1, r2, #3
 80015e0:	075a      	lsls	r2, r3, #29
 80015e2:	4311      	orrs	r1, r2
 80015e4:	08da      	lsrs	r2, r3, #3
 80015e6:	2380      	movs	r3, #128	; 0x80
 80015e8:	031b      	lsls	r3, r3, #12
 80015ea:	421a      	tst	r2, r3
 80015ec:	d008      	beq.n	8001600 <__aeabi_dadd+0x62c>
 80015ee:	4660      	mov	r0, ip
 80015f0:	08c5      	lsrs	r5, r0, #3
 80015f2:	421d      	tst	r5, r3
 80015f4:	d104      	bne.n	8001600 <__aeabi_dadd+0x62c>
 80015f6:	4654      	mov	r4, sl
 80015f8:	002a      	movs	r2, r5
 80015fa:	08f9      	lsrs	r1, r7, #3
 80015fc:	0743      	lsls	r3, r0, #29
 80015fe:	4319      	orrs	r1, r3
 8001600:	0f4b      	lsrs	r3, r1, #29
 8001602:	00c9      	lsls	r1, r1, #3
 8001604:	075b      	lsls	r3, r3, #29
 8001606:	08c9      	lsrs	r1, r1, #3
 8001608:	4319      	orrs	r1, r3
 800160a:	0013      	movs	r3, r2
 800160c:	e62c      	b.n	8001268 <__aeabi_dadd+0x294>
 800160e:	4641      	mov	r1, r8
 8001610:	4329      	orrs	r1, r5
 8001612:	d000      	beq.n	8001616 <__aeabi_dadd+0x642>
 8001614:	e5fa      	b.n	800120c <__aeabi_dadd+0x238>
 8001616:	2300      	movs	r3, #0
 8001618:	000a      	movs	r2, r1
 800161a:	2400      	movs	r4, #0
 800161c:	e602      	b.n	8001224 <__aeabi_dadd+0x250>
 800161e:	076b      	lsls	r3, r5, #29
 8001620:	08f9      	lsrs	r1, r7, #3
 8001622:	4319      	orrs	r1, r3
 8001624:	08eb      	lsrs	r3, r5, #3
 8001626:	e5fd      	b.n	8001224 <__aeabi_dadd+0x250>
 8001628:	4663      	mov	r3, ip
 800162a:	08f9      	lsrs	r1, r7, #3
 800162c:	075b      	lsls	r3, r3, #29
 800162e:	4319      	orrs	r1, r3
 8001630:	4663      	mov	r3, ip
 8001632:	0004      	movs	r4, r0
 8001634:	08db      	lsrs	r3, r3, #3
 8001636:	e617      	b.n	8001268 <__aeabi_dadd+0x294>
 8001638:	003d      	movs	r5, r7
 800163a:	444d      	add	r5, r9
 800163c:	4463      	add	r3, ip
 800163e:	454d      	cmp	r5, r9
 8001640:	4189      	sbcs	r1, r1
 8001642:	4698      	mov	r8, r3
 8001644:	4249      	negs	r1, r1
 8001646:	4488      	add	r8, r1
 8001648:	4643      	mov	r3, r8
 800164a:	021b      	lsls	r3, r3, #8
 800164c:	d400      	bmi.n	8001650 <__aeabi_dadd+0x67c>
 800164e:	e5dd      	b.n	800120c <__aeabi_dadd+0x238>
 8001650:	4642      	mov	r2, r8
 8001652:	4b14      	ldr	r3, [pc, #80]	; (80016a4 <__aeabi_dadd+0x6d0>)
 8001654:	2601      	movs	r6, #1
 8001656:	401a      	ands	r2, r3
 8001658:	4690      	mov	r8, r2
 800165a:	e5d7      	b.n	800120c <__aeabi_dadd+0x238>
 800165c:	0010      	movs	r0, r2
 800165e:	001e      	movs	r6, r3
 8001660:	3820      	subs	r0, #32
 8001662:	40c6      	lsrs	r6, r0
 8001664:	2a20      	cmp	r2, #32
 8001666:	d005      	beq.n	8001674 <__aeabi_dadd+0x6a0>
 8001668:	2040      	movs	r0, #64	; 0x40
 800166a:	1a82      	subs	r2, r0, r2
 800166c:	4093      	lsls	r3, r2
 800166e:	464a      	mov	r2, r9
 8001670:	431a      	orrs	r2, r3
 8001672:	4691      	mov	r9, r2
 8001674:	464d      	mov	r5, r9
 8001676:	1e6b      	subs	r3, r5, #1
 8001678:	419d      	sbcs	r5, r3
 800167a:	4335      	orrs	r5, r6
 800167c:	e621      	b.n	80012c2 <__aeabi_dadd+0x2ee>
 800167e:	0002      	movs	r2, r0
 8001680:	2300      	movs	r3, #0
 8001682:	2100      	movs	r1, #0
 8001684:	e540      	b.n	8001108 <__aeabi_dadd+0x134>
 8001686:	464a      	mov	r2, r9
 8001688:	19d5      	adds	r5, r2, r7
 800168a:	42bd      	cmp	r5, r7
 800168c:	4189      	sbcs	r1, r1
 800168e:	4463      	add	r3, ip
 8001690:	4698      	mov	r8, r3
 8001692:	4249      	negs	r1, r1
 8001694:	4488      	add	r8, r1
 8001696:	e5b3      	b.n	8001200 <__aeabi_dadd+0x22c>
 8001698:	2100      	movs	r1, #0
 800169a:	4a01      	ldr	r2, [pc, #4]	; (80016a0 <__aeabi_dadd+0x6cc>)
 800169c:	000b      	movs	r3, r1
 800169e:	e533      	b.n	8001108 <__aeabi_dadd+0x134>
 80016a0:	000007ff 	.word	0x000007ff
 80016a4:	ff7fffff 	.word	0xff7fffff

080016a8 <__aeabi_ddiv>:
 80016a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80016aa:	4657      	mov	r7, sl
 80016ac:	464e      	mov	r6, r9
 80016ae:	4645      	mov	r5, r8
 80016b0:	46de      	mov	lr, fp
 80016b2:	b5e0      	push	{r5, r6, r7, lr}
 80016b4:	4681      	mov	r9, r0
 80016b6:	0005      	movs	r5, r0
 80016b8:	030c      	lsls	r4, r1, #12
 80016ba:	0048      	lsls	r0, r1, #1
 80016bc:	4692      	mov	sl, r2
 80016be:	001f      	movs	r7, r3
 80016c0:	b085      	sub	sp, #20
 80016c2:	0b24      	lsrs	r4, r4, #12
 80016c4:	0d40      	lsrs	r0, r0, #21
 80016c6:	0fce      	lsrs	r6, r1, #31
 80016c8:	2800      	cmp	r0, #0
 80016ca:	d059      	beq.n	8001780 <__aeabi_ddiv+0xd8>
 80016cc:	4b87      	ldr	r3, [pc, #540]	; (80018ec <__aeabi_ddiv+0x244>)
 80016ce:	4298      	cmp	r0, r3
 80016d0:	d100      	bne.n	80016d4 <__aeabi_ddiv+0x2c>
 80016d2:	e098      	b.n	8001806 <__aeabi_ddiv+0x15e>
 80016d4:	0f6b      	lsrs	r3, r5, #29
 80016d6:	00e4      	lsls	r4, r4, #3
 80016d8:	431c      	orrs	r4, r3
 80016da:	2380      	movs	r3, #128	; 0x80
 80016dc:	041b      	lsls	r3, r3, #16
 80016de:	4323      	orrs	r3, r4
 80016e0:	4698      	mov	r8, r3
 80016e2:	4b83      	ldr	r3, [pc, #524]	; (80018f0 <__aeabi_ddiv+0x248>)
 80016e4:	00ed      	lsls	r5, r5, #3
 80016e6:	469b      	mov	fp, r3
 80016e8:	2300      	movs	r3, #0
 80016ea:	4699      	mov	r9, r3
 80016ec:	4483      	add	fp, r0
 80016ee:	9300      	str	r3, [sp, #0]
 80016f0:	033c      	lsls	r4, r7, #12
 80016f2:	007b      	lsls	r3, r7, #1
 80016f4:	4650      	mov	r0, sl
 80016f6:	0b24      	lsrs	r4, r4, #12
 80016f8:	0d5b      	lsrs	r3, r3, #21
 80016fa:	0fff      	lsrs	r7, r7, #31
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d067      	beq.n	80017d0 <__aeabi_ddiv+0x128>
 8001700:	4a7a      	ldr	r2, [pc, #488]	; (80018ec <__aeabi_ddiv+0x244>)
 8001702:	4293      	cmp	r3, r2
 8001704:	d018      	beq.n	8001738 <__aeabi_ddiv+0x90>
 8001706:	497a      	ldr	r1, [pc, #488]	; (80018f0 <__aeabi_ddiv+0x248>)
 8001708:	0f42      	lsrs	r2, r0, #29
 800170a:	468c      	mov	ip, r1
 800170c:	00e4      	lsls	r4, r4, #3
 800170e:	4659      	mov	r1, fp
 8001710:	4314      	orrs	r4, r2
 8001712:	2280      	movs	r2, #128	; 0x80
 8001714:	4463      	add	r3, ip
 8001716:	0412      	lsls	r2, r2, #16
 8001718:	1acb      	subs	r3, r1, r3
 800171a:	4314      	orrs	r4, r2
 800171c:	469b      	mov	fp, r3
 800171e:	00c2      	lsls	r2, r0, #3
 8001720:	2000      	movs	r0, #0
 8001722:	0033      	movs	r3, r6
 8001724:	407b      	eors	r3, r7
 8001726:	469a      	mov	sl, r3
 8001728:	464b      	mov	r3, r9
 800172a:	2b0f      	cmp	r3, #15
 800172c:	d900      	bls.n	8001730 <__aeabi_ddiv+0x88>
 800172e:	e0ef      	b.n	8001910 <__aeabi_ddiv+0x268>
 8001730:	4970      	ldr	r1, [pc, #448]	; (80018f4 <__aeabi_ddiv+0x24c>)
 8001732:	009b      	lsls	r3, r3, #2
 8001734:	58cb      	ldr	r3, [r1, r3]
 8001736:	469f      	mov	pc, r3
 8001738:	4b6f      	ldr	r3, [pc, #444]	; (80018f8 <__aeabi_ddiv+0x250>)
 800173a:	4652      	mov	r2, sl
 800173c:	469c      	mov	ip, r3
 800173e:	4322      	orrs	r2, r4
 8001740:	44e3      	add	fp, ip
 8001742:	2a00      	cmp	r2, #0
 8001744:	d000      	beq.n	8001748 <__aeabi_ddiv+0xa0>
 8001746:	e095      	b.n	8001874 <__aeabi_ddiv+0x1cc>
 8001748:	4649      	mov	r1, r9
 800174a:	2302      	movs	r3, #2
 800174c:	4319      	orrs	r1, r3
 800174e:	4689      	mov	r9, r1
 8001750:	2400      	movs	r4, #0
 8001752:	2002      	movs	r0, #2
 8001754:	e7e5      	b.n	8001722 <__aeabi_ddiv+0x7a>
 8001756:	2300      	movs	r3, #0
 8001758:	2400      	movs	r4, #0
 800175a:	2500      	movs	r5, #0
 800175c:	4652      	mov	r2, sl
 800175e:	051b      	lsls	r3, r3, #20
 8001760:	4323      	orrs	r3, r4
 8001762:	07d2      	lsls	r2, r2, #31
 8001764:	4313      	orrs	r3, r2
 8001766:	0028      	movs	r0, r5
 8001768:	0019      	movs	r1, r3
 800176a:	b005      	add	sp, #20
 800176c:	bcf0      	pop	{r4, r5, r6, r7}
 800176e:	46bb      	mov	fp, r7
 8001770:	46b2      	mov	sl, r6
 8001772:	46a9      	mov	r9, r5
 8001774:	46a0      	mov	r8, r4
 8001776:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001778:	2400      	movs	r4, #0
 800177a:	2500      	movs	r5, #0
 800177c:	4b5b      	ldr	r3, [pc, #364]	; (80018ec <__aeabi_ddiv+0x244>)
 800177e:	e7ed      	b.n	800175c <__aeabi_ddiv+0xb4>
 8001780:	464b      	mov	r3, r9
 8001782:	4323      	orrs	r3, r4
 8001784:	4698      	mov	r8, r3
 8001786:	d100      	bne.n	800178a <__aeabi_ddiv+0xe2>
 8001788:	e089      	b.n	800189e <__aeabi_ddiv+0x1f6>
 800178a:	2c00      	cmp	r4, #0
 800178c:	d100      	bne.n	8001790 <__aeabi_ddiv+0xe8>
 800178e:	e1e0      	b.n	8001b52 <__aeabi_ddiv+0x4aa>
 8001790:	0020      	movs	r0, r4
 8001792:	f001 fae9 	bl	8002d68 <__clzsi2>
 8001796:	0001      	movs	r1, r0
 8001798:	0002      	movs	r2, r0
 800179a:	390b      	subs	r1, #11
 800179c:	231d      	movs	r3, #29
 800179e:	1a5b      	subs	r3, r3, r1
 80017a0:	4649      	mov	r1, r9
 80017a2:	0010      	movs	r0, r2
 80017a4:	40d9      	lsrs	r1, r3
 80017a6:	3808      	subs	r0, #8
 80017a8:	4084      	lsls	r4, r0
 80017aa:	000b      	movs	r3, r1
 80017ac:	464d      	mov	r5, r9
 80017ae:	4323      	orrs	r3, r4
 80017b0:	4698      	mov	r8, r3
 80017b2:	4085      	lsls	r5, r0
 80017b4:	4851      	ldr	r0, [pc, #324]	; (80018fc <__aeabi_ddiv+0x254>)
 80017b6:	033c      	lsls	r4, r7, #12
 80017b8:	1a83      	subs	r3, r0, r2
 80017ba:	469b      	mov	fp, r3
 80017bc:	2300      	movs	r3, #0
 80017be:	4699      	mov	r9, r3
 80017c0:	9300      	str	r3, [sp, #0]
 80017c2:	007b      	lsls	r3, r7, #1
 80017c4:	4650      	mov	r0, sl
 80017c6:	0b24      	lsrs	r4, r4, #12
 80017c8:	0d5b      	lsrs	r3, r3, #21
 80017ca:	0fff      	lsrs	r7, r7, #31
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d197      	bne.n	8001700 <__aeabi_ddiv+0x58>
 80017d0:	4652      	mov	r2, sl
 80017d2:	4322      	orrs	r2, r4
 80017d4:	d055      	beq.n	8001882 <__aeabi_ddiv+0x1da>
 80017d6:	2c00      	cmp	r4, #0
 80017d8:	d100      	bne.n	80017dc <__aeabi_ddiv+0x134>
 80017da:	e1ca      	b.n	8001b72 <__aeabi_ddiv+0x4ca>
 80017dc:	0020      	movs	r0, r4
 80017de:	f001 fac3 	bl	8002d68 <__clzsi2>
 80017e2:	0002      	movs	r2, r0
 80017e4:	3a0b      	subs	r2, #11
 80017e6:	231d      	movs	r3, #29
 80017e8:	0001      	movs	r1, r0
 80017ea:	1a9b      	subs	r3, r3, r2
 80017ec:	4652      	mov	r2, sl
 80017ee:	3908      	subs	r1, #8
 80017f0:	40da      	lsrs	r2, r3
 80017f2:	408c      	lsls	r4, r1
 80017f4:	4314      	orrs	r4, r2
 80017f6:	4652      	mov	r2, sl
 80017f8:	408a      	lsls	r2, r1
 80017fa:	4b41      	ldr	r3, [pc, #260]	; (8001900 <__aeabi_ddiv+0x258>)
 80017fc:	4458      	add	r0, fp
 80017fe:	469b      	mov	fp, r3
 8001800:	4483      	add	fp, r0
 8001802:	2000      	movs	r0, #0
 8001804:	e78d      	b.n	8001722 <__aeabi_ddiv+0x7a>
 8001806:	464b      	mov	r3, r9
 8001808:	4323      	orrs	r3, r4
 800180a:	4698      	mov	r8, r3
 800180c:	d140      	bne.n	8001890 <__aeabi_ddiv+0x1e8>
 800180e:	2308      	movs	r3, #8
 8001810:	4699      	mov	r9, r3
 8001812:	3b06      	subs	r3, #6
 8001814:	2500      	movs	r5, #0
 8001816:	4683      	mov	fp, r0
 8001818:	9300      	str	r3, [sp, #0]
 800181a:	e769      	b.n	80016f0 <__aeabi_ddiv+0x48>
 800181c:	46b2      	mov	sl, r6
 800181e:	9b00      	ldr	r3, [sp, #0]
 8001820:	2b02      	cmp	r3, #2
 8001822:	d0a9      	beq.n	8001778 <__aeabi_ddiv+0xd0>
 8001824:	2b03      	cmp	r3, #3
 8001826:	d100      	bne.n	800182a <__aeabi_ddiv+0x182>
 8001828:	e211      	b.n	8001c4e <__aeabi_ddiv+0x5a6>
 800182a:	2b01      	cmp	r3, #1
 800182c:	d093      	beq.n	8001756 <__aeabi_ddiv+0xae>
 800182e:	4a35      	ldr	r2, [pc, #212]	; (8001904 <__aeabi_ddiv+0x25c>)
 8001830:	445a      	add	r2, fp
 8001832:	2a00      	cmp	r2, #0
 8001834:	dc00      	bgt.n	8001838 <__aeabi_ddiv+0x190>
 8001836:	e13c      	b.n	8001ab2 <__aeabi_ddiv+0x40a>
 8001838:	076b      	lsls	r3, r5, #29
 800183a:	d000      	beq.n	800183e <__aeabi_ddiv+0x196>
 800183c:	e1a7      	b.n	8001b8e <__aeabi_ddiv+0x4e6>
 800183e:	08ed      	lsrs	r5, r5, #3
 8001840:	4643      	mov	r3, r8
 8001842:	01db      	lsls	r3, r3, #7
 8001844:	d506      	bpl.n	8001854 <__aeabi_ddiv+0x1ac>
 8001846:	4642      	mov	r2, r8
 8001848:	4b2f      	ldr	r3, [pc, #188]	; (8001908 <__aeabi_ddiv+0x260>)
 800184a:	401a      	ands	r2, r3
 800184c:	4690      	mov	r8, r2
 800184e:	2280      	movs	r2, #128	; 0x80
 8001850:	00d2      	lsls	r2, r2, #3
 8001852:	445a      	add	r2, fp
 8001854:	4b2d      	ldr	r3, [pc, #180]	; (800190c <__aeabi_ddiv+0x264>)
 8001856:	429a      	cmp	r2, r3
 8001858:	dc8e      	bgt.n	8001778 <__aeabi_ddiv+0xd0>
 800185a:	4643      	mov	r3, r8
 800185c:	0552      	lsls	r2, r2, #21
 800185e:	0758      	lsls	r0, r3, #29
 8001860:	025c      	lsls	r4, r3, #9
 8001862:	4305      	orrs	r5, r0
 8001864:	0b24      	lsrs	r4, r4, #12
 8001866:	0d53      	lsrs	r3, r2, #21
 8001868:	e778      	b.n	800175c <__aeabi_ddiv+0xb4>
 800186a:	46ba      	mov	sl, r7
 800186c:	46a0      	mov	r8, r4
 800186e:	0015      	movs	r5, r2
 8001870:	9000      	str	r0, [sp, #0]
 8001872:	e7d4      	b.n	800181e <__aeabi_ddiv+0x176>
 8001874:	464a      	mov	r2, r9
 8001876:	2303      	movs	r3, #3
 8001878:	431a      	orrs	r2, r3
 800187a:	4691      	mov	r9, r2
 800187c:	2003      	movs	r0, #3
 800187e:	4652      	mov	r2, sl
 8001880:	e74f      	b.n	8001722 <__aeabi_ddiv+0x7a>
 8001882:	4649      	mov	r1, r9
 8001884:	2301      	movs	r3, #1
 8001886:	4319      	orrs	r1, r3
 8001888:	4689      	mov	r9, r1
 800188a:	2400      	movs	r4, #0
 800188c:	2001      	movs	r0, #1
 800188e:	e748      	b.n	8001722 <__aeabi_ddiv+0x7a>
 8001890:	230c      	movs	r3, #12
 8001892:	4699      	mov	r9, r3
 8001894:	3b09      	subs	r3, #9
 8001896:	46a0      	mov	r8, r4
 8001898:	4683      	mov	fp, r0
 800189a:	9300      	str	r3, [sp, #0]
 800189c:	e728      	b.n	80016f0 <__aeabi_ddiv+0x48>
 800189e:	2304      	movs	r3, #4
 80018a0:	4699      	mov	r9, r3
 80018a2:	2300      	movs	r3, #0
 80018a4:	469b      	mov	fp, r3
 80018a6:	3301      	adds	r3, #1
 80018a8:	2500      	movs	r5, #0
 80018aa:	9300      	str	r3, [sp, #0]
 80018ac:	e720      	b.n	80016f0 <__aeabi_ddiv+0x48>
 80018ae:	2300      	movs	r3, #0
 80018b0:	2480      	movs	r4, #128	; 0x80
 80018b2:	469a      	mov	sl, r3
 80018b4:	2500      	movs	r5, #0
 80018b6:	4b0d      	ldr	r3, [pc, #52]	; (80018ec <__aeabi_ddiv+0x244>)
 80018b8:	0324      	lsls	r4, r4, #12
 80018ba:	e74f      	b.n	800175c <__aeabi_ddiv+0xb4>
 80018bc:	2380      	movs	r3, #128	; 0x80
 80018be:	4641      	mov	r1, r8
 80018c0:	031b      	lsls	r3, r3, #12
 80018c2:	4219      	tst	r1, r3
 80018c4:	d008      	beq.n	80018d8 <__aeabi_ddiv+0x230>
 80018c6:	421c      	tst	r4, r3
 80018c8:	d106      	bne.n	80018d8 <__aeabi_ddiv+0x230>
 80018ca:	431c      	orrs	r4, r3
 80018cc:	0324      	lsls	r4, r4, #12
 80018ce:	46ba      	mov	sl, r7
 80018d0:	0015      	movs	r5, r2
 80018d2:	4b06      	ldr	r3, [pc, #24]	; (80018ec <__aeabi_ddiv+0x244>)
 80018d4:	0b24      	lsrs	r4, r4, #12
 80018d6:	e741      	b.n	800175c <__aeabi_ddiv+0xb4>
 80018d8:	2480      	movs	r4, #128	; 0x80
 80018da:	4643      	mov	r3, r8
 80018dc:	0324      	lsls	r4, r4, #12
 80018de:	431c      	orrs	r4, r3
 80018e0:	0324      	lsls	r4, r4, #12
 80018e2:	46b2      	mov	sl, r6
 80018e4:	4b01      	ldr	r3, [pc, #4]	; (80018ec <__aeabi_ddiv+0x244>)
 80018e6:	0b24      	lsrs	r4, r4, #12
 80018e8:	e738      	b.n	800175c <__aeabi_ddiv+0xb4>
 80018ea:	46c0      	nop			; (mov r8, r8)
 80018ec:	000007ff 	.word	0x000007ff
 80018f0:	fffffc01 	.word	0xfffffc01
 80018f4:	0800a430 	.word	0x0800a430
 80018f8:	fffff801 	.word	0xfffff801
 80018fc:	fffffc0d 	.word	0xfffffc0d
 8001900:	000003f3 	.word	0x000003f3
 8001904:	000003ff 	.word	0x000003ff
 8001908:	feffffff 	.word	0xfeffffff
 800190c:	000007fe 	.word	0x000007fe
 8001910:	4544      	cmp	r4, r8
 8001912:	d200      	bcs.n	8001916 <__aeabi_ddiv+0x26e>
 8001914:	e116      	b.n	8001b44 <__aeabi_ddiv+0x49c>
 8001916:	d100      	bne.n	800191a <__aeabi_ddiv+0x272>
 8001918:	e111      	b.n	8001b3e <__aeabi_ddiv+0x496>
 800191a:	2301      	movs	r3, #1
 800191c:	425b      	negs	r3, r3
 800191e:	469c      	mov	ip, r3
 8001920:	002e      	movs	r6, r5
 8001922:	4640      	mov	r0, r8
 8001924:	2500      	movs	r5, #0
 8001926:	44e3      	add	fp, ip
 8001928:	0223      	lsls	r3, r4, #8
 800192a:	0e14      	lsrs	r4, r2, #24
 800192c:	431c      	orrs	r4, r3
 800192e:	0c1b      	lsrs	r3, r3, #16
 8001930:	4699      	mov	r9, r3
 8001932:	0423      	lsls	r3, r4, #16
 8001934:	0c1f      	lsrs	r7, r3, #16
 8001936:	0212      	lsls	r2, r2, #8
 8001938:	4649      	mov	r1, r9
 800193a:	9200      	str	r2, [sp, #0]
 800193c:	9701      	str	r7, [sp, #4]
 800193e:	f7fe fc85 	bl	800024c <__aeabi_uidivmod>
 8001942:	0002      	movs	r2, r0
 8001944:	437a      	muls	r2, r7
 8001946:	040b      	lsls	r3, r1, #16
 8001948:	0c31      	lsrs	r1, r6, #16
 800194a:	4680      	mov	r8, r0
 800194c:	4319      	orrs	r1, r3
 800194e:	428a      	cmp	r2, r1
 8001950:	d90b      	bls.n	800196a <__aeabi_ddiv+0x2c2>
 8001952:	2301      	movs	r3, #1
 8001954:	425b      	negs	r3, r3
 8001956:	469c      	mov	ip, r3
 8001958:	1909      	adds	r1, r1, r4
 800195a:	44e0      	add	r8, ip
 800195c:	428c      	cmp	r4, r1
 800195e:	d804      	bhi.n	800196a <__aeabi_ddiv+0x2c2>
 8001960:	428a      	cmp	r2, r1
 8001962:	d902      	bls.n	800196a <__aeabi_ddiv+0x2c2>
 8001964:	1e83      	subs	r3, r0, #2
 8001966:	4698      	mov	r8, r3
 8001968:	1909      	adds	r1, r1, r4
 800196a:	1a88      	subs	r0, r1, r2
 800196c:	4649      	mov	r1, r9
 800196e:	f7fe fc6d 	bl	800024c <__aeabi_uidivmod>
 8001972:	0409      	lsls	r1, r1, #16
 8001974:	468c      	mov	ip, r1
 8001976:	0431      	lsls	r1, r6, #16
 8001978:	4666      	mov	r6, ip
 800197a:	9a01      	ldr	r2, [sp, #4]
 800197c:	0c09      	lsrs	r1, r1, #16
 800197e:	4342      	muls	r2, r0
 8001980:	0003      	movs	r3, r0
 8001982:	4331      	orrs	r1, r6
 8001984:	428a      	cmp	r2, r1
 8001986:	d904      	bls.n	8001992 <__aeabi_ddiv+0x2ea>
 8001988:	1909      	adds	r1, r1, r4
 800198a:	3b01      	subs	r3, #1
 800198c:	428c      	cmp	r4, r1
 800198e:	d800      	bhi.n	8001992 <__aeabi_ddiv+0x2ea>
 8001990:	e111      	b.n	8001bb6 <__aeabi_ddiv+0x50e>
 8001992:	1a89      	subs	r1, r1, r2
 8001994:	4642      	mov	r2, r8
 8001996:	9e00      	ldr	r6, [sp, #0]
 8001998:	0412      	lsls	r2, r2, #16
 800199a:	431a      	orrs	r2, r3
 800199c:	0c33      	lsrs	r3, r6, #16
 800199e:	001f      	movs	r7, r3
 80019a0:	0c10      	lsrs	r0, r2, #16
 80019a2:	4690      	mov	r8, r2
 80019a4:	9302      	str	r3, [sp, #8]
 80019a6:	0413      	lsls	r3, r2, #16
 80019a8:	0432      	lsls	r2, r6, #16
 80019aa:	0c16      	lsrs	r6, r2, #16
 80019ac:	0032      	movs	r2, r6
 80019ae:	0c1b      	lsrs	r3, r3, #16
 80019b0:	435a      	muls	r2, r3
 80019b2:	9603      	str	r6, [sp, #12]
 80019b4:	437b      	muls	r3, r7
 80019b6:	4346      	muls	r6, r0
 80019b8:	4378      	muls	r0, r7
 80019ba:	0c17      	lsrs	r7, r2, #16
 80019bc:	46bc      	mov	ip, r7
 80019be:	199b      	adds	r3, r3, r6
 80019c0:	4463      	add	r3, ip
 80019c2:	429e      	cmp	r6, r3
 80019c4:	d903      	bls.n	80019ce <__aeabi_ddiv+0x326>
 80019c6:	2680      	movs	r6, #128	; 0x80
 80019c8:	0276      	lsls	r6, r6, #9
 80019ca:	46b4      	mov	ip, r6
 80019cc:	4460      	add	r0, ip
 80019ce:	0c1e      	lsrs	r6, r3, #16
 80019d0:	1830      	adds	r0, r6, r0
 80019d2:	0416      	lsls	r6, r2, #16
 80019d4:	041b      	lsls	r3, r3, #16
 80019d6:	0c36      	lsrs	r6, r6, #16
 80019d8:	199e      	adds	r6, r3, r6
 80019da:	4281      	cmp	r1, r0
 80019dc:	d200      	bcs.n	80019e0 <__aeabi_ddiv+0x338>
 80019de:	e09c      	b.n	8001b1a <__aeabi_ddiv+0x472>
 80019e0:	d100      	bne.n	80019e4 <__aeabi_ddiv+0x33c>
 80019e2:	e097      	b.n	8001b14 <__aeabi_ddiv+0x46c>
 80019e4:	1bae      	subs	r6, r5, r6
 80019e6:	1a09      	subs	r1, r1, r0
 80019e8:	42b5      	cmp	r5, r6
 80019ea:	4180      	sbcs	r0, r0
 80019ec:	4240      	negs	r0, r0
 80019ee:	1a08      	subs	r0, r1, r0
 80019f0:	4284      	cmp	r4, r0
 80019f2:	d100      	bne.n	80019f6 <__aeabi_ddiv+0x34e>
 80019f4:	e111      	b.n	8001c1a <__aeabi_ddiv+0x572>
 80019f6:	4649      	mov	r1, r9
 80019f8:	f7fe fc28 	bl	800024c <__aeabi_uidivmod>
 80019fc:	9a01      	ldr	r2, [sp, #4]
 80019fe:	040b      	lsls	r3, r1, #16
 8001a00:	4342      	muls	r2, r0
 8001a02:	0c31      	lsrs	r1, r6, #16
 8001a04:	0005      	movs	r5, r0
 8001a06:	4319      	orrs	r1, r3
 8001a08:	428a      	cmp	r2, r1
 8001a0a:	d907      	bls.n	8001a1c <__aeabi_ddiv+0x374>
 8001a0c:	1909      	adds	r1, r1, r4
 8001a0e:	3d01      	subs	r5, #1
 8001a10:	428c      	cmp	r4, r1
 8001a12:	d803      	bhi.n	8001a1c <__aeabi_ddiv+0x374>
 8001a14:	428a      	cmp	r2, r1
 8001a16:	d901      	bls.n	8001a1c <__aeabi_ddiv+0x374>
 8001a18:	1e85      	subs	r5, r0, #2
 8001a1a:	1909      	adds	r1, r1, r4
 8001a1c:	1a88      	subs	r0, r1, r2
 8001a1e:	4649      	mov	r1, r9
 8001a20:	f7fe fc14 	bl	800024c <__aeabi_uidivmod>
 8001a24:	0409      	lsls	r1, r1, #16
 8001a26:	468c      	mov	ip, r1
 8001a28:	0431      	lsls	r1, r6, #16
 8001a2a:	4666      	mov	r6, ip
 8001a2c:	9a01      	ldr	r2, [sp, #4]
 8001a2e:	0c09      	lsrs	r1, r1, #16
 8001a30:	4342      	muls	r2, r0
 8001a32:	0003      	movs	r3, r0
 8001a34:	4331      	orrs	r1, r6
 8001a36:	428a      	cmp	r2, r1
 8001a38:	d907      	bls.n	8001a4a <__aeabi_ddiv+0x3a2>
 8001a3a:	1909      	adds	r1, r1, r4
 8001a3c:	3b01      	subs	r3, #1
 8001a3e:	428c      	cmp	r4, r1
 8001a40:	d803      	bhi.n	8001a4a <__aeabi_ddiv+0x3a2>
 8001a42:	428a      	cmp	r2, r1
 8001a44:	d901      	bls.n	8001a4a <__aeabi_ddiv+0x3a2>
 8001a46:	1e83      	subs	r3, r0, #2
 8001a48:	1909      	adds	r1, r1, r4
 8001a4a:	9e03      	ldr	r6, [sp, #12]
 8001a4c:	1a89      	subs	r1, r1, r2
 8001a4e:	0032      	movs	r2, r6
 8001a50:	042d      	lsls	r5, r5, #16
 8001a52:	431d      	orrs	r5, r3
 8001a54:	9f02      	ldr	r7, [sp, #8]
 8001a56:	042b      	lsls	r3, r5, #16
 8001a58:	0c1b      	lsrs	r3, r3, #16
 8001a5a:	435a      	muls	r2, r3
 8001a5c:	437b      	muls	r3, r7
 8001a5e:	469c      	mov	ip, r3
 8001a60:	0c28      	lsrs	r0, r5, #16
 8001a62:	4346      	muls	r6, r0
 8001a64:	0c13      	lsrs	r3, r2, #16
 8001a66:	44b4      	add	ip, r6
 8001a68:	4463      	add	r3, ip
 8001a6a:	4378      	muls	r0, r7
 8001a6c:	429e      	cmp	r6, r3
 8001a6e:	d903      	bls.n	8001a78 <__aeabi_ddiv+0x3d0>
 8001a70:	2680      	movs	r6, #128	; 0x80
 8001a72:	0276      	lsls	r6, r6, #9
 8001a74:	46b4      	mov	ip, r6
 8001a76:	4460      	add	r0, ip
 8001a78:	0c1e      	lsrs	r6, r3, #16
 8001a7a:	0412      	lsls	r2, r2, #16
 8001a7c:	041b      	lsls	r3, r3, #16
 8001a7e:	0c12      	lsrs	r2, r2, #16
 8001a80:	1830      	adds	r0, r6, r0
 8001a82:	189b      	adds	r3, r3, r2
 8001a84:	4281      	cmp	r1, r0
 8001a86:	d306      	bcc.n	8001a96 <__aeabi_ddiv+0x3ee>
 8001a88:	d002      	beq.n	8001a90 <__aeabi_ddiv+0x3e8>
 8001a8a:	2301      	movs	r3, #1
 8001a8c:	431d      	orrs	r5, r3
 8001a8e:	e6ce      	b.n	800182e <__aeabi_ddiv+0x186>
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d100      	bne.n	8001a96 <__aeabi_ddiv+0x3ee>
 8001a94:	e6cb      	b.n	800182e <__aeabi_ddiv+0x186>
 8001a96:	1861      	adds	r1, r4, r1
 8001a98:	1e6e      	subs	r6, r5, #1
 8001a9a:	42a1      	cmp	r1, r4
 8001a9c:	d200      	bcs.n	8001aa0 <__aeabi_ddiv+0x3f8>
 8001a9e:	e0a4      	b.n	8001bea <__aeabi_ddiv+0x542>
 8001aa0:	4281      	cmp	r1, r0
 8001aa2:	d200      	bcs.n	8001aa6 <__aeabi_ddiv+0x3fe>
 8001aa4:	e0c9      	b.n	8001c3a <__aeabi_ddiv+0x592>
 8001aa6:	d100      	bne.n	8001aaa <__aeabi_ddiv+0x402>
 8001aa8:	e0d9      	b.n	8001c5e <__aeabi_ddiv+0x5b6>
 8001aaa:	0035      	movs	r5, r6
 8001aac:	e7ed      	b.n	8001a8a <__aeabi_ddiv+0x3e2>
 8001aae:	2501      	movs	r5, #1
 8001ab0:	426d      	negs	r5, r5
 8001ab2:	2101      	movs	r1, #1
 8001ab4:	1a89      	subs	r1, r1, r2
 8001ab6:	2938      	cmp	r1, #56	; 0x38
 8001ab8:	dd00      	ble.n	8001abc <__aeabi_ddiv+0x414>
 8001aba:	e64c      	b.n	8001756 <__aeabi_ddiv+0xae>
 8001abc:	291f      	cmp	r1, #31
 8001abe:	dc00      	bgt.n	8001ac2 <__aeabi_ddiv+0x41a>
 8001ac0:	e07f      	b.n	8001bc2 <__aeabi_ddiv+0x51a>
 8001ac2:	231f      	movs	r3, #31
 8001ac4:	425b      	negs	r3, r3
 8001ac6:	1a9a      	subs	r2, r3, r2
 8001ac8:	4643      	mov	r3, r8
 8001aca:	40d3      	lsrs	r3, r2
 8001acc:	2920      	cmp	r1, #32
 8001ace:	d004      	beq.n	8001ada <__aeabi_ddiv+0x432>
 8001ad0:	4644      	mov	r4, r8
 8001ad2:	4a65      	ldr	r2, [pc, #404]	; (8001c68 <__aeabi_ddiv+0x5c0>)
 8001ad4:	445a      	add	r2, fp
 8001ad6:	4094      	lsls	r4, r2
 8001ad8:	4325      	orrs	r5, r4
 8001ada:	1e6a      	subs	r2, r5, #1
 8001adc:	4195      	sbcs	r5, r2
 8001ade:	2207      	movs	r2, #7
 8001ae0:	432b      	orrs	r3, r5
 8001ae2:	0015      	movs	r5, r2
 8001ae4:	2400      	movs	r4, #0
 8001ae6:	401d      	ands	r5, r3
 8001ae8:	421a      	tst	r2, r3
 8001aea:	d100      	bne.n	8001aee <__aeabi_ddiv+0x446>
 8001aec:	e0a1      	b.n	8001c32 <__aeabi_ddiv+0x58a>
 8001aee:	220f      	movs	r2, #15
 8001af0:	2400      	movs	r4, #0
 8001af2:	401a      	ands	r2, r3
 8001af4:	2a04      	cmp	r2, #4
 8001af6:	d100      	bne.n	8001afa <__aeabi_ddiv+0x452>
 8001af8:	e098      	b.n	8001c2c <__aeabi_ddiv+0x584>
 8001afa:	1d1a      	adds	r2, r3, #4
 8001afc:	429a      	cmp	r2, r3
 8001afe:	419b      	sbcs	r3, r3
 8001b00:	425b      	negs	r3, r3
 8001b02:	18e4      	adds	r4, r4, r3
 8001b04:	0013      	movs	r3, r2
 8001b06:	0222      	lsls	r2, r4, #8
 8001b08:	d400      	bmi.n	8001b0c <__aeabi_ddiv+0x464>
 8001b0a:	e08f      	b.n	8001c2c <__aeabi_ddiv+0x584>
 8001b0c:	2301      	movs	r3, #1
 8001b0e:	2400      	movs	r4, #0
 8001b10:	2500      	movs	r5, #0
 8001b12:	e623      	b.n	800175c <__aeabi_ddiv+0xb4>
 8001b14:	42b5      	cmp	r5, r6
 8001b16:	d300      	bcc.n	8001b1a <__aeabi_ddiv+0x472>
 8001b18:	e764      	b.n	80019e4 <__aeabi_ddiv+0x33c>
 8001b1a:	4643      	mov	r3, r8
 8001b1c:	1e5a      	subs	r2, r3, #1
 8001b1e:	9b00      	ldr	r3, [sp, #0]
 8001b20:	469c      	mov	ip, r3
 8001b22:	4465      	add	r5, ip
 8001b24:	001f      	movs	r7, r3
 8001b26:	429d      	cmp	r5, r3
 8001b28:	419b      	sbcs	r3, r3
 8001b2a:	425b      	negs	r3, r3
 8001b2c:	191b      	adds	r3, r3, r4
 8001b2e:	18c9      	adds	r1, r1, r3
 8001b30:	428c      	cmp	r4, r1
 8001b32:	d23a      	bcs.n	8001baa <__aeabi_ddiv+0x502>
 8001b34:	4288      	cmp	r0, r1
 8001b36:	d863      	bhi.n	8001c00 <__aeabi_ddiv+0x558>
 8001b38:	d060      	beq.n	8001bfc <__aeabi_ddiv+0x554>
 8001b3a:	4690      	mov	r8, r2
 8001b3c:	e752      	b.n	80019e4 <__aeabi_ddiv+0x33c>
 8001b3e:	42aa      	cmp	r2, r5
 8001b40:	d900      	bls.n	8001b44 <__aeabi_ddiv+0x49c>
 8001b42:	e6ea      	b.n	800191a <__aeabi_ddiv+0x272>
 8001b44:	4643      	mov	r3, r8
 8001b46:	07de      	lsls	r6, r3, #31
 8001b48:	0858      	lsrs	r0, r3, #1
 8001b4a:	086b      	lsrs	r3, r5, #1
 8001b4c:	431e      	orrs	r6, r3
 8001b4e:	07ed      	lsls	r5, r5, #31
 8001b50:	e6ea      	b.n	8001928 <__aeabi_ddiv+0x280>
 8001b52:	4648      	mov	r0, r9
 8001b54:	f001 f908 	bl	8002d68 <__clzsi2>
 8001b58:	0001      	movs	r1, r0
 8001b5a:	0002      	movs	r2, r0
 8001b5c:	3115      	adds	r1, #21
 8001b5e:	3220      	adds	r2, #32
 8001b60:	291c      	cmp	r1, #28
 8001b62:	dc00      	bgt.n	8001b66 <__aeabi_ddiv+0x4be>
 8001b64:	e61a      	b.n	800179c <__aeabi_ddiv+0xf4>
 8001b66:	464b      	mov	r3, r9
 8001b68:	3808      	subs	r0, #8
 8001b6a:	4083      	lsls	r3, r0
 8001b6c:	2500      	movs	r5, #0
 8001b6e:	4698      	mov	r8, r3
 8001b70:	e620      	b.n	80017b4 <__aeabi_ddiv+0x10c>
 8001b72:	f001 f8f9 	bl	8002d68 <__clzsi2>
 8001b76:	0003      	movs	r3, r0
 8001b78:	001a      	movs	r2, r3
 8001b7a:	3215      	adds	r2, #21
 8001b7c:	3020      	adds	r0, #32
 8001b7e:	2a1c      	cmp	r2, #28
 8001b80:	dc00      	bgt.n	8001b84 <__aeabi_ddiv+0x4dc>
 8001b82:	e630      	b.n	80017e6 <__aeabi_ddiv+0x13e>
 8001b84:	4654      	mov	r4, sl
 8001b86:	3b08      	subs	r3, #8
 8001b88:	2200      	movs	r2, #0
 8001b8a:	409c      	lsls	r4, r3
 8001b8c:	e635      	b.n	80017fa <__aeabi_ddiv+0x152>
 8001b8e:	230f      	movs	r3, #15
 8001b90:	402b      	ands	r3, r5
 8001b92:	2b04      	cmp	r3, #4
 8001b94:	d100      	bne.n	8001b98 <__aeabi_ddiv+0x4f0>
 8001b96:	e652      	b.n	800183e <__aeabi_ddiv+0x196>
 8001b98:	2305      	movs	r3, #5
 8001b9a:	425b      	negs	r3, r3
 8001b9c:	42ab      	cmp	r3, r5
 8001b9e:	419b      	sbcs	r3, r3
 8001ba0:	3504      	adds	r5, #4
 8001ba2:	425b      	negs	r3, r3
 8001ba4:	08ed      	lsrs	r5, r5, #3
 8001ba6:	4498      	add	r8, r3
 8001ba8:	e64a      	b.n	8001840 <__aeabi_ddiv+0x198>
 8001baa:	428c      	cmp	r4, r1
 8001bac:	d1c5      	bne.n	8001b3a <__aeabi_ddiv+0x492>
 8001bae:	42af      	cmp	r7, r5
 8001bb0:	d9c0      	bls.n	8001b34 <__aeabi_ddiv+0x48c>
 8001bb2:	4690      	mov	r8, r2
 8001bb4:	e716      	b.n	80019e4 <__aeabi_ddiv+0x33c>
 8001bb6:	428a      	cmp	r2, r1
 8001bb8:	d800      	bhi.n	8001bbc <__aeabi_ddiv+0x514>
 8001bba:	e6ea      	b.n	8001992 <__aeabi_ddiv+0x2ea>
 8001bbc:	1e83      	subs	r3, r0, #2
 8001bbe:	1909      	adds	r1, r1, r4
 8001bc0:	e6e7      	b.n	8001992 <__aeabi_ddiv+0x2ea>
 8001bc2:	4a2a      	ldr	r2, [pc, #168]	; (8001c6c <__aeabi_ddiv+0x5c4>)
 8001bc4:	0028      	movs	r0, r5
 8001bc6:	445a      	add	r2, fp
 8001bc8:	4643      	mov	r3, r8
 8001bca:	4095      	lsls	r5, r2
 8001bcc:	4093      	lsls	r3, r2
 8001bce:	40c8      	lsrs	r0, r1
 8001bd0:	1e6a      	subs	r2, r5, #1
 8001bd2:	4195      	sbcs	r5, r2
 8001bd4:	4644      	mov	r4, r8
 8001bd6:	4303      	orrs	r3, r0
 8001bd8:	432b      	orrs	r3, r5
 8001bda:	40cc      	lsrs	r4, r1
 8001bdc:	075a      	lsls	r2, r3, #29
 8001bde:	d092      	beq.n	8001b06 <__aeabi_ddiv+0x45e>
 8001be0:	220f      	movs	r2, #15
 8001be2:	401a      	ands	r2, r3
 8001be4:	2a04      	cmp	r2, #4
 8001be6:	d188      	bne.n	8001afa <__aeabi_ddiv+0x452>
 8001be8:	e78d      	b.n	8001b06 <__aeabi_ddiv+0x45e>
 8001bea:	0035      	movs	r5, r6
 8001bec:	4281      	cmp	r1, r0
 8001bee:	d000      	beq.n	8001bf2 <__aeabi_ddiv+0x54a>
 8001bf0:	e74b      	b.n	8001a8a <__aeabi_ddiv+0x3e2>
 8001bf2:	9a00      	ldr	r2, [sp, #0]
 8001bf4:	4293      	cmp	r3, r2
 8001bf6:	d000      	beq.n	8001bfa <__aeabi_ddiv+0x552>
 8001bf8:	e747      	b.n	8001a8a <__aeabi_ddiv+0x3e2>
 8001bfa:	e618      	b.n	800182e <__aeabi_ddiv+0x186>
 8001bfc:	42ae      	cmp	r6, r5
 8001bfe:	d99c      	bls.n	8001b3a <__aeabi_ddiv+0x492>
 8001c00:	2302      	movs	r3, #2
 8001c02:	425b      	negs	r3, r3
 8001c04:	469c      	mov	ip, r3
 8001c06:	9b00      	ldr	r3, [sp, #0]
 8001c08:	44e0      	add	r8, ip
 8001c0a:	469c      	mov	ip, r3
 8001c0c:	4465      	add	r5, ip
 8001c0e:	429d      	cmp	r5, r3
 8001c10:	419b      	sbcs	r3, r3
 8001c12:	425b      	negs	r3, r3
 8001c14:	191b      	adds	r3, r3, r4
 8001c16:	18c9      	adds	r1, r1, r3
 8001c18:	e6e4      	b.n	80019e4 <__aeabi_ddiv+0x33c>
 8001c1a:	4a15      	ldr	r2, [pc, #84]	; (8001c70 <__aeabi_ddiv+0x5c8>)
 8001c1c:	445a      	add	r2, fp
 8001c1e:	2a00      	cmp	r2, #0
 8001c20:	dc00      	bgt.n	8001c24 <__aeabi_ddiv+0x57c>
 8001c22:	e744      	b.n	8001aae <__aeabi_ddiv+0x406>
 8001c24:	2301      	movs	r3, #1
 8001c26:	2500      	movs	r5, #0
 8001c28:	4498      	add	r8, r3
 8001c2a:	e609      	b.n	8001840 <__aeabi_ddiv+0x198>
 8001c2c:	0765      	lsls	r5, r4, #29
 8001c2e:	0264      	lsls	r4, r4, #9
 8001c30:	0b24      	lsrs	r4, r4, #12
 8001c32:	08db      	lsrs	r3, r3, #3
 8001c34:	431d      	orrs	r5, r3
 8001c36:	2300      	movs	r3, #0
 8001c38:	e590      	b.n	800175c <__aeabi_ddiv+0xb4>
 8001c3a:	9e00      	ldr	r6, [sp, #0]
 8001c3c:	3d02      	subs	r5, #2
 8001c3e:	0072      	lsls	r2, r6, #1
 8001c40:	42b2      	cmp	r2, r6
 8001c42:	41bf      	sbcs	r7, r7
 8001c44:	427f      	negs	r7, r7
 8001c46:	193c      	adds	r4, r7, r4
 8001c48:	1909      	adds	r1, r1, r4
 8001c4a:	9200      	str	r2, [sp, #0]
 8001c4c:	e7ce      	b.n	8001bec <__aeabi_ddiv+0x544>
 8001c4e:	2480      	movs	r4, #128	; 0x80
 8001c50:	4643      	mov	r3, r8
 8001c52:	0324      	lsls	r4, r4, #12
 8001c54:	431c      	orrs	r4, r3
 8001c56:	0324      	lsls	r4, r4, #12
 8001c58:	4b06      	ldr	r3, [pc, #24]	; (8001c74 <__aeabi_ddiv+0x5cc>)
 8001c5a:	0b24      	lsrs	r4, r4, #12
 8001c5c:	e57e      	b.n	800175c <__aeabi_ddiv+0xb4>
 8001c5e:	9a00      	ldr	r2, [sp, #0]
 8001c60:	429a      	cmp	r2, r3
 8001c62:	d3ea      	bcc.n	8001c3a <__aeabi_ddiv+0x592>
 8001c64:	0035      	movs	r5, r6
 8001c66:	e7c4      	b.n	8001bf2 <__aeabi_ddiv+0x54a>
 8001c68:	0000043e 	.word	0x0000043e
 8001c6c:	0000041e 	.word	0x0000041e
 8001c70:	000003ff 	.word	0x000003ff
 8001c74:	000007ff 	.word	0x000007ff

08001c78 <__eqdf2>:
 8001c78:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001c7a:	464f      	mov	r7, r9
 8001c7c:	4646      	mov	r6, r8
 8001c7e:	46d6      	mov	lr, sl
 8001c80:	4694      	mov	ip, r2
 8001c82:	4691      	mov	r9, r2
 8001c84:	031a      	lsls	r2, r3, #12
 8001c86:	0b12      	lsrs	r2, r2, #12
 8001c88:	4d18      	ldr	r5, [pc, #96]	; (8001cec <__eqdf2+0x74>)
 8001c8a:	b5c0      	push	{r6, r7, lr}
 8001c8c:	004c      	lsls	r4, r1, #1
 8001c8e:	030f      	lsls	r7, r1, #12
 8001c90:	4692      	mov	sl, r2
 8001c92:	005a      	lsls	r2, r3, #1
 8001c94:	0006      	movs	r6, r0
 8001c96:	4680      	mov	r8, r0
 8001c98:	0b3f      	lsrs	r7, r7, #12
 8001c9a:	2001      	movs	r0, #1
 8001c9c:	0d64      	lsrs	r4, r4, #21
 8001c9e:	0fc9      	lsrs	r1, r1, #31
 8001ca0:	0d52      	lsrs	r2, r2, #21
 8001ca2:	0fdb      	lsrs	r3, r3, #31
 8001ca4:	42ac      	cmp	r4, r5
 8001ca6:	d00a      	beq.n	8001cbe <__eqdf2+0x46>
 8001ca8:	42aa      	cmp	r2, r5
 8001caa:	d003      	beq.n	8001cb4 <__eqdf2+0x3c>
 8001cac:	4294      	cmp	r4, r2
 8001cae:	d101      	bne.n	8001cb4 <__eqdf2+0x3c>
 8001cb0:	4557      	cmp	r7, sl
 8001cb2:	d00d      	beq.n	8001cd0 <__eqdf2+0x58>
 8001cb4:	bce0      	pop	{r5, r6, r7}
 8001cb6:	46ba      	mov	sl, r7
 8001cb8:	46b1      	mov	r9, r6
 8001cba:	46a8      	mov	r8, r5
 8001cbc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001cbe:	003d      	movs	r5, r7
 8001cc0:	4335      	orrs	r5, r6
 8001cc2:	d1f7      	bne.n	8001cb4 <__eqdf2+0x3c>
 8001cc4:	42a2      	cmp	r2, r4
 8001cc6:	d1f5      	bne.n	8001cb4 <__eqdf2+0x3c>
 8001cc8:	4652      	mov	r2, sl
 8001cca:	4665      	mov	r5, ip
 8001ccc:	432a      	orrs	r2, r5
 8001cce:	d1f1      	bne.n	8001cb4 <__eqdf2+0x3c>
 8001cd0:	2001      	movs	r0, #1
 8001cd2:	45c8      	cmp	r8, r9
 8001cd4:	d1ee      	bne.n	8001cb4 <__eqdf2+0x3c>
 8001cd6:	4299      	cmp	r1, r3
 8001cd8:	d006      	beq.n	8001ce8 <__eqdf2+0x70>
 8001cda:	2c00      	cmp	r4, #0
 8001cdc:	d1ea      	bne.n	8001cb4 <__eqdf2+0x3c>
 8001cde:	433e      	orrs	r6, r7
 8001ce0:	0030      	movs	r0, r6
 8001ce2:	1e46      	subs	r6, r0, #1
 8001ce4:	41b0      	sbcs	r0, r6
 8001ce6:	e7e5      	b.n	8001cb4 <__eqdf2+0x3c>
 8001ce8:	2000      	movs	r0, #0
 8001cea:	e7e3      	b.n	8001cb4 <__eqdf2+0x3c>
 8001cec:	000007ff 	.word	0x000007ff

08001cf0 <__gedf2>:
 8001cf0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001cf2:	464e      	mov	r6, r9
 8001cf4:	4645      	mov	r5, r8
 8001cf6:	4657      	mov	r7, sl
 8001cf8:	46de      	mov	lr, fp
 8001cfa:	0004      	movs	r4, r0
 8001cfc:	0018      	movs	r0, r3
 8001cfe:	b5e0      	push	{r5, r6, r7, lr}
 8001d00:	0016      	movs	r6, r2
 8001d02:	031b      	lsls	r3, r3, #12
 8001d04:	0b1b      	lsrs	r3, r3, #12
 8001d06:	4d32      	ldr	r5, [pc, #200]	; (8001dd0 <__gedf2+0xe0>)
 8001d08:	030f      	lsls	r7, r1, #12
 8001d0a:	004a      	lsls	r2, r1, #1
 8001d0c:	4699      	mov	r9, r3
 8001d0e:	0043      	lsls	r3, r0, #1
 8001d10:	46a4      	mov	ip, r4
 8001d12:	46b0      	mov	r8, r6
 8001d14:	0b3f      	lsrs	r7, r7, #12
 8001d16:	0d52      	lsrs	r2, r2, #21
 8001d18:	0fc9      	lsrs	r1, r1, #31
 8001d1a:	0d5b      	lsrs	r3, r3, #21
 8001d1c:	0fc0      	lsrs	r0, r0, #31
 8001d1e:	42aa      	cmp	r2, r5
 8001d20:	d029      	beq.n	8001d76 <__gedf2+0x86>
 8001d22:	42ab      	cmp	r3, r5
 8001d24:	d018      	beq.n	8001d58 <__gedf2+0x68>
 8001d26:	2a00      	cmp	r2, #0
 8001d28:	d12a      	bne.n	8001d80 <__gedf2+0x90>
 8001d2a:	433c      	orrs	r4, r7
 8001d2c:	46a3      	mov	fp, r4
 8001d2e:	4265      	negs	r5, r4
 8001d30:	4165      	adcs	r5, r4
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d102      	bne.n	8001d3c <__gedf2+0x4c>
 8001d36:	464c      	mov	r4, r9
 8001d38:	4326      	orrs	r6, r4
 8001d3a:	d027      	beq.n	8001d8c <__gedf2+0x9c>
 8001d3c:	2d00      	cmp	r5, #0
 8001d3e:	d115      	bne.n	8001d6c <__gedf2+0x7c>
 8001d40:	4281      	cmp	r1, r0
 8001d42:	d028      	beq.n	8001d96 <__gedf2+0xa6>
 8001d44:	2002      	movs	r0, #2
 8001d46:	3901      	subs	r1, #1
 8001d48:	4008      	ands	r0, r1
 8001d4a:	3801      	subs	r0, #1
 8001d4c:	bcf0      	pop	{r4, r5, r6, r7}
 8001d4e:	46bb      	mov	fp, r7
 8001d50:	46b2      	mov	sl, r6
 8001d52:	46a9      	mov	r9, r5
 8001d54:	46a0      	mov	r8, r4
 8001d56:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001d58:	464d      	mov	r5, r9
 8001d5a:	432e      	orrs	r6, r5
 8001d5c:	d12f      	bne.n	8001dbe <__gedf2+0xce>
 8001d5e:	2a00      	cmp	r2, #0
 8001d60:	d1ee      	bne.n	8001d40 <__gedf2+0x50>
 8001d62:	433c      	orrs	r4, r7
 8001d64:	4265      	negs	r5, r4
 8001d66:	4165      	adcs	r5, r4
 8001d68:	2d00      	cmp	r5, #0
 8001d6a:	d0e9      	beq.n	8001d40 <__gedf2+0x50>
 8001d6c:	2800      	cmp	r0, #0
 8001d6e:	d1ed      	bne.n	8001d4c <__gedf2+0x5c>
 8001d70:	2001      	movs	r0, #1
 8001d72:	4240      	negs	r0, r0
 8001d74:	e7ea      	b.n	8001d4c <__gedf2+0x5c>
 8001d76:	003d      	movs	r5, r7
 8001d78:	4325      	orrs	r5, r4
 8001d7a:	d120      	bne.n	8001dbe <__gedf2+0xce>
 8001d7c:	4293      	cmp	r3, r2
 8001d7e:	d0eb      	beq.n	8001d58 <__gedf2+0x68>
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d1dd      	bne.n	8001d40 <__gedf2+0x50>
 8001d84:	464c      	mov	r4, r9
 8001d86:	4326      	orrs	r6, r4
 8001d88:	d1da      	bne.n	8001d40 <__gedf2+0x50>
 8001d8a:	e7db      	b.n	8001d44 <__gedf2+0x54>
 8001d8c:	465b      	mov	r3, fp
 8001d8e:	2000      	movs	r0, #0
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d0db      	beq.n	8001d4c <__gedf2+0x5c>
 8001d94:	e7d6      	b.n	8001d44 <__gedf2+0x54>
 8001d96:	429a      	cmp	r2, r3
 8001d98:	dc0a      	bgt.n	8001db0 <__gedf2+0xc0>
 8001d9a:	dbe7      	blt.n	8001d6c <__gedf2+0x7c>
 8001d9c:	454f      	cmp	r7, r9
 8001d9e:	d8d1      	bhi.n	8001d44 <__gedf2+0x54>
 8001da0:	d010      	beq.n	8001dc4 <__gedf2+0xd4>
 8001da2:	2000      	movs	r0, #0
 8001da4:	454f      	cmp	r7, r9
 8001da6:	d2d1      	bcs.n	8001d4c <__gedf2+0x5c>
 8001da8:	2900      	cmp	r1, #0
 8001daa:	d0e1      	beq.n	8001d70 <__gedf2+0x80>
 8001dac:	0008      	movs	r0, r1
 8001dae:	e7cd      	b.n	8001d4c <__gedf2+0x5c>
 8001db0:	4243      	negs	r3, r0
 8001db2:	4158      	adcs	r0, r3
 8001db4:	2302      	movs	r3, #2
 8001db6:	4240      	negs	r0, r0
 8001db8:	4018      	ands	r0, r3
 8001dba:	3801      	subs	r0, #1
 8001dbc:	e7c6      	b.n	8001d4c <__gedf2+0x5c>
 8001dbe:	2002      	movs	r0, #2
 8001dc0:	4240      	negs	r0, r0
 8001dc2:	e7c3      	b.n	8001d4c <__gedf2+0x5c>
 8001dc4:	45c4      	cmp	ip, r8
 8001dc6:	d8bd      	bhi.n	8001d44 <__gedf2+0x54>
 8001dc8:	2000      	movs	r0, #0
 8001dca:	45c4      	cmp	ip, r8
 8001dcc:	d2be      	bcs.n	8001d4c <__gedf2+0x5c>
 8001dce:	e7eb      	b.n	8001da8 <__gedf2+0xb8>
 8001dd0:	000007ff 	.word	0x000007ff

08001dd4 <__ledf2>:
 8001dd4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001dd6:	464e      	mov	r6, r9
 8001dd8:	4645      	mov	r5, r8
 8001dda:	4657      	mov	r7, sl
 8001ddc:	46de      	mov	lr, fp
 8001dde:	0004      	movs	r4, r0
 8001de0:	0018      	movs	r0, r3
 8001de2:	b5e0      	push	{r5, r6, r7, lr}
 8001de4:	0016      	movs	r6, r2
 8001de6:	031b      	lsls	r3, r3, #12
 8001de8:	0b1b      	lsrs	r3, r3, #12
 8001dea:	4d31      	ldr	r5, [pc, #196]	; (8001eb0 <__ledf2+0xdc>)
 8001dec:	030f      	lsls	r7, r1, #12
 8001dee:	004a      	lsls	r2, r1, #1
 8001df0:	4699      	mov	r9, r3
 8001df2:	0043      	lsls	r3, r0, #1
 8001df4:	46a4      	mov	ip, r4
 8001df6:	46b0      	mov	r8, r6
 8001df8:	0b3f      	lsrs	r7, r7, #12
 8001dfa:	0d52      	lsrs	r2, r2, #21
 8001dfc:	0fc9      	lsrs	r1, r1, #31
 8001dfe:	0d5b      	lsrs	r3, r3, #21
 8001e00:	0fc0      	lsrs	r0, r0, #31
 8001e02:	42aa      	cmp	r2, r5
 8001e04:	d011      	beq.n	8001e2a <__ledf2+0x56>
 8001e06:	42ab      	cmp	r3, r5
 8001e08:	d014      	beq.n	8001e34 <__ledf2+0x60>
 8001e0a:	2a00      	cmp	r2, #0
 8001e0c:	d12f      	bne.n	8001e6e <__ledf2+0x9a>
 8001e0e:	433c      	orrs	r4, r7
 8001e10:	46a3      	mov	fp, r4
 8001e12:	4265      	negs	r5, r4
 8001e14:	4165      	adcs	r5, r4
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d114      	bne.n	8001e44 <__ledf2+0x70>
 8001e1a:	464c      	mov	r4, r9
 8001e1c:	4326      	orrs	r6, r4
 8001e1e:	d111      	bne.n	8001e44 <__ledf2+0x70>
 8001e20:	465b      	mov	r3, fp
 8001e22:	2000      	movs	r0, #0
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d017      	beq.n	8001e58 <__ledf2+0x84>
 8001e28:	e010      	b.n	8001e4c <__ledf2+0x78>
 8001e2a:	003d      	movs	r5, r7
 8001e2c:	4325      	orrs	r5, r4
 8001e2e:	d112      	bne.n	8001e56 <__ledf2+0x82>
 8001e30:	4293      	cmp	r3, r2
 8001e32:	d11c      	bne.n	8001e6e <__ledf2+0x9a>
 8001e34:	464d      	mov	r5, r9
 8001e36:	432e      	orrs	r6, r5
 8001e38:	d10d      	bne.n	8001e56 <__ledf2+0x82>
 8001e3a:	2a00      	cmp	r2, #0
 8001e3c:	d104      	bne.n	8001e48 <__ledf2+0x74>
 8001e3e:	433c      	orrs	r4, r7
 8001e40:	4265      	negs	r5, r4
 8001e42:	4165      	adcs	r5, r4
 8001e44:	2d00      	cmp	r5, #0
 8001e46:	d10d      	bne.n	8001e64 <__ledf2+0x90>
 8001e48:	4281      	cmp	r1, r0
 8001e4a:	d016      	beq.n	8001e7a <__ledf2+0xa6>
 8001e4c:	2002      	movs	r0, #2
 8001e4e:	3901      	subs	r1, #1
 8001e50:	4008      	ands	r0, r1
 8001e52:	3801      	subs	r0, #1
 8001e54:	e000      	b.n	8001e58 <__ledf2+0x84>
 8001e56:	2002      	movs	r0, #2
 8001e58:	bcf0      	pop	{r4, r5, r6, r7}
 8001e5a:	46bb      	mov	fp, r7
 8001e5c:	46b2      	mov	sl, r6
 8001e5e:	46a9      	mov	r9, r5
 8001e60:	46a0      	mov	r8, r4
 8001e62:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001e64:	2800      	cmp	r0, #0
 8001e66:	d1f7      	bne.n	8001e58 <__ledf2+0x84>
 8001e68:	2001      	movs	r0, #1
 8001e6a:	4240      	negs	r0, r0
 8001e6c:	e7f4      	b.n	8001e58 <__ledf2+0x84>
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d1ea      	bne.n	8001e48 <__ledf2+0x74>
 8001e72:	464c      	mov	r4, r9
 8001e74:	4326      	orrs	r6, r4
 8001e76:	d1e7      	bne.n	8001e48 <__ledf2+0x74>
 8001e78:	e7e8      	b.n	8001e4c <__ledf2+0x78>
 8001e7a:	429a      	cmp	r2, r3
 8001e7c:	dd06      	ble.n	8001e8c <__ledf2+0xb8>
 8001e7e:	4243      	negs	r3, r0
 8001e80:	4158      	adcs	r0, r3
 8001e82:	2302      	movs	r3, #2
 8001e84:	4240      	negs	r0, r0
 8001e86:	4018      	ands	r0, r3
 8001e88:	3801      	subs	r0, #1
 8001e8a:	e7e5      	b.n	8001e58 <__ledf2+0x84>
 8001e8c:	429a      	cmp	r2, r3
 8001e8e:	dbe9      	blt.n	8001e64 <__ledf2+0x90>
 8001e90:	454f      	cmp	r7, r9
 8001e92:	d8db      	bhi.n	8001e4c <__ledf2+0x78>
 8001e94:	d006      	beq.n	8001ea4 <__ledf2+0xd0>
 8001e96:	2000      	movs	r0, #0
 8001e98:	454f      	cmp	r7, r9
 8001e9a:	d2dd      	bcs.n	8001e58 <__ledf2+0x84>
 8001e9c:	2900      	cmp	r1, #0
 8001e9e:	d0e3      	beq.n	8001e68 <__ledf2+0x94>
 8001ea0:	0008      	movs	r0, r1
 8001ea2:	e7d9      	b.n	8001e58 <__ledf2+0x84>
 8001ea4:	45c4      	cmp	ip, r8
 8001ea6:	d8d1      	bhi.n	8001e4c <__ledf2+0x78>
 8001ea8:	2000      	movs	r0, #0
 8001eaa:	45c4      	cmp	ip, r8
 8001eac:	d2d4      	bcs.n	8001e58 <__ledf2+0x84>
 8001eae:	e7f5      	b.n	8001e9c <__ledf2+0xc8>
 8001eb0:	000007ff 	.word	0x000007ff

08001eb4 <__aeabi_dmul>:
 8001eb4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001eb6:	4657      	mov	r7, sl
 8001eb8:	464e      	mov	r6, r9
 8001eba:	4645      	mov	r5, r8
 8001ebc:	46de      	mov	lr, fp
 8001ebe:	b5e0      	push	{r5, r6, r7, lr}
 8001ec0:	4698      	mov	r8, r3
 8001ec2:	030c      	lsls	r4, r1, #12
 8001ec4:	004b      	lsls	r3, r1, #1
 8001ec6:	0006      	movs	r6, r0
 8001ec8:	4692      	mov	sl, r2
 8001eca:	b087      	sub	sp, #28
 8001ecc:	0b24      	lsrs	r4, r4, #12
 8001ece:	0d5b      	lsrs	r3, r3, #21
 8001ed0:	0fcf      	lsrs	r7, r1, #31
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d06c      	beq.n	8001fb0 <__aeabi_dmul+0xfc>
 8001ed6:	4add      	ldr	r2, [pc, #884]	; (800224c <__aeabi_dmul+0x398>)
 8001ed8:	4293      	cmp	r3, r2
 8001eda:	d100      	bne.n	8001ede <__aeabi_dmul+0x2a>
 8001edc:	e086      	b.n	8001fec <__aeabi_dmul+0x138>
 8001ede:	0f42      	lsrs	r2, r0, #29
 8001ee0:	00e4      	lsls	r4, r4, #3
 8001ee2:	4314      	orrs	r4, r2
 8001ee4:	2280      	movs	r2, #128	; 0x80
 8001ee6:	0412      	lsls	r2, r2, #16
 8001ee8:	4314      	orrs	r4, r2
 8001eea:	4ad9      	ldr	r2, [pc, #868]	; (8002250 <__aeabi_dmul+0x39c>)
 8001eec:	00c5      	lsls	r5, r0, #3
 8001eee:	4694      	mov	ip, r2
 8001ef0:	4463      	add	r3, ip
 8001ef2:	9300      	str	r3, [sp, #0]
 8001ef4:	2300      	movs	r3, #0
 8001ef6:	4699      	mov	r9, r3
 8001ef8:	469b      	mov	fp, r3
 8001efa:	4643      	mov	r3, r8
 8001efc:	4642      	mov	r2, r8
 8001efe:	031e      	lsls	r6, r3, #12
 8001f00:	0fd2      	lsrs	r2, r2, #31
 8001f02:	005b      	lsls	r3, r3, #1
 8001f04:	4650      	mov	r0, sl
 8001f06:	4690      	mov	r8, r2
 8001f08:	0b36      	lsrs	r6, r6, #12
 8001f0a:	0d5b      	lsrs	r3, r3, #21
 8001f0c:	d100      	bne.n	8001f10 <__aeabi_dmul+0x5c>
 8001f0e:	e078      	b.n	8002002 <__aeabi_dmul+0x14e>
 8001f10:	4ace      	ldr	r2, [pc, #824]	; (800224c <__aeabi_dmul+0x398>)
 8001f12:	4293      	cmp	r3, r2
 8001f14:	d01d      	beq.n	8001f52 <__aeabi_dmul+0x9e>
 8001f16:	49ce      	ldr	r1, [pc, #824]	; (8002250 <__aeabi_dmul+0x39c>)
 8001f18:	0f42      	lsrs	r2, r0, #29
 8001f1a:	468c      	mov	ip, r1
 8001f1c:	9900      	ldr	r1, [sp, #0]
 8001f1e:	4463      	add	r3, ip
 8001f20:	00f6      	lsls	r6, r6, #3
 8001f22:	468c      	mov	ip, r1
 8001f24:	4316      	orrs	r6, r2
 8001f26:	2280      	movs	r2, #128	; 0x80
 8001f28:	449c      	add	ip, r3
 8001f2a:	0412      	lsls	r2, r2, #16
 8001f2c:	4663      	mov	r3, ip
 8001f2e:	4316      	orrs	r6, r2
 8001f30:	00c2      	lsls	r2, r0, #3
 8001f32:	2000      	movs	r0, #0
 8001f34:	9300      	str	r3, [sp, #0]
 8001f36:	9900      	ldr	r1, [sp, #0]
 8001f38:	4643      	mov	r3, r8
 8001f3a:	3101      	adds	r1, #1
 8001f3c:	468c      	mov	ip, r1
 8001f3e:	4649      	mov	r1, r9
 8001f40:	407b      	eors	r3, r7
 8001f42:	9301      	str	r3, [sp, #4]
 8001f44:	290f      	cmp	r1, #15
 8001f46:	d900      	bls.n	8001f4a <__aeabi_dmul+0x96>
 8001f48:	e07e      	b.n	8002048 <__aeabi_dmul+0x194>
 8001f4a:	4bc2      	ldr	r3, [pc, #776]	; (8002254 <__aeabi_dmul+0x3a0>)
 8001f4c:	0089      	lsls	r1, r1, #2
 8001f4e:	5859      	ldr	r1, [r3, r1]
 8001f50:	468f      	mov	pc, r1
 8001f52:	4652      	mov	r2, sl
 8001f54:	9b00      	ldr	r3, [sp, #0]
 8001f56:	4332      	orrs	r2, r6
 8001f58:	d000      	beq.n	8001f5c <__aeabi_dmul+0xa8>
 8001f5a:	e156      	b.n	800220a <__aeabi_dmul+0x356>
 8001f5c:	49bb      	ldr	r1, [pc, #748]	; (800224c <__aeabi_dmul+0x398>)
 8001f5e:	2600      	movs	r6, #0
 8001f60:	468c      	mov	ip, r1
 8001f62:	4463      	add	r3, ip
 8001f64:	4649      	mov	r1, r9
 8001f66:	9300      	str	r3, [sp, #0]
 8001f68:	2302      	movs	r3, #2
 8001f6a:	4319      	orrs	r1, r3
 8001f6c:	4689      	mov	r9, r1
 8001f6e:	2002      	movs	r0, #2
 8001f70:	e7e1      	b.n	8001f36 <__aeabi_dmul+0x82>
 8001f72:	4643      	mov	r3, r8
 8001f74:	9301      	str	r3, [sp, #4]
 8001f76:	0034      	movs	r4, r6
 8001f78:	0015      	movs	r5, r2
 8001f7a:	4683      	mov	fp, r0
 8001f7c:	465b      	mov	r3, fp
 8001f7e:	2b02      	cmp	r3, #2
 8001f80:	d05e      	beq.n	8002040 <__aeabi_dmul+0x18c>
 8001f82:	2b03      	cmp	r3, #3
 8001f84:	d100      	bne.n	8001f88 <__aeabi_dmul+0xd4>
 8001f86:	e1f3      	b.n	8002370 <__aeabi_dmul+0x4bc>
 8001f88:	2b01      	cmp	r3, #1
 8001f8a:	d000      	beq.n	8001f8e <__aeabi_dmul+0xda>
 8001f8c:	e118      	b.n	80021c0 <__aeabi_dmul+0x30c>
 8001f8e:	2200      	movs	r2, #0
 8001f90:	2400      	movs	r4, #0
 8001f92:	2500      	movs	r5, #0
 8001f94:	9b01      	ldr	r3, [sp, #4]
 8001f96:	0512      	lsls	r2, r2, #20
 8001f98:	4322      	orrs	r2, r4
 8001f9a:	07db      	lsls	r3, r3, #31
 8001f9c:	431a      	orrs	r2, r3
 8001f9e:	0028      	movs	r0, r5
 8001fa0:	0011      	movs	r1, r2
 8001fa2:	b007      	add	sp, #28
 8001fa4:	bcf0      	pop	{r4, r5, r6, r7}
 8001fa6:	46bb      	mov	fp, r7
 8001fa8:	46b2      	mov	sl, r6
 8001faa:	46a9      	mov	r9, r5
 8001fac:	46a0      	mov	r8, r4
 8001fae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001fb0:	0025      	movs	r5, r4
 8001fb2:	4305      	orrs	r5, r0
 8001fb4:	d100      	bne.n	8001fb8 <__aeabi_dmul+0x104>
 8001fb6:	e141      	b.n	800223c <__aeabi_dmul+0x388>
 8001fb8:	2c00      	cmp	r4, #0
 8001fba:	d100      	bne.n	8001fbe <__aeabi_dmul+0x10a>
 8001fbc:	e1ad      	b.n	800231a <__aeabi_dmul+0x466>
 8001fbe:	0020      	movs	r0, r4
 8001fc0:	f000 fed2 	bl	8002d68 <__clzsi2>
 8001fc4:	0001      	movs	r1, r0
 8001fc6:	0002      	movs	r2, r0
 8001fc8:	390b      	subs	r1, #11
 8001fca:	231d      	movs	r3, #29
 8001fcc:	0010      	movs	r0, r2
 8001fce:	1a5b      	subs	r3, r3, r1
 8001fd0:	0031      	movs	r1, r6
 8001fd2:	0035      	movs	r5, r6
 8001fd4:	3808      	subs	r0, #8
 8001fd6:	4084      	lsls	r4, r0
 8001fd8:	40d9      	lsrs	r1, r3
 8001fda:	4085      	lsls	r5, r0
 8001fdc:	430c      	orrs	r4, r1
 8001fde:	489e      	ldr	r0, [pc, #632]	; (8002258 <__aeabi_dmul+0x3a4>)
 8001fe0:	1a83      	subs	r3, r0, r2
 8001fe2:	9300      	str	r3, [sp, #0]
 8001fe4:	2300      	movs	r3, #0
 8001fe6:	4699      	mov	r9, r3
 8001fe8:	469b      	mov	fp, r3
 8001fea:	e786      	b.n	8001efa <__aeabi_dmul+0x46>
 8001fec:	0005      	movs	r5, r0
 8001fee:	4325      	orrs	r5, r4
 8001ff0:	d000      	beq.n	8001ff4 <__aeabi_dmul+0x140>
 8001ff2:	e11c      	b.n	800222e <__aeabi_dmul+0x37a>
 8001ff4:	2208      	movs	r2, #8
 8001ff6:	9300      	str	r3, [sp, #0]
 8001ff8:	2302      	movs	r3, #2
 8001ffa:	2400      	movs	r4, #0
 8001ffc:	4691      	mov	r9, r2
 8001ffe:	469b      	mov	fp, r3
 8002000:	e77b      	b.n	8001efa <__aeabi_dmul+0x46>
 8002002:	4652      	mov	r2, sl
 8002004:	4332      	orrs	r2, r6
 8002006:	d100      	bne.n	800200a <__aeabi_dmul+0x156>
 8002008:	e10a      	b.n	8002220 <__aeabi_dmul+0x36c>
 800200a:	2e00      	cmp	r6, #0
 800200c:	d100      	bne.n	8002010 <__aeabi_dmul+0x15c>
 800200e:	e176      	b.n	80022fe <__aeabi_dmul+0x44a>
 8002010:	0030      	movs	r0, r6
 8002012:	f000 fea9 	bl	8002d68 <__clzsi2>
 8002016:	0002      	movs	r2, r0
 8002018:	3a0b      	subs	r2, #11
 800201a:	231d      	movs	r3, #29
 800201c:	0001      	movs	r1, r0
 800201e:	1a9b      	subs	r3, r3, r2
 8002020:	4652      	mov	r2, sl
 8002022:	3908      	subs	r1, #8
 8002024:	40da      	lsrs	r2, r3
 8002026:	408e      	lsls	r6, r1
 8002028:	4316      	orrs	r6, r2
 800202a:	4652      	mov	r2, sl
 800202c:	408a      	lsls	r2, r1
 800202e:	9b00      	ldr	r3, [sp, #0]
 8002030:	4989      	ldr	r1, [pc, #548]	; (8002258 <__aeabi_dmul+0x3a4>)
 8002032:	1a18      	subs	r0, r3, r0
 8002034:	0003      	movs	r3, r0
 8002036:	468c      	mov	ip, r1
 8002038:	4463      	add	r3, ip
 800203a:	2000      	movs	r0, #0
 800203c:	9300      	str	r3, [sp, #0]
 800203e:	e77a      	b.n	8001f36 <__aeabi_dmul+0x82>
 8002040:	2400      	movs	r4, #0
 8002042:	2500      	movs	r5, #0
 8002044:	4a81      	ldr	r2, [pc, #516]	; (800224c <__aeabi_dmul+0x398>)
 8002046:	e7a5      	b.n	8001f94 <__aeabi_dmul+0xe0>
 8002048:	0c2f      	lsrs	r7, r5, #16
 800204a:	042d      	lsls	r5, r5, #16
 800204c:	0c2d      	lsrs	r5, r5, #16
 800204e:	002b      	movs	r3, r5
 8002050:	0c11      	lsrs	r1, r2, #16
 8002052:	0412      	lsls	r2, r2, #16
 8002054:	0c12      	lsrs	r2, r2, #16
 8002056:	4353      	muls	r3, r2
 8002058:	4698      	mov	r8, r3
 800205a:	0013      	movs	r3, r2
 800205c:	0028      	movs	r0, r5
 800205e:	437b      	muls	r3, r7
 8002060:	4699      	mov	r9, r3
 8002062:	4348      	muls	r0, r1
 8002064:	4448      	add	r0, r9
 8002066:	4683      	mov	fp, r0
 8002068:	4640      	mov	r0, r8
 800206a:	000b      	movs	r3, r1
 800206c:	0c00      	lsrs	r0, r0, #16
 800206e:	4682      	mov	sl, r0
 8002070:	4658      	mov	r0, fp
 8002072:	437b      	muls	r3, r7
 8002074:	4450      	add	r0, sl
 8002076:	9302      	str	r3, [sp, #8]
 8002078:	4581      	cmp	r9, r0
 800207a:	d906      	bls.n	800208a <__aeabi_dmul+0x1d6>
 800207c:	469a      	mov	sl, r3
 800207e:	2380      	movs	r3, #128	; 0x80
 8002080:	025b      	lsls	r3, r3, #9
 8002082:	4699      	mov	r9, r3
 8002084:	44ca      	add	sl, r9
 8002086:	4653      	mov	r3, sl
 8002088:	9302      	str	r3, [sp, #8]
 800208a:	0c03      	lsrs	r3, r0, #16
 800208c:	469b      	mov	fp, r3
 800208e:	4643      	mov	r3, r8
 8002090:	041b      	lsls	r3, r3, #16
 8002092:	0400      	lsls	r0, r0, #16
 8002094:	0c1b      	lsrs	r3, r3, #16
 8002096:	4698      	mov	r8, r3
 8002098:	0003      	movs	r3, r0
 800209a:	4443      	add	r3, r8
 800209c:	9304      	str	r3, [sp, #16]
 800209e:	0c33      	lsrs	r3, r6, #16
 80020a0:	4699      	mov	r9, r3
 80020a2:	002b      	movs	r3, r5
 80020a4:	0436      	lsls	r6, r6, #16
 80020a6:	0c36      	lsrs	r6, r6, #16
 80020a8:	4373      	muls	r3, r6
 80020aa:	4698      	mov	r8, r3
 80020ac:	0033      	movs	r3, r6
 80020ae:	437b      	muls	r3, r7
 80020b0:	469a      	mov	sl, r3
 80020b2:	464b      	mov	r3, r9
 80020b4:	435d      	muls	r5, r3
 80020b6:	435f      	muls	r7, r3
 80020b8:	4643      	mov	r3, r8
 80020ba:	4455      	add	r5, sl
 80020bc:	0c18      	lsrs	r0, r3, #16
 80020be:	1940      	adds	r0, r0, r5
 80020c0:	4582      	cmp	sl, r0
 80020c2:	d903      	bls.n	80020cc <__aeabi_dmul+0x218>
 80020c4:	2380      	movs	r3, #128	; 0x80
 80020c6:	025b      	lsls	r3, r3, #9
 80020c8:	469a      	mov	sl, r3
 80020ca:	4457      	add	r7, sl
 80020cc:	0c05      	lsrs	r5, r0, #16
 80020ce:	19eb      	adds	r3, r5, r7
 80020d0:	9305      	str	r3, [sp, #20]
 80020d2:	4643      	mov	r3, r8
 80020d4:	041d      	lsls	r5, r3, #16
 80020d6:	0c2d      	lsrs	r5, r5, #16
 80020d8:	0400      	lsls	r0, r0, #16
 80020da:	1940      	adds	r0, r0, r5
 80020dc:	0c25      	lsrs	r5, r4, #16
 80020de:	0424      	lsls	r4, r4, #16
 80020e0:	0c24      	lsrs	r4, r4, #16
 80020e2:	0027      	movs	r7, r4
 80020e4:	4357      	muls	r7, r2
 80020e6:	436a      	muls	r2, r5
 80020e8:	4690      	mov	r8, r2
 80020ea:	002a      	movs	r2, r5
 80020ec:	0c3b      	lsrs	r3, r7, #16
 80020ee:	469a      	mov	sl, r3
 80020f0:	434a      	muls	r2, r1
 80020f2:	4361      	muls	r1, r4
 80020f4:	4441      	add	r1, r8
 80020f6:	4451      	add	r1, sl
 80020f8:	4483      	add	fp, r0
 80020fa:	4588      	cmp	r8, r1
 80020fc:	d903      	bls.n	8002106 <__aeabi_dmul+0x252>
 80020fe:	2380      	movs	r3, #128	; 0x80
 8002100:	025b      	lsls	r3, r3, #9
 8002102:	4698      	mov	r8, r3
 8002104:	4442      	add	r2, r8
 8002106:	043f      	lsls	r7, r7, #16
 8002108:	0c0b      	lsrs	r3, r1, #16
 800210a:	0c3f      	lsrs	r7, r7, #16
 800210c:	0409      	lsls	r1, r1, #16
 800210e:	19c9      	adds	r1, r1, r7
 8002110:	0027      	movs	r7, r4
 8002112:	4698      	mov	r8, r3
 8002114:	464b      	mov	r3, r9
 8002116:	4377      	muls	r7, r6
 8002118:	435c      	muls	r4, r3
 800211a:	436e      	muls	r6, r5
 800211c:	435d      	muls	r5, r3
 800211e:	0c3b      	lsrs	r3, r7, #16
 8002120:	4699      	mov	r9, r3
 8002122:	19a4      	adds	r4, r4, r6
 8002124:	444c      	add	r4, r9
 8002126:	4442      	add	r2, r8
 8002128:	9503      	str	r5, [sp, #12]
 800212a:	42a6      	cmp	r6, r4
 800212c:	d904      	bls.n	8002138 <__aeabi_dmul+0x284>
 800212e:	2380      	movs	r3, #128	; 0x80
 8002130:	025b      	lsls	r3, r3, #9
 8002132:	4698      	mov	r8, r3
 8002134:	4445      	add	r5, r8
 8002136:	9503      	str	r5, [sp, #12]
 8002138:	9b02      	ldr	r3, [sp, #8]
 800213a:	043f      	lsls	r7, r7, #16
 800213c:	445b      	add	r3, fp
 800213e:	001e      	movs	r6, r3
 8002140:	4283      	cmp	r3, r0
 8002142:	4180      	sbcs	r0, r0
 8002144:	0423      	lsls	r3, r4, #16
 8002146:	4698      	mov	r8, r3
 8002148:	9b05      	ldr	r3, [sp, #20]
 800214a:	0c3f      	lsrs	r7, r7, #16
 800214c:	4447      	add	r7, r8
 800214e:	4698      	mov	r8, r3
 8002150:	1876      	adds	r6, r6, r1
 8002152:	428e      	cmp	r6, r1
 8002154:	4189      	sbcs	r1, r1
 8002156:	4447      	add	r7, r8
 8002158:	4240      	negs	r0, r0
 800215a:	183d      	adds	r5, r7, r0
 800215c:	46a8      	mov	r8, r5
 800215e:	4693      	mov	fp, r2
 8002160:	4249      	negs	r1, r1
 8002162:	468a      	mov	sl, r1
 8002164:	44c3      	add	fp, r8
 8002166:	429f      	cmp	r7, r3
 8002168:	41bf      	sbcs	r7, r7
 800216a:	4580      	cmp	r8, r0
 800216c:	4180      	sbcs	r0, r0
 800216e:	9b03      	ldr	r3, [sp, #12]
 8002170:	44da      	add	sl, fp
 8002172:	4698      	mov	r8, r3
 8002174:	4653      	mov	r3, sl
 8002176:	4240      	negs	r0, r0
 8002178:	427f      	negs	r7, r7
 800217a:	4307      	orrs	r7, r0
 800217c:	0c24      	lsrs	r4, r4, #16
 800217e:	4593      	cmp	fp, r2
 8002180:	4192      	sbcs	r2, r2
 8002182:	458a      	cmp	sl, r1
 8002184:	4189      	sbcs	r1, r1
 8002186:	193f      	adds	r7, r7, r4
 8002188:	0ddc      	lsrs	r4, r3, #23
 800218a:	9b04      	ldr	r3, [sp, #16]
 800218c:	0275      	lsls	r5, r6, #9
 800218e:	431d      	orrs	r5, r3
 8002190:	1e68      	subs	r0, r5, #1
 8002192:	4185      	sbcs	r5, r0
 8002194:	4653      	mov	r3, sl
 8002196:	4252      	negs	r2, r2
 8002198:	4249      	negs	r1, r1
 800219a:	430a      	orrs	r2, r1
 800219c:	18bf      	adds	r7, r7, r2
 800219e:	4447      	add	r7, r8
 80021a0:	0df6      	lsrs	r6, r6, #23
 80021a2:	027f      	lsls	r7, r7, #9
 80021a4:	4335      	orrs	r5, r6
 80021a6:	025a      	lsls	r2, r3, #9
 80021a8:	433c      	orrs	r4, r7
 80021aa:	4315      	orrs	r5, r2
 80021ac:	01fb      	lsls	r3, r7, #7
 80021ae:	d400      	bmi.n	80021b2 <__aeabi_dmul+0x2fe>
 80021b0:	e0c1      	b.n	8002336 <__aeabi_dmul+0x482>
 80021b2:	2101      	movs	r1, #1
 80021b4:	086a      	lsrs	r2, r5, #1
 80021b6:	400d      	ands	r5, r1
 80021b8:	4315      	orrs	r5, r2
 80021ba:	07e2      	lsls	r2, r4, #31
 80021bc:	4315      	orrs	r5, r2
 80021be:	0864      	lsrs	r4, r4, #1
 80021c0:	4926      	ldr	r1, [pc, #152]	; (800225c <__aeabi_dmul+0x3a8>)
 80021c2:	4461      	add	r1, ip
 80021c4:	2900      	cmp	r1, #0
 80021c6:	dd56      	ble.n	8002276 <__aeabi_dmul+0x3c2>
 80021c8:	076b      	lsls	r3, r5, #29
 80021ca:	d009      	beq.n	80021e0 <__aeabi_dmul+0x32c>
 80021cc:	220f      	movs	r2, #15
 80021ce:	402a      	ands	r2, r5
 80021d0:	2a04      	cmp	r2, #4
 80021d2:	d005      	beq.n	80021e0 <__aeabi_dmul+0x32c>
 80021d4:	1d2a      	adds	r2, r5, #4
 80021d6:	42aa      	cmp	r2, r5
 80021d8:	41ad      	sbcs	r5, r5
 80021da:	426d      	negs	r5, r5
 80021dc:	1964      	adds	r4, r4, r5
 80021de:	0015      	movs	r5, r2
 80021e0:	01e3      	lsls	r3, r4, #7
 80021e2:	d504      	bpl.n	80021ee <__aeabi_dmul+0x33a>
 80021e4:	2180      	movs	r1, #128	; 0x80
 80021e6:	4a1e      	ldr	r2, [pc, #120]	; (8002260 <__aeabi_dmul+0x3ac>)
 80021e8:	00c9      	lsls	r1, r1, #3
 80021ea:	4014      	ands	r4, r2
 80021ec:	4461      	add	r1, ip
 80021ee:	4a1d      	ldr	r2, [pc, #116]	; (8002264 <__aeabi_dmul+0x3b0>)
 80021f0:	4291      	cmp	r1, r2
 80021f2:	dd00      	ble.n	80021f6 <__aeabi_dmul+0x342>
 80021f4:	e724      	b.n	8002040 <__aeabi_dmul+0x18c>
 80021f6:	0762      	lsls	r2, r4, #29
 80021f8:	08ed      	lsrs	r5, r5, #3
 80021fa:	0264      	lsls	r4, r4, #9
 80021fc:	0549      	lsls	r1, r1, #21
 80021fe:	4315      	orrs	r5, r2
 8002200:	0b24      	lsrs	r4, r4, #12
 8002202:	0d4a      	lsrs	r2, r1, #21
 8002204:	e6c6      	b.n	8001f94 <__aeabi_dmul+0xe0>
 8002206:	9701      	str	r7, [sp, #4]
 8002208:	e6b8      	b.n	8001f7c <__aeabi_dmul+0xc8>
 800220a:	4a10      	ldr	r2, [pc, #64]	; (800224c <__aeabi_dmul+0x398>)
 800220c:	2003      	movs	r0, #3
 800220e:	4694      	mov	ip, r2
 8002210:	4463      	add	r3, ip
 8002212:	464a      	mov	r2, r9
 8002214:	9300      	str	r3, [sp, #0]
 8002216:	2303      	movs	r3, #3
 8002218:	431a      	orrs	r2, r3
 800221a:	4691      	mov	r9, r2
 800221c:	4652      	mov	r2, sl
 800221e:	e68a      	b.n	8001f36 <__aeabi_dmul+0x82>
 8002220:	4649      	mov	r1, r9
 8002222:	2301      	movs	r3, #1
 8002224:	4319      	orrs	r1, r3
 8002226:	4689      	mov	r9, r1
 8002228:	2600      	movs	r6, #0
 800222a:	2001      	movs	r0, #1
 800222c:	e683      	b.n	8001f36 <__aeabi_dmul+0x82>
 800222e:	220c      	movs	r2, #12
 8002230:	9300      	str	r3, [sp, #0]
 8002232:	2303      	movs	r3, #3
 8002234:	0005      	movs	r5, r0
 8002236:	4691      	mov	r9, r2
 8002238:	469b      	mov	fp, r3
 800223a:	e65e      	b.n	8001efa <__aeabi_dmul+0x46>
 800223c:	2304      	movs	r3, #4
 800223e:	4699      	mov	r9, r3
 8002240:	2300      	movs	r3, #0
 8002242:	9300      	str	r3, [sp, #0]
 8002244:	3301      	adds	r3, #1
 8002246:	2400      	movs	r4, #0
 8002248:	469b      	mov	fp, r3
 800224a:	e656      	b.n	8001efa <__aeabi_dmul+0x46>
 800224c:	000007ff 	.word	0x000007ff
 8002250:	fffffc01 	.word	0xfffffc01
 8002254:	0800a470 	.word	0x0800a470
 8002258:	fffffc0d 	.word	0xfffffc0d
 800225c:	000003ff 	.word	0x000003ff
 8002260:	feffffff 	.word	0xfeffffff
 8002264:	000007fe 	.word	0x000007fe
 8002268:	2300      	movs	r3, #0
 800226a:	2480      	movs	r4, #128	; 0x80
 800226c:	2500      	movs	r5, #0
 800226e:	4a44      	ldr	r2, [pc, #272]	; (8002380 <__aeabi_dmul+0x4cc>)
 8002270:	9301      	str	r3, [sp, #4]
 8002272:	0324      	lsls	r4, r4, #12
 8002274:	e68e      	b.n	8001f94 <__aeabi_dmul+0xe0>
 8002276:	2001      	movs	r0, #1
 8002278:	1a40      	subs	r0, r0, r1
 800227a:	2838      	cmp	r0, #56	; 0x38
 800227c:	dd00      	ble.n	8002280 <__aeabi_dmul+0x3cc>
 800227e:	e686      	b.n	8001f8e <__aeabi_dmul+0xda>
 8002280:	281f      	cmp	r0, #31
 8002282:	dd5b      	ble.n	800233c <__aeabi_dmul+0x488>
 8002284:	221f      	movs	r2, #31
 8002286:	0023      	movs	r3, r4
 8002288:	4252      	negs	r2, r2
 800228a:	1a51      	subs	r1, r2, r1
 800228c:	40cb      	lsrs	r3, r1
 800228e:	0019      	movs	r1, r3
 8002290:	2820      	cmp	r0, #32
 8002292:	d003      	beq.n	800229c <__aeabi_dmul+0x3e8>
 8002294:	4a3b      	ldr	r2, [pc, #236]	; (8002384 <__aeabi_dmul+0x4d0>)
 8002296:	4462      	add	r2, ip
 8002298:	4094      	lsls	r4, r2
 800229a:	4325      	orrs	r5, r4
 800229c:	1e6a      	subs	r2, r5, #1
 800229e:	4195      	sbcs	r5, r2
 80022a0:	002a      	movs	r2, r5
 80022a2:	430a      	orrs	r2, r1
 80022a4:	2107      	movs	r1, #7
 80022a6:	000d      	movs	r5, r1
 80022a8:	2400      	movs	r4, #0
 80022aa:	4015      	ands	r5, r2
 80022ac:	4211      	tst	r1, r2
 80022ae:	d05b      	beq.n	8002368 <__aeabi_dmul+0x4b4>
 80022b0:	210f      	movs	r1, #15
 80022b2:	2400      	movs	r4, #0
 80022b4:	4011      	ands	r1, r2
 80022b6:	2904      	cmp	r1, #4
 80022b8:	d053      	beq.n	8002362 <__aeabi_dmul+0x4ae>
 80022ba:	1d11      	adds	r1, r2, #4
 80022bc:	4291      	cmp	r1, r2
 80022be:	4192      	sbcs	r2, r2
 80022c0:	4252      	negs	r2, r2
 80022c2:	18a4      	adds	r4, r4, r2
 80022c4:	000a      	movs	r2, r1
 80022c6:	0223      	lsls	r3, r4, #8
 80022c8:	d54b      	bpl.n	8002362 <__aeabi_dmul+0x4ae>
 80022ca:	2201      	movs	r2, #1
 80022cc:	2400      	movs	r4, #0
 80022ce:	2500      	movs	r5, #0
 80022d0:	e660      	b.n	8001f94 <__aeabi_dmul+0xe0>
 80022d2:	2380      	movs	r3, #128	; 0x80
 80022d4:	031b      	lsls	r3, r3, #12
 80022d6:	421c      	tst	r4, r3
 80022d8:	d009      	beq.n	80022ee <__aeabi_dmul+0x43a>
 80022da:	421e      	tst	r6, r3
 80022dc:	d107      	bne.n	80022ee <__aeabi_dmul+0x43a>
 80022de:	4333      	orrs	r3, r6
 80022e0:	031c      	lsls	r4, r3, #12
 80022e2:	4643      	mov	r3, r8
 80022e4:	0015      	movs	r5, r2
 80022e6:	0b24      	lsrs	r4, r4, #12
 80022e8:	4a25      	ldr	r2, [pc, #148]	; (8002380 <__aeabi_dmul+0x4cc>)
 80022ea:	9301      	str	r3, [sp, #4]
 80022ec:	e652      	b.n	8001f94 <__aeabi_dmul+0xe0>
 80022ee:	2280      	movs	r2, #128	; 0x80
 80022f0:	0312      	lsls	r2, r2, #12
 80022f2:	4314      	orrs	r4, r2
 80022f4:	0324      	lsls	r4, r4, #12
 80022f6:	4a22      	ldr	r2, [pc, #136]	; (8002380 <__aeabi_dmul+0x4cc>)
 80022f8:	0b24      	lsrs	r4, r4, #12
 80022fa:	9701      	str	r7, [sp, #4]
 80022fc:	e64a      	b.n	8001f94 <__aeabi_dmul+0xe0>
 80022fe:	f000 fd33 	bl	8002d68 <__clzsi2>
 8002302:	0003      	movs	r3, r0
 8002304:	001a      	movs	r2, r3
 8002306:	3215      	adds	r2, #21
 8002308:	3020      	adds	r0, #32
 800230a:	2a1c      	cmp	r2, #28
 800230c:	dc00      	bgt.n	8002310 <__aeabi_dmul+0x45c>
 800230e:	e684      	b.n	800201a <__aeabi_dmul+0x166>
 8002310:	4656      	mov	r6, sl
 8002312:	3b08      	subs	r3, #8
 8002314:	2200      	movs	r2, #0
 8002316:	409e      	lsls	r6, r3
 8002318:	e689      	b.n	800202e <__aeabi_dmul+0x17a>
 800231a:	f000 fd25 	bl	8002d68 <__clzsi2>
 800231e:	0001      	movs	r1, r0
 8002320:	0002      	movs	r2, r0
 8002322:	3115      	adds	r1, #21
 8002324:	3220      	adds	r2, #32
 8002326:	291c      	cmp	r1, #28
 8002328:	dc00      	bgt.n	800232c <__aeabi_dmul+0x478>
 800232a:	e64e      	b.n	8001fca <__aeabi_dmul+0x116>
 800232c:	0034      	movs	r4, r6
 800232e:	3808      	subs	r0, #8
 8002330:	2500      	movs	r5, #0
 8002332:	4084      	lsls	r4, r0
 8002334:	e653      	b.n	8001fde <__aeabi_dmul+0x12a>
 8002336:	9b00      	ldr	r3, [sp, #0]
 8002338:	469c      	mov	ip, r3
 800233a:	e741      	b.n	80021c0 <__aeabi_dmul+0x30c>
 800233c:	4912      	ldr	r1, [pc, #72]	; (8002388 <__aeabi_dmul+0x4d4>)
 800233e:	0022      	movs	r2, r4
 8002340:	4461      	add	r1, ip
 8002342:	002e      	movs	r6, r5
 8002344:	408d      	lsls	r5, r1
 8002346:	408a      	lsls	r2, r1
 8002348:	40c6      	lsrs	r6, r0
 800234a:	1e69      	subs	r1, r5, #1
 800234c:	418d      	sbcs	r5, r1
 800234e:	4332      	orrs	r2, r6
 8002350:	432a      	orrs	r2, r5
 8002352:	40c4      	lsrs	r4, r0
 8002354:	0753      	lsls	r3, r2, #29
 8002356:	d0b6      	beq.n	80022c6 <__aeabi_dmul+0x412>
 8002358:	210f      	movs	r1, #15
 800235a:	4011      	ands	r1, r2
 800235c:	2904      	cmp	r1, #4
 800235e:	d1ac      	bne.n	80022ba <__aeabi_dmul+0x406>
 8002360:	e7b1      	b.n	80022c6 <__aeabi_dmul+0x412>
 8002362:	0765      	lsls	r5, r4, #29
 8002364:	0264      	lsls	r4, r4, #9
 8002366:	0b24      	lsrs	r4, r4, #12
 8002368:	08d2      	lsrs	r2, r2, #3
 800236a:	4315      	orrs	r5, r2
 800236c:	2200      	movs	r2, #0
 800236e:	e611      	b.n	8001f94 <__aeabi_dmul+0xe0>
 8002370:	2280      	movs	r2, #128	; 0x80
 8002372:	0312      	lsls	r2, r2, #12
 8002374:	4314      	orrs	r4, r2
 8002376:	0324      	lsls	r4, r4, #12
 8002378:	4a01      	ldr	r2, [pc, #4]	; (8002380 <__aeabi_dmul+0x4cc>)
 800237a:	0b24      	lsrs	r4, r4, #12
 800237c:	e60a      	b.n	8001f94 <__aeabi_dmul+0xe0>
 800237e:	46c0      	nop			; (mov r8, r8)
 8002380:	000007ff 	.word	0x000007ff
 8002384:	0000043e 	.word	0x0000043e
 8002388:	0000041e 	.word	0x0000041e

0800238c <__aeabi_dsub>:
 800238c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800238e:	4657      	mov	r7, sl
 8002390:	464e      	mov	r6, r9
 8002392:	4645      	mov	r5, r8
 8002394:	46de      	mov	lr, fp
 8002396:	0004      	movs	r4, r0
 8002398:	b5e0      	push	{r5, r6, r7, lr}
 800239a:	001f      	movs	r7, r3
 800239c:	0010      	movs	r0, r2
 800239e:	030b      	lsls	r3, r1, #12
 80023a0:	0f62      	lsrs	r2, r4, #29
 80023a2:	004e      	lsls	r6, r1, #1
 80023a4:	0fcd      	lsrs	r5, r1, #31
 80023a6:	0a5b      	lsrs	r3, r3, #9
 80023a8:	0339      	lsls	r1, r7, #12
 80023aa:	4313      	orrs	r3, r2
 80023ac:	0a49      	lsrs	r1, r1, #9
 80023ae:	00e2      	lsls	r2, r4, #3
 80023b0:	0f44      	lsrs	r4, r0, #29
 80023b2:	4321      	orrs	r1, r4
 80023b4:	4cc2      	ldr	r4, [pc, #776]	; (80026c0 <__aeabi_dsub+0x334>)
 80023b6:	4691      	mov	r9, r2
 80023b8:	4692      	mov	sl, r2
 80023ba:	00c0      	lsls	r0, r0, #3
 80023bc:	007a      	lsls	r2, r7, #1
 80023be:	4680      	mov	r8, r0
 80023c0:	0d76      	lsrs	r6, r6, #21
 80023c2:	0d52      	lsrs	r2, r2, #21
 80023c4:	0fff      	lsrs	r7, r7, #31
 80023c6:	42a2      	cmp	r2, r4
 80023c8:	d100      	bne.n	80023cc <__aeabi_dsub+0x40>
 80023ca:	e0b4      	b.n	8002536 <__aeabi_dsub+0x1aa>
 80023cc:	2401      	movs	r4, #1
 80023ce:	4067      	eors	r7, r4
 80023d0:	46bb      	mov	fp, r7
 80023d2:	42bd      	cmp	r5, r7
 80023d4:	d100      	bne.n	80023d8 <__aeabi_dsub+0x4c>
 80023d6:	e088      	b.n	80024ea <__aeabi_dsub+0x15e>
 80023d8:	1ab4      	subs	r4, r6, r2
 80023da:	46a4      	mov	ip, r4
 80023dc:	2c00      	cmp	r4, #0
 80023de:	dc00      	bgt.n	80023e2 <__aeabi_dsub+0x56>
 80023e0:	e0b2      	b.n	8002548 <__aeabi_dsub+0x1bc>
 80023e2:	2a00      	cmp	r2, #0
 80023e4:	d100      	bne.n	80023e8 <__aeabi_dsub+0x5c>
 80023e6:	e0c5      	b.n	8002574 <__aeabi_dsub+0x1e8>
 80023e8:	4ab5      	ldr	r2, [pc, #724]	; (80026c0 <__aeabi_dsub+0x334>)
 80023ea:	4296      	cmp	r6, r2
 80023ec:	d100      	bne.n	80023f0 <__aeabi_dsub+0x64>
 80023ee:	e28b      	b.n	8002908 <__aeabi_dsub+0x57c>
 80023f0:	2280      	movs	r2, #128	; 0x80
 80023f2:	0412      	lsls	r2, r2, #16
 80023f4:	4311      	orrs	r1, r2
 80023f6:	4662      	mov	r2, ip
 80023f8:	2a38      	cmp	r2, #56	; 0x38
 80023fa:	dd00      	ble.n	80023fe <__aeabi_dsub+0x72>
 80023fc:	e1a1      	b.n	8002742 <__aeabi_dsub+0x3b6>
 80023fe:	2a1f      	cmp	r2, #31
 8002400:	dd00      	ble.n	8002404 <__aeabi_dsub+0x78>
 8002402:	e216      	b.n	8002832 <__aeabi_dsub+0x4a6>
 8002404:	2720      	movs	r7, #32
 8002406:	000c      	movs	r4, r1
 8002408:	1abf      	subs	r7, r7, r2
 800240a:	40bc      	lsls	r4, r7
 800240c:	0002      	movs	r2, r0
 800240e:	46a0      	mov	r8, r4
 8002410:	4664      	mov	r4, ip
 8002412:	40b8      	lsls	r0, r7
 8002414:	40e2      	lsrs	r2, r4
 8002416:	4644      	mov	r4, r8
 8002418:	4314      	orrs	r4, r2
 800241a:	0002      	movs	r2, r0
 800241c:	1e50      	subs	r0, r2, #1
 800241e:	4182      	sbcs	r2, r0
 8002420:	4660      	mov	r0, ip
 8002422:	40c1      	lsrs	r1, r0
 8002424:	4322      	orrs	r2, r4
 8002426:	1a5b      	subs	r3, r3, r1
 8002428:	4649      	mov	r1, r9
 800242a:	1a8c      	subs	r4, r1, r2
 800242c:	45a1      	cmp	r9, r4
 800242e:	4192      	sbcs	r2, r2
 8002430:	4252      	negs	r2, r2
 8002432:	1a9b      	subs	r3, r3, r2
 8002434:	4698      	mov	r8, r3
 8002436:	4643      	mov	r3, r8
 8002438:	021b      	lsls	r3, r3, #8
 800243a:	d400      	bmi.n	800243e <__aeabi_dsub+0xb2>
 800243c:	e117      	b.n	800266e <__aeabi_dsub+0x2e2>
 800243e:	4643      	mov	r3, r8
 8002440:	025b      	lsls	r3, r3, #9
 8002442:	0a5b      	lsrs	r3, r3, #9
 8002444:	4698      	mov	r8, r3
 8002446:	4643      	mov	r3, r8
 8002448:	2b00      	cmp	r3, #0
 800244a:	d100      	bne.n	800244e <__aeabi_dsub+0xc2>
 800244c:	e16c      	b.n	8002728 <__aeabi_dsub+0x39c>
 800244e:	4640      	mov	r0, r8
 8002450:	f000 fc8a 	bl	8002d68 <__clzsi2>
 8002454:	0002      	movs	r2, r0
 8002456:	3a08      	subs	r2, #8
 8002458:	2120      	movs	r1, #32
 800245a:	0020      	movs	r0, r4
 800245c:	4643      	mov	r3, r8
 800245e:	1a89      	subs	r1, r1, r2
 8002460:	4093      	lsls	r3, r2
 8002462:	40c8      	lsrs	r0, r1
 8002464:	4094      	lsls	r4, r2
 8002466:	4303      	orrs	r3, r0
 8002468:	4296      	cmp	r6, r2
 800246a:	dd00      	ble.n	800246e <__aeabi_dsub+0xe2>
 800246c:	e157      	b.n	800271e <__aeabi_dsub+0x392>
 800246e:	1b96      	subs	r6, r2, r6
 8002470:	1c71      	adds	r1, r6, #1
 8002472:	291f      	cmp	r1, #31
 8002474:	dd00      	ble.n	8002478 <__aeabi_dsub+0xec>
 8002476:	e1cb      	b.n	8002810 <__aeabi_dsub+0x484>
 8002478:	2220      	movs	r2, #32
 800247a:	0018      	movs	r0, r3
 800247c:	0026      	movs	r6, r4
 800247e:	1a52      	subs	r2, r2, r1
 8002480:	4094      	lsls	r4, r2
 8002482:	4090      	lsls	r0, r2
 8002484:	40ce      	lsrs	r6, r1
 8002486:	40cb      	lsrs	r3, r1
 8002488:	1e62      	subs	r2, r4, #1
 800248a:	4194      	sbcs	r4, r2
 800248c:	4330      	orrs	r0, r6
 800248e:	4698      	mov	r8, r3
 8002490:	2600      	movs	r6, #0
 8002492:	4304      	orrs	r4, r0
 8002494:	0763      	lsls	r3, r4, #29
 8002496:	d009      	beq.n	80024ac <__aeabi_dsub+0x120>
 8002498:	230f      	movs	r3, #15
 800249a:	4023      	ands	r3, r4
 800249c:	2b04      	cmp	r3, #4
 800249e:	d005      	beq.n	80024ac <__aeabi_dsub+0x120>
 80024a0:	1d23      	adds	r3, r4, #4
 80024a2:	42a3      	cmp	r3, r4
 80024a4:	41a4      	sbcs	r4, r4
 80024a6:	4264      	negs	r4, r4
 80024a8:	44a0      	add	r8, r4
 80024aa:	001c      	movs	r4, r3
 80024ac:	4643      	mov	r3, r8
 80024ae:	021b      	lsls	r3, r3, #8
 80024b0:	d400      	bmi.n	80024b4 <__aeabi_dsub+0x128>
 80024b2:	e0df      	b.n	8002674 <__aeabi_dsub+0x2e8>
 80024b4:	4b82      	ldr	r3, [pc, #520]	; (80026c0 <__aeabi_dsub+0x334>)
 80024b6:	3601      	adds	r6, #1
 80024b8:	429e      	cmp	r6, r3
 80024ba:	d100      	bne.n	80024be <__aeabi_dsub+0x132>
 80024bc:	e0fb      	b.n	80026b6 <__aeabi_dsub+0x32a>
 80024be:	4642      	mov	r2, r8
 80024c0:	4b80      	ldr	r3, [pc, #512]	; (80026c4 <__aeabi_dsub+0x338>)
 80024c2:	08e4      	lsrs	r4, r4, #3
 80024c4:	401a      	ands	r2, r3
 80024c6:	0013      	movs	r3, r2
 80024c8:	0571      	lsls	r1, r6, #21
 80024ca:	0752      	lsls	r2, r2, #29
 80024cc:	025b      	lsls	r3, r3, #9
 80024ce:	4322      	orrs	r2, r4
 80024d0:	0b1b      	lsrs	r3, r3, #12
 80024d2:	0d49      	lsrs	r1, r1, #21
 80024d4:	0509      	lsls	r1, r1, #20
 80024d6:	07ed      	lsls	r5, r5, #31
 80024d8:	4319      	orrs	r1, r3
 80024da:	4329      	orrs	r1, r5
 80024dc:	0010      	movs	r0, r2
 80024de:	bcf0      	pop	{r4, r5, r6, r7}
 80024e0:	46bb      	mov	fp, r7
 80024e2:	46b2      	mov	sl, r6
 80024e4:	46a9      	mov	r9, r5
 80024e6:	46a0      	mov	r8, r4
 80024e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80024ea:	1ab4      	subs	r4, r6, r2
 80024ec:	46a4      	mov	ip, r4
 80024ee:	2c00      	cmp	r4, #0
 80024f0:	dd58      	ble.n	80025a4 <__aeabi_dsub+0x218>
 80024f2:	2a00      	cmp	r2, #0
 80024f4:	d100      	bne.n	80024f8 <__aeabi_dsub+0x16c>
 80024f6:	e09e      	b.n	8002636 <__aeabi_dsub+0x2aa>
 80024f8:	4a71      	ldr	r2, [pc, #452]	; (80026c0 <__aeabi_dsub+0x334>)
 80024fa:	4296      	cmp	r6, r2
 80024fc:	d100      	bne.n	8002500 <__aeabi_dsub+0x174>
 80024fe:	e13b      	b.n	8002778 <__aeabi_dsub+0x3ec>
 8002500:	2280      	movs	r2, #128	; 0x80
 8002502:	0412      	lsls	r2, r2, #16
 8002504:	4311      	orrs	r1, r2
 8002506:	4662      	mov	r2, ip
 8002508:	2a38      	cmp	r2, #56	; 0x38
 800250a:	dd00      	ble.n	800250e <__aeabi_dsub+0x182>
 800250c:	e0c1      	b.n	8002692 <__aeabi_dsub+0x306>
 800250e:	2a1f      	cmp	r2, #31
 8002510:	dc00      	bgt.n	8002514 <__aeabi_dsub+0x188>
 8002512:	e1bb      	b.n	800288c <__aeabi_dsub+0x500>
 8002514:	000c      	movs	r4, r1
 8002516:	3a20      	subs	r2, #32
 8002518:	40d4      	lsrs	r4, r2
 800251a:	0022      	movs	r2, r4
 800251c:	4664      	mov	r4, ip
 800251e:	2c20      	cmp	r4, #32
 8002520:	d004      	beq.n	800252c <__aeabi_dsub+0x1a0>
 8002522:	2740      	movs	r7, #64	; 0x40
 8002524:	1b3f      	subs	r7, r7, r4
 8002526:	40b9      	lsls	r1, r7
 8002528:	4308      	orrs	r0, r1
 800252a:	4680      	mov	r8, r0
 800252c:	4644      	mov	r4, r8
 800252e:	1e61      	subs	r1, r4, #1
 8002530:	418c      	sbcs	r4, r1
 8002532:	4314      	orrs	r4, r2
 8002534:	e0b1      	b.n	800269a <__aeabi_dsub+0x30e>
 8002536:	000c      	movs	r4, r1
 8002538:	4304      	orrs	r4, r0
 800253a:	d02a      	beq.n	8002592 <__aeabi_dsub+0x206>
 800253c:	46bb      	mov	fp, r7
 800253e:	42bd      	cmp	r5, r7
 8002540:	d02d      	beq.n	800259e <__aeabi_dsub+0x212>
 8002542:	4c61      	ldr	r4, [pc, #388]	; (80026c8 <__aeabi_dsub+0x33c>)
 8002544:	46a4      	mov	ip, r4
 8002546:	44b4      	add	ip, r6
 8002548:	4664      	mov	r4, ip
 800254a:	2c00      	cmp	r4, #0
 800254c:	d05c      	beq.n	8002608 <__aeabi_dsub+0x27c>
 800254e:	1b94      	subs	r4, r2, r6
 8002550:	46a4      	mov	ip, r4
 8002552:	2e00      	cmp	r6, #0
 8002554:	d000      	beq.n	8002558 <__aeabi_dsub+0x1cc>
 8002556:	e115      	b.n	8002784 <__aeabi_dsub+0x3f8>
 8002558:	464d      	mov	r5, r9
 800255a:	431d      	orrs	r5, r3
 800255c:	d100      	bne.n	8002560 <__aeabi_dsub+0x1d4>
 800255e:	e1c3      	b.n	80028e8 <__aeabi_dsub+0x55c>
 8002560:	1e65      	subs	r5, r4, #1
 8002562:	2c01      	cmp	r4, #1
 8002564:	d100      	bne.n	8002568 <__aeabi_dsub+0x1dc>
 8002566:	e20c      	b.n	8002982 <__aeabi_dsub+0x5f6>
 8002568:	4e55      	ldr	r6, [pc, #340]	; (80026c0 <__aeabi_dsub+0x334>)
 800256a:	42b4      	cmp	r4, r6
 800256c:	d100      	bne.n	8002570 <__aeabi_dsub+0x1e4>
 800256e:	e1f8      	b.n	8002962 <__aeabi_dsub+0x5d6>
 8002570:	46ac      	mov	ip, r5
 8002572:	e10e      	b.n	8002792 <__aeabi_dsub+0x406>
 8002574:	000a      	movs	r2, r1
 8002576:	4302      	orrs	r2, r0
 8002578:	d100      	bne.n	800257c <__aeabi_dsub+0x1f0>
 800257a:	e136      	b.n	80027ea <__aeabi_dsub+0x45e>
 800257c:	0022      	movs	r2, r4
 800257e:	3a01      	subs	r2, #1
 8002580:	2c01      	cmp	r4, #1
 8002582:	d100      	bne.n	8002586 <__aeabi_dsub+0x1fa>
 8002584:	e1c6      	b.n	8002914 <__aeabi_dsub+0x588>
 8002586:	4c4e      	ldr	r4, [pc, #312]	; (80026c0 <__aeabi_dsub+0x334>)
 8002588:	45a4      	cmp	ip, r4
 800258a:	d100      	bne.n	800258e <__aeabi_dsub+0x202>
 800258c:	e0f4      	b.n	8002778 <__aeabi_dsub+0x3ec>
 800258e:	4694      	mov	ip, r2
 8002590:	e731      	b.n	80023f6 <__aeabi_dsub+0x6a>
 8002592:	2401      	movs	r4, #1
 8002594:	4067      	eors	r7, r4
 8002596:	46bb      	mov	fp, r7
 8002598:	42bd      	cmp	r5, r7
 800259a:	d000      	beq.n	800259e <__aeabi_dsub+0x212>
 800259c:	e71c      	b.n	80023d8 <__aeabi_dsub+0x4c>
 800259e:	4c4a      	ldr	r4, [pc, #296]	; (80026c8 <__aeabi_dsub+0x33c>)
 80025a0:	46a4      	mov	ip, r4
 80025a2:	44b4      	add	ip, r6
 80025a4:	4664      	mov	r4, ip
 80025a6:	2c00      	cmp	r4, #0
 80025a8:	d100      	bne.n	80025ac <__aeabi_dsub+0x220>
 80025aa:	e0cf      	b.n	800274c <__aeabi_dsub+0x3c0>
 80025ac:	1b94      	subs	r4, r2, r6
 80025ae:	46a4      	mov	ip, r4
 80025b0:	2e00      	cmp	r6, #0
 80025b2:	d100      	bne.n	80025b6 <__aeabi_dsub+0x22a>
 80025b4:	e15c      	b.n	8002870 <__aeabi_dsub+0x4e4>
 80025b6:	4e42      	ldr	r6, [pc, #264]	; (80026c0 <__aeabi_dsub+0x334>)
 80025b8:	42b2      	cmp	r2, r6
 80025ba:	d100      	bne.n	80025be <__aeabi_dsub+0x232>
 80025bc:	e1ec      	b.n	8002998 <__aeabi_dsub+0x60c>
 80025be:	2680      	movs	r6, #128	; 0x80
 80025c0:	0436      	lsls	r6, r6, #16
 80025c2:	4333      	orrs	r3, r6
 80025c4:	4664      	mov	r4, ip
 80025c6:	2c38      	cmp	r4, #56	; 0x38
 80025c8:	dd00      	ble.n	80025cc <__aeabi_dsub+0x240>
 80025ca:	e1b3      	b.n	8002934 <__aeabi_dsub+0x5a8>
 80025cc:	2c1f      	cmp	r4, #31
 80025ce:	dd00      	ble.n	80025d2 <__aeabi_dsub+0x246>
 80025d0:	e238      	b.n	8002a44 <__aeabi_dsub+0x6b8>
 80025d2:	2620      	movs	r6, #32
 80025d4:	1b36      	subs	r6, r6, r4
 80025d6:	001c      	movs	r4, r3
 80025d8:	40b4      	lsls	r4, r6
 80025da:	464f      	mov	r7, r9
 80025dc:	46a0      	mov	r8, r4
 80025de:	4664      	mov	r4, ip
 80025e0:	40e7      	lsrs	r7, r4
 80025e2:	4644      	mov	r4, r8
 80025e4:	433c      	orrs	r4, r7
 80025e6:	464f      	mov	r7, r9
 80025e8:	40b7      	lsls	r7, r6
 80025ea:	003e      	movs	r6, r7
 80025ec:	1e77      	subs	r7, r6, #1
 80025ee:	41be      	sbcs	r6, r7
 80025f0:	4334      	orrs	r4, r6
 80025f2:	4666      	mov	r6, ip
 80025f4:	40f3      	lsrs	r3, r6
 80025f6:	18c9      	adds	r1, r1, r3
 80025f8:	1824      	adds	r4, r4, r0
 80025fa:	4284      	cmp	r4, r0
 80025fc:	419b      	sbcs	r3, r3
 80025fe:	425b      	negs	r3, r3
 8002600:	4698      	mov	r8, r3
 8002602:	0016      	movs	r6, r2
 8002604:	4488      	add	r8, r1
 8002606:	e04e      	b.n	80026a6 <__aeabi_dsub+0x31a>
 8002608:	4a30      	ldr	r2, [pc, #192]	; (80026cc <__aeabi_dsub+0x340>)
 800260a:	1c74      	adds	r4, r6, #1
 800260c:	4214      	tst	r4, r2
 800260e:	d000      	beq.n	8002612 <__aeabi_dsub+0x286>
 8002610:	e0d6      	b.n	80027c0 <__aeabi_dsub+0x434>
 8002612:	464a      	mov	r2, r9
 8002614:	431a      	orrs	r2, r3
 8002616:	2e00      	cmp	r6, #0
 8002618:	d000      	beq.n	800261c <__aeabi_dsub+0x290>
 800261a:	e15b      	b.n	80028d4 <__aeabi_dsub+0x548>
 800261c:	2a00      	cmp	r2, #0
 800261e:	d100      	bne.n	8002622 <__aeabi_dsub+0x296>
 8002620:	e1a5      	b.n	800296e <__aeabi_dsub+0x5e2>
 8002622:	000a      	movs	r2, r1
 8002624:	4302      	orrs	r2, r0
 8002626:	d000      	beq.n	800262a <__aeabi_dsub+0x29e>
 8002628:	e1bb      	b.n	80029a2 <__aeabi_dsub+0x616>
 800262a:	464a      	mov	r2, r9
 800262c:	0759      	lsls	r1, r3, #29
 800262e:	08d2      	lsrs	r2, r2, #3
 8002630:	430a      	orrs	r2, r1
 8002632:	08db      	lsrs	r3, r3, #3
 8002634:	e027      	b.n	8002686 <__aeabi_dsub+0x2fa>
 8002636:	000a      	movs	r2, r1
 8002638:	4302      	orrs	r2, r0
 800263a:	d100      	bne.n	800263e <__aeabi_dsub+0x2b2>
 800263c:	e174      	b.n	8002928 <__aeabi_dsub+0x59c>
 800263e:	0022      	movs	r2, r4
 8002640:	3a01      	subs	r2, #1
 8002642:	2c01      	cmp	r4, #1
 8002644:	d005      	beq.n	8002652 <__aeabi_dsub+0x2c6>
 8002646:	4c1e      	ldr	r4, [pc, #120]	; (80026c0 <__aeabi_dsub+0x334>)
 8002648:	45a4      	cmp	ip, r4
 800264a:	d100      	bne.n	800264e <__aeabi_dsub+0x2c2>
 800264c:	e094      	b.n	8002778 <__aeabi_dsub+0x3ec>
 800264e:	4694      	mov	ip, r2
 8002650:	e759      	b.n	8002506 <__aeabi_dsub+0x17a>
 8002652:	4448      	add	r0, r9
 8002654:	4548      	cmp	r0, r9
 8002656:	4192      	sbcs	r2, r2
 8002658:	185b      	adds	r3, r3, r1
 800265a:	4698      	mov	r8, r3
 800265c:	0004      	movs	r4, r0
 800265e:	4252      	negs	r2, r2
 8002660:	4490      	add	r8, r2
 8002662:	4643      	mov	r3, r8
 8002664:	2602      	movs	r6, #2
 8002666:	021b      	lsls	r3, r3, #8
 8002668:	d500      	bpl.n	800266c <__aeabi_dsub+0x2e0>
 800266a:	e0c4      	b.n	80027f6 <__aeabi_dsub+0x46a>
 800266c:	3e01      	subs	r6, #1
 800266e:	0763      	lsls	r3, r4, #29
 8002670:	d000      	beq.n	8002674 <__aeabi_dsub+0x2e8>
 8002672:	e711      	b.n	8002498 <__aeabi_dsub+0x10c>
 8002674:	4643      	mov	r3, r8
 8002676:	46b4      	mov	ip, r6
 8002678:	0759      	lsls	r1, r3, #29
 800267a:	08e2      	lsrs	r2, r4, #3
 800267c:	430a      	orrs	r2, r1
 800267e:	08db      	lsrs	r3, r3, #3
 8002680:	490f      	ldr	r1, [pc, #60]	; (80026c0 <__aeabi_dsub+0x334>)
 8002682:	458c      	cmp	ip, r1
 8002684:	d040      	beq.n	8002708 <__aeabi_dsub+0x37c>
 8002686:	4661      	mov	r1, ip
 8002688:	031b      	lsls	r3, r3, #12
 800268a:	0549      	lsls	r1, r1, #21
 800268c:	0b1b      	lsrs	r3, r3, #12
 800268e:	0d49      	lsrs	r1, r1, #21
 8002690:	e720      	b.n	80024d4 <__aeabi_dsub+0x148>
 8002692:	4301      	orrs	r1, r0
 8002694:	000c      	movs	r4, r1
 8002696:	1e61      	subs	r1, r4, #1
 8002698:	418c      	sbcs	r4, r1
 800269a:	444c      	add	r4, r9
 800269c:	454c      	cmp	r4, r9
 800269e:	4192      	sbcs	r2, r2
 80026a0:	4252      	negs	r2, r2
 80026a2:	4690      	mov	r8, r2
 80026a4:	4498      	add	r8, r3
 80026a6:	4643      	mov	r3, r8
 80026a8:	021b      	lsls	r3, r3, #8
 80026aa:	d5e0      	bpl.n	800266e <__aeabi_dsub+0x2e2>
 80026ac:	4b04      	ldr	r3, [pc, #16]	; (80026c0 <__aeabi_dsub+0x334>)
 80026ae:	3601      	adds	r6, #1
 80026b0:	429e      	cmp	r6, r3
 80026b2:	d000      	beq.n	80026b6 <__aeabi_dsub+0x32a>
 80026b4:	e09f      	b.n	80027f6 <__aeabi_dsub+0x46a>
 80026b6:	0031      	movs	r1, r6
 80026b8:	2300      	movs	r3, #0
 80026ba:	2200      	movs	r2, #0
 80026bc:	e70a      	b.n	80024d4 <__aeabi_dsub+0x148>
 80026be:	46c0      	nop			; (mov r8, r8)
 80026c0:	000007ff 	.word	0x000007ff
 80026c4:	ff7fffff 	.word	0xff7fffff
 80026c8:	fffff801 	.word	0xfffff801
 80026cc:	000007fe 	.word	0x000007fe
 80026d0:	2a00      	cmp	r2, #0
 80026d2:	d100      	bne.n	80026d6 <__aeabi_dsub+0x34a>
 80026d4:	e160      	b.n	8002998 <__aeabi_dsub+0x60c>
 80026d6:	000a      	movs	r2, r1
 80026d8:	4302      	orrs	r2, r0
 80026da:	d04d      	beq.n	8002778 <__aeabi_dsub+0x3ec>
 80026dc:	464a      	mov	r2, r9
 80026de:	075c      	lsls	r4, r3, #29
 80026e0:	08d2      	lsrs	r2, r2, #3
 80026e2:	4322      	orrs	r2, r4
 80026e4:	2480      	movs	r4, #128	; 0x80
 80026e6:	08db      	lsrs	r3, r3, #3
 80026e8:	0324      	lsls	r4, r4, #12
 80026ea:	4223      	tst	r3, r4
 80026ec:	d007      	beq.n	80026fe <__aeabi_dsub+0x372>
 80026ee:	08ce      	lsrs	r6, r1, #3
 80026f0:	4226      	tst	r6, r4
 80026f2:	d104      	bne.n	80026fe <__aeabi_dsub+0x372>
 80026f4:	465d      	mov	r5, fp
 80026f6:	0033      	movs	r3, r6
 80026f8:	08c2      	lsrs	r2, r0, #3
 80026fa:	0749      	lsls	r1, r1, #29
 80026fc:	430a      	orrs	r2, r1
 80026fe:	0f51      	lsrs	r1, r2, #29
 8002700:	00d2      	lsls	r2, r2, #3
 8002702:	08d2      	lsrs	r2, r2, #3
 8002704:	0749      	lsls	r1, r1, #29
 8002706:	430a      	orrs	r2, r1
 8002708:	0011      	movs	r1, r2
 800270a:	4319      	orrs	r1, r3
 800270c:	d100      	bne.n	8002710 <__aeabi_dsub+0x384>
 800270e:	e1c8      	b.n	8002aa2 <__aeabi_dsub+0x716>
 8002710:	2180      	movs	r1, #128	; 0x80
 8002712:	0309      	lsls	r1, r1, #12
 8002714:	430b      	orrs	r3, r1
 8002716:	031b      	lsls	r3, r3, #12
 8002718:	49d5      	ldr	r1, [pc, #852]	; (8002a70 <__aeabi_dsub+0x6e4>)
 800271a:	0b1b      	lsrs	r3, r3, #12
 800271c:	e6da      	b.n	80024d4 <__aeabi_dsub+0x148>
 800271e:	49d5      	ldr	r1, [pc, #852]	; (8002a74 <__aeabi_dsub+0x6e8>)
 8002720:	1ab6      	subs	r6, r6, r2
 8002722:	400b      	ands	r3, r1
 8002724:	4698      	mov	r8, r3
 8002726:	e6b5      	b.n	8002494 <__aeabi_dsub+0x108>
 8002728:	0020      	movs	r0, r4
 800272a:	f000 fb1d 	bl	8002d68 <__clzsi2>
 800272e:	0002      	movs	r2, r0
 8002730:	3218      	adds	r2, #24
 8002732:	2a1f      	cmp	r2, #31
 8002734:	dc00      	bgt.n	8002738 <__aeabi_dsub+0x3ac>
 8002736:	e68f      	b.n	8002458 <__aeabi_dsub+0xcc>
 8002738:	0023      	movs	r3, r4
 800273a:	3808      	subs	r0, #8
 800273c:	4083      	lsls	r3, r0
 800273e:	2400      	movs	r4, #0
 8002740:	e692      	b.n	8002468 <__aeabi_dsub+0xdc>
 8002742:	4308      	orrs	r0, r1
 8002744:	0002      	movs	r2, r0
 8002746:	1e50      	subs	r0, r2, #1
 8002748:	4182      	sbcs	r2, r0
 800274a:	e66d      	b.n	8002428 <__aeabi_dsub+0x9c>
 800274c:	4cca      	ldr	r4, [pc, #808]	; (8002a78 <__aeabi_dsub+0x6ec>)
 800274e:	1c72      	adds	r2, r6, #1
 8002750:	4222      	tst	r2, r4
 8002752:	d000      	beq.n	8002756 <__aeabi_dsub+0x3ca>
 8002754:	e0ad      	b.n	80028b2 <__aeabi_dsub+0x526>
 8002756:	464a      	mov	r2, r9
 8002758:	431a      	orrs	r2, r3
 800275a:	2e00      	cmp	r6, #0
 800275c:	d1b8      	bne.n	80026d0 <__aeabi_dsub+0x344>
 800275e:	2a00      	cmp	r2, #0
 8002760:	d100      	bne.n	8002764 <__aeabi_dsub+0x3d8>
 8002762:	e158      	b.n	8002a16 <__aeabi_dsub+0x68a>
 8002764:	000a      	movs	r2, r1
 8002766:	4302      	orrs	r2, r0
 8002768:	d000      	beq.n	800276c <__aeabi_dsub+0x3e0>
 800276a:	e159      	b.n	8002a20 <__aeabi_dsub+0x694>
 800276c:	464a      	mov	r2, r9
 800276e:	0759      	lsls	r1, r3, #29
 8002770:	08d2      	lsrs	r2, r2, #3
 8002772:	430a      	orrs	r2, r1
 8002774:	08db      	lsrs	r3, r3, #3
 8002776:	e786      	b.n	8002686 <__aeabi_dsub+0x2fa>
 8002778:	464a      	mov	r2, r9
 800277a:	0759      	lsls	r1, r3, #29
 800277c:	08d2      	lsrs	r2, r2, #3
 800277e:	430a      	orrs	r2, r1
 8002780:	08db      	lsrs	r3, r3, #3
 8002782:	e7c1      	b.n	8002708 <__aeabi_dsub+0x37c>
 8002784:	4dba      	ldr	r5, [pc, #744]	; (8002a70 <__aeabi_dsub+0x6e4>)
 8002786:	42aa      	cmp	r2, r5
 8002788:	d100      	bne.n	800278c <__aeabi_dsub+0x400>
 800278a:	e11e      	b.n	80029ca <__aeabi_dsub+0x63e>
 800278c:	2580      	movs	r5, #128	; 0x80
 800278e:	042d      	lsls	r5, r5, #16
 8002790:	432b      	orrs	r3, r5
 8002792:	4664      	mov	r4, ip
 8002794:	2c38      	cmp	r4, #56	; 0x38
 8002796:	dc5d      	bgt.n	8002854 <__aeabi_dsub+0x4c8>
 8002798:	2c1f      	cmp	r4, #31
 800279a:	dd00      	ble.n	800279e <__aeabi_dsub+0x412>
 800279c:	e0d0      	b.n	8002940 <__aeabi_dsub+0x5b4>
 800279e:	2520      	movs	r5, #32
 80027a0:	4667      	mov	r7, ip
 80027a2:	1b2d      	subs	r5, r5, r4
 80027a4:	464e      	mov	r6, r9
 80027a6:	001c      	movs	r4, r3
 80027a8:	40fe      	lsrs	r6, r7
 80027aa:	40ac      	lsls	r4, r5
 80027ac:	4334      	orrs	r4, r6
 80027ae:	464e      	mov	r6, r9
 80027b0:	40ae      	lsls	r6, r5
 80027b2:	0035      	movs	r5, r6
 80027b4:	40fb      	lsrs	r3, r7
 80027b6:	1e6e      	subs	r6, r5, #1
 80027b8:	41b5      	sbcs	r5, r6
 80027ba:	1ac9      	subs	r1, r1, r3
 80027bc:	432c      	orrs	r4, r5
 80027be:	e04e      	b.n	800285e <__aeabi_dsub+0x4d2>
 80027c0:	464a      	mov	r2, r9
 80027c2:	1a14      	subs	r4, r2, r0
 80027c4:	45a1      	cmp	r9, r4
 80027c6:	4192      	sbcs	r2, r2
 80027c8:	4252      	negs	r2, r2
 80027ca:	4690      	mov	r8, r2
 80027cc:	1a5f      	subs	r7, r3, r1
 80027ce:	003a      	movs	r2, r7
 80027d0:	4647      	mov	r7, r8
 80027d2:	1bd2      	subs	r2, r2, r7
 80027d4:	4690      	mov	r8, r2
 80027d6:	0212      	lsls	r2, r2, #8
 80027d8:	d500      	bpl.n	80027dc <__aeabi_dsub+0x450>
 80027da:	e08b      	b.n	80028f4 <__aeabi_dsub+0x568>
 80027dc:	4642      	mov	r2, r8
 80027de:	4322      	orrs	r2, r4
 80027e0:	d000      	beq.n	80027e4 <__aeabi_dsub+0x458>
 80027e2:	e630      	b.n	8002446 <__aeabi_dsub+0xba>
 80027e4:	2300      	movs	r3, #0
 80027e6:	2500      	movs	r5, #0
 80027e8:	e74d      	b.n	8002686 <__aeabi_dsub+0x2fa>
 80027ea:	464a      	mov	r2, r9
 80027ec:	0759      	lsls	r1, r3, #29
 80027ee:	08d2      	lsrs	r2, r2, #3
 80027f0:	430a      	orrs	r2, r1
 80027f2:	08db      	lsrs	r3, r3, #3
 80027f4:	e744      	b.n	8002680 <__aeabi_dsub+0x2f4>
 80027f6:	4642      	mov	r2, r8
 80027f8:	4b9e      	ldr	r3, [pc, #632]	; (8002a74 <__aeabi_dsub+0x6e8>)
 80027fa:	0861      	lsrs	r1, r4, #1
 80027fc:	401a      	ands	r2, r3
 80027fe:	0013      	movs	r3, r2
 8002800:	2201      	movs	r2, #1
 8002802:	4014      	ands	r4, r2
 8002804:	430c      	orrs	r4, r1
 8002806:	07da      	lsls	r2, r3, #31
 8002808:	085b      	lsrs	r3, r3, #1
 800280a:	4698      	mov	r8, r3
 800280c:	4314      	orrs	r4, r2
 800280e:	e641      	b.n	8002494 <__aeabi_dsub+0x108>
 8002810:	001a      	movs	r2, r3
 8002812:	3e1f      	subs	r6, #31
 8002814:	40f2      	lsrs	r2, r6
 8002816:	0016      	movs	r6, r2
 8002818:	2920      	cmp	r1, #32
 800281a:	d003      	beq.n	8002824 <__aeabi_dsub+0x498>
 800281c:	2240      	movs	r2, #64	; 0x40
 800281e:	1a51      	subs	r1, r2, r1
 8002820:	408b      	lsls	r3, r1
 8002822:	431c      	orrs	r4, r3
 8002824:	1e62      	subs	r2, r4, #1
 8002826:	4194      	sbcs	r4, r2
 8002828:	2300      	movs	r3, #0
 800282a:	4334      	orrs	r4, r6
 800282c:	4698      	mov	r8, r3
 800282e:	2600      	movs	r6, #0
 8002830:	e71d      	b.n	800266e <__aeabi_dsub+0x2e2>
 8002832:	000c      	movs	r4, r1
 8002834:	3a20      	subs	r2, #32
 8002836:	40d4      	lsrs	r4, r2
 8002838:	0022      	movs	r2, r4
 800283a:	4664      	mov	r4, ip
 800283c:	2c20      	cmp	r4, #32
 800283e:	d004      	beq.n	800284a <__aeabi_dsub+0x4be>
 8002840:	2740      	movs	r7, #64	; 0x40
 8002842:	1b3f      	subs	r7, r7, r4
 8002844:	40b9      	lsls	r1, r7
 8002846:	4308      	orrs	r0, r1
 8002848:	4680      	mov	r8, r0
 800284a:	4644      	mov	r4, r8
 800284c:	1e61      	subs	r1, r4, #1
 800284e:	418c      	sbcs	r4, r1
 8002850:	4322      	orrs	r2, r4
 8002852:	e5e9      	b.n	8002428 <__aeabi_dsub+0x9c>
 8002854:	464c      	mov	r4, r9
 8002856:	4323      	orrs	r3, r4
 8002858:	001c      	movs	r4, r3
 800285a:	1e63      	subs	r3, r4, #1
 800285c:	419c      	sbcs	r4, r3
 800285e:	1b04      	subs	r4, r0, r4
 8002860:	42a0      	cmp	r0, r4
 8002862:	419b      	sbcs	r3, r3
 8002864:	425b      	negs	r3, r3
 8002866:	1acb      	subs	r3, r1, r3
 8002868:	4698      	mov	r8, r3
 800286a:	465d      	mov	r5, fp
 800286c:	0016      	movs	r6, r2
 800286e:	e5e2      	b.n	8002436 <__aeabi_dsub+0xaa>
 8002870:	464e      	mov	r6, r9
 8002872:	431e      	orrs	r6, r3
 8002874:	d100      	bne.n	8002878 <__aeabi_dsub+0x4ec>
 8002876:	e0ae      	b.n	80029d6 <__aeabi_dsub+0x64a>
 8002878:	1e66      	subs	r6, r4, #1
 800287a:	2c01      	cmp	r4, #1
 800287c:	d100      	bne.n	8002880 <__aeabi_dsub+0x4f4>
 800287e:	e0fd      	b.n	8002a7c <__aeabi_dsub+0x6f0>
 8002880:	4f7b      	ldr	r7, [pc, #492]	; (8002a70 <__aeabi_dsub+0x6e4>)
 8002882:	42bc      	cmp	r4, r7
 8002884:	d100      	bne.n	8002888 <__aeabi_dsub+0x4fc>
 8002886:	e107      	b.n	8002a98 <__aeabi_dsub+0x70c>
 8002888:	46b4      	mov	ip, r6
 800288a:	e69b      	b.n	80025c4 <__aeabi_dsub+0x238>
 800288c:	4664      	mov	r4, ip
 800288e:	2220      	movs	r2, #32
 8002890:	1b12      	subs	r2, r2, r4
 8002892:	000c      	movs	r4, r1
 8002894:	4094      	lsls	r4, r2
 8002896:	0007      	movs	r7, r0
 8002898:	4090      	lsls	r0, r2
 800289a:	46a0      	mov	r8, r4
 800289c:	4664      	mov	r4, ip
 800289e:	1e42      	subs	r2, r0, #1
 80028a0:	4190      	sbcs	r0, r2
 80028a2:	4662      	mov	r2, ip
 80028a4:	40e7      	lsrs	r7, r4
 80028a6:	4644      	mov	r4, r8
 80028a8:	40d1      	lsrs	r1, r2
 80028aa:	433c      	orrs	r4, r7
 80028ac:	4304      	orrs	r4, r0
 80028ae:	185b      	adds	r3, r3, r1
 80028b0:	e6f3      	b.n	800269a <__aeabi_dsub+0x30e>
 80028b2:	4c6f      	ldr	r4, [pc, #444]	; (8002a70 <__aeabi_dsub+0x6e4>)
 80028b4:	42a2      	cmp	r2, r4
 80028b6:	d100      	bne.n	80028ba <__aeabi_dsub+0x52e>
 80028b8:	e0d5      	b.n	8002a66 <__aeabi_dsub+0x6da>
 80028ba:	4448      	add	r0, r9
 80028bc:	185b      	adds	r3, r3, r1
 80028be:	4548      	cmp	r0, r9
 80028c0:	4189      	sbcs	r1, r1
 80028c2:	4249      	negs	r1, r1
 80028c4:	185b      	adds	r3, r3, r1
 80028c6:	07dc      	lsls	r4, r3, #31
 80028c8:	0840      	lsrs	r0, r0, #1
 80028ca:	085b      	lsrs	r3, r3, #1
 80028cc:	4698      	mov	r8, r3
 80028ce:	0016      	movs	r6, r2
 80028d0:	4304      	orrs	r4, r0
 80028d2:	e6cc      	b.n	800266e <__aeabi_dsub+0x2e2>
 80028d4:	2a00      	cmp	r2, #0
 80028d6:	d000      	beq.n	80028da <__aeabi_dsub+0x54e>
 80028d8:	e082      	b.n	80029e0 <__aeabi_dsub+0x654>
 80028da:	000a      	movs	r2, r1
 80028dc:	4302      	orrs	r2, r0
 80028de:	d140      	bne.n	8002962 <__aeabi_dsub+0x5d6>
 80028e0:	2380      	movs	r3, #128	; 0x80
 80028e2:	2500      	movs	r5, #0
 80028e4:	031b      	lsls	r3, r3, #12
 80028e6:	e713      	b.n	8002710 <__aeabi_dsub+0x384>
 80028e8:	074b      	lsls	r3, r1, #29
 80028ea:	08c2      	lsrs	r2, r0, #3
 80028ec:	431a      	orrs	r2, r3
 80028ee:	465d      	mov	r5, fp
 80028f0:	08cb      	lsrs	r3, r1, #3
 80028f2:	e6c5      	b.n	8002680 <__aeabi_dsub+0x2f4>
 80028f4:	464a      	mov	r2, r9
 80028f6:	1a84      	subs	r4, r0, r2
 80028f8:	42a0      	cmp	r0, r4
 80028fa:	4192      	sbcs	r2, r2
 80028fc:	1acb      	subs	r3, r1, r3
 80028fe:	4252      	negs	r2, r2
 8002900:	1a9b      	subs	r3, r3, r2
 8002902:	4698      	mov	r8, r3
 8002904:	465d      	mov	r5, fp
 8002906:	e59e      	b.n	8002446 <__aeabi_dsub+0xba>
 8002908:	464a      	mov	r2, r9
 800290a:	0759      	lsls	r1, r3, #29
 800290c:	08d2      	lsrs	r2, r2, #3
 800290e:	430a      	orrs	r2, r1
 8002910:	08db      	lsrs	r3, r3, #3
 8002912:	e6f9      	b.n	8002708 <__aeabi_dsub+0x37c>
 8002914:	464a      	mov	r2, r9
 8002916:	1a14      	subs	r4, r2, r0
 8002918:	45a1      	cmp	r9, r4
 800291a:	4192      	sbcs	r2, r2
 800291c:	1a5b      	subs	r3, r3, r1
 800291e:	4252      	negs	r2, r2
 8002920:	1a9b      	subs	r3, r3, r2
 8002922:	4698      	mov	r8, r3
 8002924:	2601      	movs	r6, #1
 8002926:	e586      	b.n	8002436 <__aeabi_dsub+0xaa>
 8002928:	464a      	mov	r2, r9
 800292a:	0759      	lsls	r1, r3, #29
 800292c:	08d2      	lsrs	r2, r2, #3
 800292e:	430a      	orrs	r2, r1
 8002930:	08db      	lsrs	r3, r3, #3
 8002932:	e6a5      	b.n	8002680 <__aeabi_dsub+0x2f4>
 8002934:	464c      	mov	r4, r9
 8002936:	4323      	orrs	r3, r4
 8002938:	001c      	movs	r4, r3
 800293a:	1e63      	subs	r3, r4, #1
 800293c:	419c      	sbcs	r4, r3
 800293e:	e65b      	b.n	80025f8 <__aeabi_dsub+0x26c>
 8002940:	4665      	mov	r5, ip
 8002942:	001e      	movs	r6, r3
 8002944:	3d20      	subs	r5, #32
 8002946:	40ee      	lsrs	r6, r5
 8002948:	2c20      	cmp	r4, #32
 800294a:	d005      	beq.n	8002958 <__aeabi_dsub+0x5cc>
 800294c:	2540      	movs	r5, #64	; 0x40
 800294e:	1b2d      	subs	r5, r5, r4
 8002950:	40ab      	lsls	r3, r5
 8002952:	464c      	mov	r4, r9
 8002954:	431c      	orrs	r4, r3
 8002956:	46a2      	mov	sl, r4
 8002958:	4654      	mov	r4, sl
 800295a:	1e63      	subs	r3, r4, #1
 800295c:	419c      	sbcs	r4, r3
 800295e:	4334      	orrs	r4, r6
 8002960:	e77d      	b.n	800285e <__aeabi_dsub+0x4d2>
 8002962:	074b      	lsls	r3, r1, #29
 8002964:	08c2      	lsrs	r2, r0, #3
 8002966:	431a      	orrs	r2, r3
 8002968:	465d      	mov	r5, fp
 800296a:	08cb      	lsrs	r3, r1, #3
 800296c:	e6cc      	b.n	8002708 <__aeabi_dsub+0x37c>
 800296e:	000a      	movs	r2, r1
 8002970:	4302      	orrs	r2, r0
 8002972:	d100      	bne.n	8002976 <__aeabi_dsub+0x5ea>
 8002974:	e736      	b.n	80027e4 <__aeabi_dsub+0x458>
 8002976:	074b      	lsls	r3, r1, #29
 8002978:	08c2      	lsrs	r2, r0, #3
 800297a:	431a      	orrs	r2, r3
 800297c:	465d      	mov	r5, fp
 800297e:	08cb      	lsrs	r3, r1, #3
 8002980:	e681      	b.n	8002686 <__aeabi_dsub+0x2fa>
 8002982:	464a      	mov	r2, r9
 8002984:	1a84      	subs	r4, r0, r2
 8002986:	42a0      	cmp	r0, r4
 8002988:	4192      	sbcs	r2, r2
 800298a:	1acb      	subs	r3, r1, r3
 800298c:	4252      	negs	r2, r2
 800298e:	1a9b      	subs	r3, r3, r2
 8002990:	4698      	mov	r8, r3
 8002992:	465d      	mov	r5, fp
 8002994:	2601      	movs	r6, #1
 8002996:	e54e      	b.n	8002436 <__aeabi_dsub+0xaa>
 8002998:	074b      	lsls	r3, r1, #29
 800299a:	08c2      	lsrs	r2, r0, #3
 800299c:	431a      	orrs	r2, r3
 800299e:	08cb      	lsrs	r3, r1, #3
 80029a0:	e6b2      	b.n	8002708 <__aeabi_dsub+0x37c>
 80029a2:	464a      	mov	r2, r9
 80029a4:	1a14      	subs	r4, r2, r0
 80029a6:	45a1      	cmp	r9, r4
 80029a8:	4192      	sbcs	r2, r2
 80029aa:	1a5f      	subs	r7, r3, r1
 80029ac:	4252      	negs	r2, r2
 80029ae:	1aba      	subs	r2, r7, r2
 80029b0:	4690      	mov	r8, r2
 80029b2:	0212      	lsls	r2, r2, #8
 80029b4:	d56b      	bpl.n	8002a8e <__aeabi_dsub+0x702>
 80029b6:	464a      	mov	r2, r9
 80029b8:	1a84      	subs	r4, r0, r2
 80029ba:	42a0      	cmp	r0, r4
 80029bc:	4192      	sbcs	r2, r2
 80029be:	1acb      	subs	r3, r1, r3
 80029c0:	4252      	negs	r2, r2
 80029c2:	1a9b      	subs	r3, r3, r2
 80029c4:	4698      	mov	r8, r3
 80029c6:	465d      	mov	r5, fp
 80029c8:	e564      	b.n	8002494 <__aeabi_dsub+0x108>
 80029ca:	074b      	lsls	r3, r1, #29
 80029cc:	08c2      	lsrs	r2, r0, #3
 80029ce:	431a      	orrs	r2, r3
 80029d0:	465d      	mov	r5, fp
 80029d2:	08cb      	lsrs	r3, r1, #3
 80029d4:	e698      	b.n	8002708 <__aeabi_dsub+0x37c>
 80029d6:	074b      	lsls	r3, r1, #29
 80029d8:	08c2      	lsrs	r2, r0, #3
 80029da:	431a      	orrs	r2, r3
 80029dc:	08cb      	lsrs	r3, r1, #3
 80029de:	e64f      	b.n	8002680 <__aeabi_dsub+0x2f4>
 80029e0:	000a      	movs	r2, r1
 80029e2:	4302      	orrs	r2, r0
 80029e4:	d090      	beq.n	8002908 <__aeabi_dsub+0x57c>
 80029e6:	464a      	mov	r2, r9
 80029e8:	075c      	lsls	r4, r3, #29
 80029ea:	08d2      	lsrs	r2, r2, #3
 80029ec:	4314      	orrs	r4, r2
 80029ee:	2280      	movs	r2, #128	; 0x80
 80029f0:	08db      	lsrs	r3, r3, #3
 80029f2:	0312      	lsls	r2, r2, #12
 80029f4:	4213      	tst	r3, r2
 80029f6:	d008      	beq.n	8002a0a <__aeabi_dsub+0x67e>
 80029f8:	08ce      	lsrs	r6, r1, #3
 80029fa:	4216      	tst	r6, r2
 80029fc:	d105      	bne.n	8002a0a <__aeabi_dsub+0x67e>
 80029fe:	08c0      	lsrs	r0, r0, #3
 8002a00:	0749      	lsls	r1, r1, #29
 8002a02:	4308      	orrs	r0, r1
 8002a04:	0004      	movs	r4, r0
 8002a06:	465d      	mov	r5, fp
 8002a08:	0033      	movs	r3, r6
 8002a0a:	0f61      	lsrs	r1, r4, #29
 8002a0c:	00e2      	lsls	r2, r4, #3
 8002a0e:	0749      	lsls	r1, r1, #29
 8002a10:	08d2      	lsrs	r2, r2, #3
 8002a12:	430a      	orrs	r2, r1
 8002a14:	e678      	b.n	8002708 <__aeabi_dsub+0x37c>
 8002a16:	074b      	lsls	r3, r1, #29
 8002a18:	08c2      	lsrs	r2, r0, #3
 8002a1a:	431a      	orrs	r2, r3
 8002a1c:	08cb      	lsrs	r3, r1, #3
 8002a1e:	e632      	b.n	8002686 <__aeabi_dsub+0x2fa>
 8002a20:	4448      	add	r0, r9
 8002a22:	185b      	adds	r3, r3, r1
 8002a24:	4548      	cmp	r0, r9
 8002a26:	4192      	sbcs	r2, r2
 8002a28:	4698      	mov	r8, r3
 8002a2a:	4252      	negs	r2, r2
 8002a2c:	4490      	add	r8, r2
 8002a2e:	4643      	mov	r3, r8
 8002a30:	0004      	movs	r4, r0
 8002a32:	021b      	lsls	r3, r3, #8
 8002a34:	d400      	bmi.n	8002a38 <__aeabi_dsub+0x6ac>
 8002a36:	e61a      	b.n	800266e <__aeabi_dsub+0x2e2>
 8002a38:	4642      	mov	r2, r8
 8002a3a:	4b0e      	ldr	r3, [pc, #56]	; (8002a74 <__aeabi_dsub+0x6e8>)
 8002a3c:	2601      	movs	r6, #1
 8002a3e:	401a      	ands	r2, r3
 8002a40:	4690      	mov	r8, r2
 8002a42:	e614      	b.n	800266e <__aeabi_dsub+0x2e2>
 8002a44:	4666      	mov	r6, ip
 8002a46:	001f      	movs	r7, r3
 8002a48:	3e20      	subs	r6, #32
 8002a4a:	40f7      	lsrs	r7, r6
 8002a4c:	2c20      	cmp	r4, #32
 8002a4e:	d005      	beq.n	8002a5c <__aeabi_dsub+0x6d0>
 8002a50:	2640      	movs	r6, #64	; 0x40
 8002a52:	1b36      	subs	r6, r6, r4
 8002a54:	40b3      	lsls	r3, r6
 8002a56:	464c      	mov	r4, r9
 8002a58:	431c      	orrs	r4, r3
 8002a5a:	46a2      	mov	sl, r4
 8002a5c:	4654      	mov	r4, sl
 8002a5e:	1e63      	subs	r3, r4, #1
 8002a60:	419c      	sbcs	r4, r3
 8002a62:	433c      	orrs	r4, r7
 8002a64:	e5c8      	b.n	80025f8 <__aeabi_dsub+0x26c>
 8002a66:	0011      	movs	r1, r2
 8002a68:	2300      	movs	r3, #0
 8002a6a:	2200      	movs	r2, #0
 8002a6c:	e532      	b.n	80024d4 <__aeabi_dsub+0x148>
 8002a6e:	46c0      	nop			; (mov r8, r8)
 8002a70:	000007ff 	.word	0x000007ff
 8002a74:	ff7fffff 	.word	0xff7fffff
 8002a78:	000007fe 	.word	0x000007fe
 8002a7c:	464a      	mov	r2, r9
 8002a7e:	1814      	adds	r4, r2, r0
 8002a80:	4284      	cmp	r4, r0
 8002a82:	4192      	sbcs	r2, r2
 8002a84:	185b      	adds	r3, r3, r1
 8002a86:	4698      	mov	r8, r3
 8002a88:	4252      	negs	r2, r2
 8002a8a:	4490      	add	r8, r2
 8002a8c:	e5e9      	b.n	8002662 <__aeabi_dsub+0x2d6>
 8002a8e:	4642      	mov	r2, r8
 8002a90:	4322      	orrs	r2, r4
 8002a92:	d100      	bne.n	8002a96 <__aeabi_dsub+0x70a>
 8002a94:	e6a6      	b.n	80027e4 <__aeabi_dsub+0x458>
 8002a96:	e5ea      	b.n	800266e <__aeabi_dsub+0x2e2>
 8002a98:	074b      	lsls	r3, r1, #29
 8002a9a:	08c2      	lsrs	r2, r0, #3
 8002a9c:	431a      	orrs	r2, r3
 8002a9e:	08cb      	lsrs	r3, r1, #3
 8002aa0:	e632      	b.n	8002708 <__aeabi_dsub+0x37c>
 8002aa2:	2200      	movs	r2, #0
 8002aa4:	4901      	ldr	r1, [pc, #4]	; (8002aac <__aeabi_dsub+0x720>)
 8002aa6:	0013      	movs	r3, r2
 8002aa8:	e514      	b.n	80024d4 <__aeabi_dsub+0x148>
 8002aaa:	46c0      	nop			; (mov r8, r8)
 8002aac:	000007ff 	.word	0x000007ff

08002ab0 <__aeabi_d2iz>:
 8002ab0:	000a      	movs	r2, r1
 8002ab2:	b530      	push	{r4, r5, lr}
 8002ab4:	4c13      	ldr	r4, [pc, #76]	; (8002b04 <__aeabi_d2iz+0x54>)
 8002ab6:	0053      	lsls	r3, r2, #1
 8002ab8:	0309      	lsls	r1, r1, #12
 8002aba:	0005      	movs	r5, r0
 8002abc:	0b09      	lsrs	r1, r1, #12
 8002abe:	2000      	movs	r0, #0
 8002ac0:	0d5b      	lsrs	r3, r3, #21
 8002ac2:	0fd2      	lsrs	r2, r2, #31
 8002ac4:	42a3      	cmp	r3, r4
 8002ac6:	dd04      	ble.n	8002ad2 <__aeabi_d2iz+0x22>
 8002ac8:	480f      	ldr	r0, [pc, #60]	; (8002b08 <__aeabi_d2iz+0x58>)
 8002aca:	4283      	cmp	r3, r0
 8002acc:	dd02      	ble.n	8002ad4 <__aeabi_d2iz+0x24>
 8002ace:	4b0f      	ldr	r3, [pc, #60]	; (8002b0c <__aeabi_d2iz+0x5c>)
 8002ad0:	18d0      	adds	r0, r2, r3
 8002ad2:	bd30      	pop	{r4, r5, pc}
 8002ad4:	2080      	movs	r0, #128	; 0x80
 8002ad6:	0340      	lsls	r0, r0, #13
 8002ad8:	4301      	orrs	r1, r0
 8002ada:	480d      	ldr	r0, [pc, #52]	; (8002b10 <__aeabi_d2iz+0x60>)
 8002adc:	1ac0      	subs	r0, r0, r3
 8002ade:	281f      	cmp	r0, #31
 8002ae0:	dd08      	ble.n	8002af4 <__aeabi_d2iz+0x44>
 8002ae2:	480c      	ldr	r0, [pc, #48]	; (8002b14 <__aeabi_d2iz+0x64>)
 8002ae4:	1ac3      	subs	r3, r0, r3
 8002ae6:	40d9      	lsrs	r1, r3
 8002ae8:	000b      	movs	r3, r1
 8002aea:	4258      	negs	r0, r3
 8002aec:	2a00      	cmp	r2, #0
 8002aee:	d1f0      	bne.n	8002ad2 <__aeabi_d2iz+0x22>
 8002af0:	0018      	movs	r0, r3
 8002af2:	e7ee      	b.n	8002ad2 <__aeabi_d2iz+0x22>
 8002af4:	4c08      	ldr	r4, [pc, #32]	; (8002b18 <__aeabi_d2iz+0x68>)
 8002af6:	40c5      	lsrs	r5, r0
 8002af8:	46a4      	mov	ip, r4
 8002afa:	4463      	add	r3, ip
 8002afc:	4099      	lsls	r1, r3
 8002afe:	000b      	movs	r3, r1
 8002b00:	432b      	orrs	r3, r5
 8002b02:	e7f2      	b.n	8002aea <__aeabi_d2iz+0x3a>
 8002b04:	000003fe 	.word	0x000003fe
 8002b08:	0000041d 	.word	0x0000041d
 8002b0c:	7fffffff 	.word	0x7fffffff
 8002b10:	00000433 	.word	0x00000433
 8002b14:	00000413 	.word	0x00000413
 8002b18:	fffffbed 	.word	0xfffffbed

08002b1c <__aeabi_i2d>:
 8002b1c:	b570      	push	{r4, r5, r6, lr}
 8002b1e:	2800      	cmp	r0, #0
 8002b20:	d016      	beq.n	8002b50 <__aeabi_i2d+0x34>
 8002b22:	17c3      	asrs	r3, r0, #31
 8002b24:	18c5      	adds	r5, r0, r3
 8002b26:	405d      	eors	r5, r3
 8002b28:	0fc4      	lsrs	r4, r0, #31
 8002b2a:	0028      	movs	r0, r5
 8002b2c:	f000 f91c 	bl	8002d68 <__clzsi2>
 8002b30:	4a11      	ldr	r2, [pc, #68]	; (8002b78 <__aeabi_i2d+0x5c>)
 8002b32:	1a12      	subs	r2, r2, r0
 8002b34:	280a      	cmp	r0, #10
 8002b36:	dc16      	bgt.n	8002b66 <__aeabi_i2d+0x4a>
 8002b38:	0003      	movs	r3, r0
 8002b3a:	002e      	movs	r6, r5
 8002b3c:	3315      	adds	r3, #21
 8002b3e:	409e      	lsls	r6, r3
 8002b40:	230b      	movs	r3, #11
 8002b42:	1a18      	subs	r0, r3, r0
 8002b44:	40c5      	lsrs	r5, r0
 8002b46:	0553      	lsls	r3, r2, #21
 8002b48:	032d      	lsls	r5, r5, #12
 8002b4a:	0b2d      	lsrs	r5, r5, #12
 8002b4c:	0d5b      	lsrs	r3, r3, #21
 8002b4e:	e003      	b.n	8002b58 <__aeabi_i2d+0x3c>
 8002b50:	2400      	movs	r4, #0
 8002b52:	2300      	movs	r3, #0
 8002b54:	2500      	movs	r5, #0
 8002b56:	2600      	movs	r6, #0
 8002b58:	051b      	lsls	r3, r3, #20
 8002b5a:	432b      	orrs	r3, r5
 8002b5c:	07e4      	lsls	r4, r4, #31
 8002b5e:	4323      	orrs	r3, r4
 8002b60:	0030      	movs	r0, r6
 8002b62:	0019      	movs	r1, r3
 8002b64:	bd70      	pop	{r4, r5, r6, pc}
 8002b66:	380b      	subs	r0, #11
 8002b68:	4085      	lsls	r5, r0
 8002b6a:	0553      	lsls	r3, r2, #21
 8002b6c:	032d      	lsls	r5, r5, #12
 8002b6e:	2600      	movs	r6, #0
 8002b70:	0b2d      	lsrs	r5, r5, #12
 8002b72:	0d5b      	lsrs	r3, r3, #21
 8002b74:	e7f0      	b.n	8002b58 <__aeabi_i2d+0x3c>
 8002b76:	46c0      	nop			; (mov r8, r8)
 8002b78:	0000041e 	.word	0x0000041e

08002b7c <__aeabi_ui2d>:
 8002b7c:	b510      	push	{r4, lr}
 8002b7e:	1e04      	subs	r4, r0, #0
 8002b80:	d010      	beq.n	8002ba4 <__aeabi_ui2d+0x28>
 8002b82:	f000 f8f1 	bl	8002d68 <__clzsi2>
 8002b86:	4b0f      	ldr	r3, [pc, #60]	; (8002bc4 <__aeabi_ui2d+0x48>)
 8002b88:	1a1b      	subs	r3, r3, r0
 8002b8a:	280a      	cmp	r0, #10
 8002b8c:	dc11      	bgt.n	8002bb2 <__aeabi_ui2d+0x36>
 8002b8e:	220b      	movs	r2, #11
 8002b90:	0021      	movs	r1, r4
 8002b92:	1a12      	subs	r2, r2, r0
 8002b94:	40d1      	lsrs	r1, r2
 8002b96:	3015      	adds	r0, #21
 8002b98:	030a      	lsls	r2, r1, #12
 8002b9a:	055b      	lsls	r3, r3, #21
 8002b9c:	4084      	lsls	r4, r0
 8002b9e:	0b12      	lsrs	r2, r2, #12
 8002ba0:	0d5b      	lsrs	r3, r3, #21
 8002ba2:	e001      	b.n	8002ba8 <__aeabi_ui2d+0x2c>
 8002ba4:	2300      	movs	r3, #0
 8002ba6:	2200      	movs	r2, #0
 8002ba8:	051b      	lsls	r3, r3, #20
 8002baa:	4313      	orrs	r3, r2
 8002bac:	0020      	movs	r0, r4
 8002bae:	0019      	movs	r1, r3
 8002bb0:	bd10      	pop	{r4, pc}
 8002bb2:	0022      	movs	r2, r4
 8002bb4:	380b      	subs	r0, #11
 8002bb6:	4082      	lsls	r2, r0
 8002bb8:	055b      	lsls	r3, r3, #21
 8002bba:	0312      	lsls	r2, r2, #12
 8002bbc:	2400      	movs	r4, #0
 8002bbe:	0b12      	lsrs	r2, r2, #12
 8002bc0:	0d5b      	lsrs	r3, r3, #21
 8002bc2:	e7f1      	b.n	8002ba8 <__aeabi_ui2d+0x2c>
 8002bc4:	0000041e 	.word	0x0000041e

08002bc8 <__aeabi_f2d>:
 8002bc8:	b570      	push	{r4, r5, r6, lr}
 8002bca:	0043      	lsls	r3, r0, #1
 8002bcc:	0246      	lsls	r6, r0, #9
 8002bce:	0fc4      	lsrs	r4, r0, #31
 8002bd0:	20fe      	movs	r0, #254	; 0xfe
 8002bd2:	0e1b      	lsrs	r3, r3, #24
 8002bd4:	1c59      	adds	r1, r3, #1
 8002bd6:	0a75      	lsrs	r5, r6, #9
 8002bd8:	4208      	tst	r0, r1
 8002bda:	d00c      	beq.n	8002bf6 <__aeabi_f2d+0x2e>
 8002bdc:	22e0      	movs	r2, #224	; 0xe0
 8002bde:	0092      	lsls	r2, r2, #2
 8002be0:	4694      	mov	ip, r2
 8002be2:	076d      	lsls	r5, r5, #29
 8002be4:	0b36      	lsrs	r6, r6, #12
 8002be6:	4463      	add	r3, ip
 8002be8:	051b      	lsls	r3, r3, #20
 8002bea:	4333      	orrs	r3, r6
 8002bec:	07e4      	lsls	r4, r4, #31
 8002bee:	4323      	orrs	r3, r4
 8002bf0:	0028      	movs	r0, r5
 8002bf2:	0019      	movs	r1, r3
 8002bf4:	bd70      	pop	{r4, r5, r6, pc}
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d114      	bne.n	8002c24 <__aeabi_f2d+0x5c>
 8002bfa:	2d00      	cmp	r5, #0
 8002bfc:	d01b      	beq.n	8002c36 <__aeabi_f2d+0x6e>
 8002bfe:	0028      	movs	r0, r5
 8002c00:	f000 f8b2 	bl	8002d68 <__clzsi2>
 8002c04:	280a      	cmp	r0, #10
 8002c06:	dc1c      	bgt.n	8002c42 <__aeabi_f2d+0x7a>
 8002c08:	230b      	movs	r3, #11
 8002c0a:	002a      	movs	r2, r5
 8002c0c:	1a1b      	subs	r3, r3, r0
 8002c0e:	40da      	lsrs	r2, r3
 8002c10:	0003      	movs	r3, r0
 8002c12:	3315      	adds	r3, #21
 8002c14:	409d      	lsls	r5, r3
 8002c16:	4b0e      	ldr	r3, [pc, #56]	; (8002c50 <__aeabi_f2d+0x88>)
 8002c18:	0312      	lsls	r2, r2, #12
 8002c1a:	1a1b      	subs	r3, r3, r0
 8002c1c:	055b      	lsls	r3, r3, #21
 8002c1e:	0b16      	lsrs	r6, r2, #12
 8002c20:	0d5b      	lsrs	r3, r3, #21
 8002c22:	e7e1      	b.n	8002be8 <__aeabi_f2d+0x20>
 8002c24:	2d00      	cmp	r5, #0
 8002c26:	d009      	beq.n	8002c3c <__aeabi_f2d+0x74>
 8002c28:	0b32      	lsrs	r2, r6, #12
 8002c2a:	2680      	movs	r6, #128	; 0x80
 8002c2c:	0336      	lsls	r6, r6, #12
 8002c2e:	4b09      	ldr	r3, [pc, #36]	; (8002c54 <__aeabi_f2d+0x8c>)
 8002c30:	076d      	lsls	r5, r5, #29
 8002c32:	4316      	orrs	r6, r2
 8002c34:	e7d8      	b.n	8002be8 <__aeabi_f2d+0x20>
 8002c36:	2300      	movs	r3, #0
 8002c38:	2600      	movs	r6, #0
 8002c3a:	e7d5      	b.n	8002be8 <__aeabi_f2d+0x20>
 8002c3c:	2600      	movs	r6, #0
 8002c3e:	4b05      	ldr	r3, [pc, #20]	; (8002c54 <__aeabi_f2d+0x8c>)
 8002c40:	e7d2      	b.n	8002be8 <__aeabi_f2d+0x20>
 8002c42:	0003      	movs	r3, r0
 8002c44:	002a      	movs	r2, r5
 8002c46:	3b0b      	subs	r3, #11
 8002c48:	409a      	lsls	r2, r3
 8002c4a:	2500      	movs	r5, #0
 8002c4c:	e7e3      	b.n	8002c16 <__aeabi_f2d+0x4e>
 8002c4e:	46c0      	nop			; (mov r8, r8)
 8002c50:	00000389 	.word	0x00000389
 8002c54:	000007ff 	.word	0x000007ff

08002c58 <__aeabi_d2f>:
 8002c58:	0002      	movs	r2, r0
 8002c5a:	004b      	lsls	r3, r1, #1
 8002c5c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002c5e:	0308      	lsls	r0, r1, #12
 8002c60:	0d5b      	lsrs	r3, r3, #21
 8002c62:	4e3d      	ldr	r6, [pc, #244]	; (8002d58 <__aeabi_d2f+0x100>)
 8002c64:	0fcc      	lsrs	r4, r1, #31
 8002c66:	0a40      	lsrs	r0, r0, #9
 8002c68:	0f51      	lsrs	r1, r2, #29
 8002c6a:	1c5f      	adds	r7, r3, #1
 8002c6c:	4308      	orrs	r0, r1
 8002c6e:	00d5      	lsls	r5, r2, #3
 8002c70:	4237      	tst	r7, r6
 8002c72:	d00a      	beq.n	8002c8a <__aeabi_d2f+0x32>
 8002c74:	4939      	ldr	r1, [pc, #228]	; (8002d5c <__aeabi_d2f+0x104>)
 8002c76:	185e      	adds	r6, r3, r1
 8002c78:	2efe      	cmp	r6, #254	; 0xfe
 8002c7a:	dd16      	ble.n	8002caa <__aeabi_d2f+0x52>
 8002c7c:	23ff      	movs	r3, #255	; 0xff
 8002c7e:	2100      	movs	r1, #0
 8002c80:	05db      	lsls	r3, r3, #23
 8002c82:	430b      	orrs	r3, r1
 8002c84:	07e0      	lsls	r0, r4, #31
 8002c86:	4318      	orrs	r0, r3
 8002c88:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d106      	bne.n	8002c9c <__aeabi_d2f+0x44>
 8002c8e:	4328      	orrs	r0, r5
 8002c90:	d027      	beq.n	8002ce2 <__aeabi_d2f+0x8a>
 8002c92:	2105      	movs	r1, #5
 8002c94:	0189      	lsls	r1, r1, #6
 8002c96:	0a49      	lsrs	r1, r1, #9
 8002c98:	b2db      	uxtb	r3, r3
 8002c9a:	e7f1      	b.n	8002c80 <__aeabi_d2f+0x28>
 8002c9c:	4305      	orrs	r5, r0
 8002c9e:	d0ed      	beq.n	8002c7c <__aeabi_d2f+0x24>
 8002ca0:	2180      	movs	r1, #128	; 0x80
 8002ca2:	03c9      	lsls	r1, r1, #15
 8002ca4:	23ff      	movs	r3, #255	; 0xff
 8002ca6:	4301      	orrs	r1, r0
 8002ca8:	e7ea      	b.n	8002c80 <__aeabi_d2f+0x28>
 8002caa:	2e00      	cmp	r6, #0
 8002cac:	dd1c      	ble.n	8002ce8 <__aeabi_d2f+0x90>
 8002cae:	0192      	lsls	r2, r2, #6
 8002cb0:	0011      	movs	r1, r2
 8002cb2:	1e4a      	subs	r2, r1, #1
 8002cb4:	4191      	sbcs	r1, r2
 8002cb6:	00c0      	lsls	r0, r0, #3
 8002cb8:	0f6d      	lsrs	r5, r5, #29
 8002cba:	4301      	orrs	r1, r0
 8002cbc:	4329      	orrs	r1, r5
 8002cbe:	074b      	lsls	r3, r1, #29
 8002cc0:	d048      	beq.n	8002d54 <__aeabi_d2f+0xfc>
 8002cc2:	230f      	movs	r3, #15
 8002cc4:	400b      	ands	r3, r1
 8002cc6:	2b04      	cmp	r3, #4
 8002cc8:	d000      	beq.n	8002ccc <__aeabi_d2f+0x74>
 8002cca:	3104      	adds	r1, #4
 8002ccc:	2380      	movs	r3, #128	; 0x80
 8002cce:	04db      	lsls	r3, r3, #19
 8002cd0:	400b      	ands	r3, r1
 8002cd2:	d03f      	beq.n	8002d54 <__aeabi_d2f+0xfc>
 8002cd4:	1c72      	adds	r2, r6, #1
 8002cd6:	2efe      	cmp	r6, #254	; 0xfe
 8002cd8:	d0d0      	beq.n	8002c7c <__aeabi_d2f+0x24>
 8002cda:	0189      	lsls	r1, r1, #6
 8002cdc:	0a49      	lsrs	r1, r1, #9
 8002cde:	b2d3      	uxtb	r3, r2
 8002ce0:	e7ce      	b.n	8002c80 <__aeabi_d2f+0x28>
 8002ce2:	2300      	movs	r3, #0
 8002ce4:	2100      	movs	r1, #0
 8002ce6:	e7cb      	b.n	8002c80 <__aeabi_d2f+0x28>
 8002ce8:	0032      	movs	r2, r6
 8002cea:	3217      	adds	r2, #23
 8002cec:	db22      	blt.n	8002d34 <__aeabi_d2f+0xdc>
 8002cee:	2180      	movs	r1, #128	; 0x80
 8002cf0:	221e      	movs	r2, #30
 8002cf2:	0409      	lsls	r1, r1, #16
 8002cf4:	4308      	orrs	r0, r1
 8002cf6:	1b92      	subs	r2, r2, r6
 8002cf8:	2a1f      	cmp	r2, #31
 8002cfa:	dd1d      	ble.n	8002d38 <__aeabi_d2f+0xe0>
 8002cfc:	2102      	movs	r1, #2
 8002cfe:	4249      	negs	r1, r1
 8002d00:	1b8e      	subs	r6, r1, r6
 8002d02:	0001      	movs	r1, r0
 8002d04:	40f1      	lsrs	r1, r6
 8002d06:	000e      	movs	r6, r1
 8002d08:	2a20      	cmp	r2, #32
 8002d0a:	d004      	beq.n	8002d16 <__aeabi_d2f+0xbe>
 8002d0c:	4a14      	ldr	r2, [pc, #80]	; (8002d60 <__aeabi_d2f+0x108>)
 8002d0e:	4694      	mov	ip, r2
 8002d10:	4463      	add	r3, ip
 8002d12:	4098      	lsls	r0, r3
 8002d14:	4305      	orrs	r5, r0
 8002d16:	0029      	movs	r1, r5
 8002d18:	1e4d      	subs	r5, r1, #1
 8002d1a:	41a9      	sbcs	r1, r5
 8002d1c:	4331      	orrs	r1, r6
 8002d1e:	2600      	movs	r6, #0
 8002d20:	074b      	lsls	r3, r1, #29
 8002d22:	d1ce      	bne.n	8002cc2 <__aeabi_d2f+0x6a>
 8002d24:	2080      	movs	r0, #128	; 0x80
 8002d26:	000b      	movs	r3, r1
 8002d28:	04c0      	lsls	r0, r0, #19
 8002d2a:	2201      	movs	r2, #1
 8002d2c:	4003      	ands	r3, r0
 8002d2e:	4201      	tst	r1, r0
 8002d30:	d1d3      	bne.n	8002cda <__aeabi_d2f+0x82>
 8002d32:	e7af      	b.n	8002c94 <__aeabi_d2f+0x3c>
 8002d34:	2300      	movs	r3, #0
 8002d36:	e7ac      	b.n	8002c92 <__aeabi_d2f+0x3a>
 8002d38:	490a      	ldr	r1, [pc, #40]	; (8002d64 <__aeabi_d2f+0x10c>)
 8002d3a:	468c      	mov	ip, r1
 8002d3c:	0029      	movs	r1, r5
 8002d3e:	4463      	add	r3, ip
 8002d40:	40d1      	lsrs	r1, r2
 8002d42:	409d      	lsls	r5, r3
 8002d44:	000a      	movs	r2, r1
 8002d46:	0029      	movs	r1, r5
 8002d48:	4098      	lsls	r0, r3
 8002d4a:	1e4d      	subs	r5, r1, #1
 8002d4c:	41a9      	sbcs	r1, r5
 8002d4e:	4301      	orrs	r1, r0
 8002d50:	4311      	orrs	r1, r2
 8002d52:	e7e4      	b.n	8002d1e <__aeabi_d2f+0xc6>
 8002d54:	0033      	movs	r3, r6
 8002d56:	e79d      	b.n	8002c94 <__aeabi_d2f+0x3c>
 8002d58:	000007fe 	.word	0x000007fe
 8002d5c:	fffffc80 	.word	0xfffffc80
 8002d60:	fffffca2 	.word	0xfffffca2
 8002d64:	fffffc82 	.word	0xfffffc82

08002d68 <__clzsi2>:
 8002d68:	211c      	movs	r1, #28
 8002d6a:	2301      	movs	r3, #1
 8002d6c:	041b      	lsls	r3, r3, #16
 8002d6e:	4298      	cmp	r0, r3
 8002d70:	d301      	bcc.n	8002d76 <__clzsi2+0xe>
 8002d72:	0c00      	lsrs	r0, r0, #16
 8002d74:	3910      	subs	r1, #16
 8002d76:	0a1b      	lsrs	r3, r3, #8
 8002d78:	4298      	cmp	r0, r3
 8002d7a:	d301      	bcc.n	8002d80 <__clzsi2+0x18>
 8002d7c:	0a00      	lsrs	r0, r0, #8
 8002d7e:	3908      	subs	r1, #8
 8002d80:	091b      	lsrs	r3, r3, #4
 8002d82:	4298      	cmp	r0, r3
 8002d84:	d301      	bcc.n	8002d8a <__clzsi2+0x22>
 8002d86:	0900      	lsrs	r0, r0, #4
 8002d88:	3904      	subs	r1, #4
 8002d8a:	a202      	add	r2, pc, #8	; (adr r2, 8002d94 <__clzsi2+0x2c>)
 8002d8c:	5c10      	ldrb	r0, [r2, r0]
 8002d8e:	1840      	adds	r0, r0, r1
 8002d90:	4770      	bx	lr
 8002d92:	46c0      	nop			; (mov r8, r8)
 8002d94:	02020304 	.word	0x02020304
 8002d98:	01010101 	.word	0x01010101
	...

08002da4 <__clzdi2>:
 8002da4:	b510      	push	{r4, lr}
 8002da6:	2900      	cmp	r1, #0
 8002da8:	d103      	bne.n	8002db2 <__clzdi2+0xe>
 8002daa:	f7ff ffdd 	bl	8002d68 <__clzsi2>
 8002dae:	3020      	adds	r0, #32
 8002db0:	e002      	b.n	8002db8 <__clzdi2+0x14>
 8002db2:	1c08      	adds	r0, r1, #0
 8002db4:	f7ff ffd8 	bl	8002d68 <__clzsi2>
 8002db8:	bd10      	pop	{r4, pc}
 8002dba:	46c0      	nop			; (mov r8, r8)

08002dbc <SX1278_SPIRead>:
 */

#include "SX1278.h"
#include <string.h>

uint8_t SX1278_SPIRead(SX1278_t *module, uint8_t addr) {
 8002dbc:	b5b0      	push	{r4, r5, r7, lr}
 8002dbe:	b084      	sub	sp, #16
 8002dc0:	af00      	add	r7, sp, #0
 8002dc2:	6078      	str	r0, [r7, #4]
 8002dc4:	000a      	movs	r2, r1
 8002dc6:	1cfb      	adds	r3, r7, #3
 8002dc8:	701a      	strb	r2, [r3, #0]
	uint8_t tmp;
	SX1278_hw_SPICommand(module->hw, addr);
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681a      	ldr	r2, [r3, #0]
 8002dce:	1cfb      	adds	r3, r7, #3
 8002dd0:	781b      	ldrb	r3, [r3, #0]
 8002dd2:	0019      	movs	r1, r3
 8002dd4:	0010      	movs	r0, r2
 8002dd6:	f000 fb37 	bl	8003448 <SX1278_hw_SPICommand>
	tmp = SX1278_hw_SPIReadByte(module->hw);
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	250f      	movs	r5, #15
 8002de0:	197c      	adds	r4, r7, r5
 8002de2:	0018      	movs	r0, r3
 8002de4:	f000 fb52 	bl	800348c <SX1278_hw_SPIReadByte>
 8002de8:	0003      	movs	r3, r0
 8002dea:	7023      	strb	r3, [r4, #0]
	SX1278_hw_SetNSS(module->hw, 1);
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	2101      	movs	r1, #1
 8002df2:	0018      	movs	r0, r3
 8002df4:	f000 faed 	bl	80033d2 <SX1278_hw_SetNSS>
	return tmp;
 8002df8:	197b      	adds	r3, r7, r5
 8002dfa:	781b      	ldrb	r3, [r3, #0]
}
 8002dfc:	0018      	movs	r0, r3
 8002dfe:	46bd      	mov	sp, r7
 8002e00:	b004      	add	sp, #16
 8002e02:	bdb0      	pop	{r4, r5, r7, pc}

08002e04 <SX1278_SPIWrite>:

void SX1278_SPIWrite(SX1278_t *module, uint8_t addr, uint8_t cmd) {
 8002e04:	b580      	push	{r7, lr}
 8002e06:	b082      	sub	sp, #8
 8002e08:	af00      	add	r7, sp, #0
 8002e0a:	6078      	str	r0, [r7, #4]
 8002e0c:	0008      	movs	r0, r1
 8002e0e:	0011      	movs	r1, r2
 8002e10:	1cfb      	adds	r3, r7, #3
 8002e12:	1c02      	adds	r2, r0, #0
 8002e14:	701a      	strb	r2, [r3, #0]
 8002e16:	1cbb      	adds	r3, r7, #2
 8002e18:	1c0a      	adds	r2, r1, #0
 8002e1a:	701a      	strb	r2, [r3, #0]
	SX1278_hw_SetNSS(module->hw, 0);
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	2100      	movs	r1, #0
 8002e22:	0018      	movs	r0, r3
 8002e24:	f000 fad5 	bl	80033d2 <SX1278_hw_SetNSS>
	SX1278_hw_SPICommand(module->hw, addr | 0x80);
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	6818      	ldr	r0, [r3, #0]
 8002e2c:	1cfb      	adds	r3, r7, #3
 8002e2e:	781b      	ldrb	r3, [r3, #0]
 8002e30:	2280      	movs	r2, #128	; 0x80
 8002e32:	4252      	negs	r2, r2
 8002e34:	4313      	orrs	r3, r2
 8002e36:	b2db      	uxtb	r3, r3
 8002e38:	0019      	movs	r1, r3
 8002e3a:	f000 fb05 	bl	8003448 <SX1278_hw_SPICommand>
	SX1278_hw_SPICommand(module->hw, cmd);
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681a      	ldr	r2, [r3, #0]
 8002e42:	1cbb      	adds	r3, r7, #2
 8002e44:	781b      	ldrb	r3, [r3, #0]
 8002e46:	0019      	movs	r1, r3
 8002e48:	0010      	movs	r0, r2
 8002e4a:	f000 fafd 	bl	8003448 <SX1278_hw_SPICommand>
	SX1278_hw_SetNSS(module->hw, 1);
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	2101      	movs	r1, #1
 8002e54:	0018      	movs	r0, r3
 8002e56:	f000 fabc 	bl	80033d2 <SX1278_hw_SetNSS>
}
 8002e5a:	46c0      	nop			; (mov r8, r8)
 8002e5c:	46bd      	mov	sp, r7
 8002e5e:	b002      	add	sp, #8
 8002e60:	bd80      	pop	{r7, pc}

08002e62 <SX1278_SPIBurstWrite>:
		SX1278_hw_SetNSS(module->hw, 1);
	}
}

void SX1278_SPIBurstWrite(SX1278_t *module, uint8_t addr, uint8_t *txBuf,
		uint8_t length) {
 8002e62:	b590      	push	{r4, r7, lr}
 8002e64:	b087      	sub	sp, #28
 8002e66:	af00      	add	r7, sp, #0
 8002e68:	60f8      	str	r0, [r7, #12]
 8002e6a:	0008      	movs	r0, r1
 8002e6c:	607a      	str	r2, [r7, #4]
 8002e6e:	0019      	movs	r1, r3
 8002e70:	240b      	movs	r4, #11
 8002e72:	193b      	adds	r3, r7, r4
 8002e74:	1c02      	adds	r2, r0, #0
 8002e76:	701a      	strb	r2, [r3, #0]
 8002e78:	200a      	movs	r0, #10
 8002e7a:	183b      	adds	r3, r7, r0
 8002e7c:	1c0a      	adds	r2, r1, #0
 8002e7e:	701a      	strb	r2, [r3, #0]
	unsigned char i;
	if (length <= 1) {
 8002e80:	183b      	adds	r3, r7, r0
 8002e82:	781b      	ldrb	r3, [r3, #0]
 8002e84:	2b01      	cmp	r3, #1
 8002e86:	d934      	bls.n	8002ef2 <SX1278_SPIBurstWrite+0x90>
		return;
	} else {
		SX1278_hw_SetNSS(module->hw, 0);
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	2100      	movs	r1, #0
 8002e8e:	0018      	movs	r0, r3
 8002e90:	f000 fa9f 	bl	80033d2 <SX1278_hw_SetNSS>
		SX1278_hw_SPICommand(module->hw, addr | 0x80);
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	6818      	ldr	r0, [r3, #0]
 8002e98:	193b      	adds	r3, r7, r4
 8002e9a:	781b      	ldrb	r3, [r3, #0]
 8002e9c:	2280      	movs	r2, #128	; 0x80
 8002e9e:	4252      	negs	r2, r2
 8002ea0:	4313      	orrs	r3, r2
 8002ea2:	b2db      	uxtb	r3, r3
 8002ea4:	0019      	movs	r1, r3
 8002ea6:	f000 facf 	bl	8003448 <SX1278_hw_SPICommand>
		for (i = 0; i < length; i++) {
 8002eaa:	2317      	movs	r3, #23
 8002eac:	18fb      	adds	r3, r7, r3
 8002eae:	2200      	movs	r2, #0
 8002eb0:	701a      	strb	r2, [r3, #0]
 8002eb2:	e00f      	b.n	8002ed4 <SX1278_SPIBurstWrite+0x72>
			SX1278_hw_SPICommand(module->hw, *(txBuf + i));
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	6818      	ldr	r0, [r3, #0]
 8002eb8:	2417      	movs	r4, #23
 8002eba:	193b      	adds	r3, r7, r4
 8002ebc:	781b      	ldrb	r3, [r3, #0]
 8002ebe:	687a      	ldr	r2, [r7, #4]
 8002ec0:	18d3      	adds	r3, r2, r3
 8002ec2:	781b      	ldrb	r3, [r3, #0]
 8002ec4:	0019      	movs	r1, r3
 8002ec6:	f000 fabf 	bl	8003448 <SX1278_hw_SPICommand>
		for (i = 0; i < length; i++) {
 8002eca:	193b      	adds	r3, r7, r4
 8002ecc:	781a      	ldrb	r2, [r3, #0]
 8002ece:	193b      	adds	r3, r7, r4
 8002ed0:	3201      	adds	r2, #1
 8002ed2:	701a      	strb	r2, [r3, #0]
 8002ed4:	2317      	movs	r3, #23
 8002ed6:	18fa      	adds	r2, r7, r3
 8002ed8:	230a      	movs	r3, #10
 8002eda:	18fb      	adds	r3, r7, r3
 8002edc:	7812      	ldrb	r2, [r2, #0]
 8002ede:	781b      	ldrb	r3, [r3, #0]
 8002ee0:	429a      	cmp	r2, r3
 8002ee2:	d3e7      	bcc.n	8002eb4 <SX1278_SPIBurstWrite+0x52>
		}
		SX1278_hw_SetNSS(module->hw, 1);
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	2101      	movs	r1, #1
 8002eea:	0018      	movs	r0, r3
 8002eec:	f000 fa71 	bl	80033d2 <SX1278_hw_SetNSS>
 8002ef0:	e000      	b.n	8002ef4 <SX1278_SPIBurstWrite+0x92>
		return;
 8002ef2:	46c0      	nop			; (mov r8, r8)
	}
}
 8002ef4:	46bd      	mov	sp, r7
 8002ef6:	b007      	add	sp, #28
 8002ef8:	bd90      	pop	{r4, r7, pc}
	...

08002efc <SX1278_config>:

void SX1278_config(SX1278_t *module) {
 8002efc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002efe:	b08b      	sub	sp, #44	; 0x2c
 8002f00:	af00      	add	r7, sp, #0
 8002f02:	6178      	str	r0, [r7, #20]
	SX1278_sleep(module); //Change modem mode Must in Sleep mode
 8002f04:	697b      	ldr	r3, [r7, #20]
 8002f06:	0018      	movs	r0, r3
 8002f08:	f000 f935 	bl	8003176 <SX1278_sleep>
	SX1278_hw_DelayMs(15);
 8002f0c:	200f      	movs	r0, #15
 8002f0e:	f000 fae8 	bl	80034e2 <SX1278_hw_DelayMs>

	SX1278_entryLoRa(module);
 8002f12:	697b      	ldr	r3, [r7, #20]
 8002f14:	0018      	movs	r0, r3
 8002f16:	f000 f93f 	bl	8003198 <SX1278_entryLoRa>
	//SX1278_SPIWrite(module, 0x5904); //?? Change digital regulator form 1.6V to 1.47V: see errata note

	uint64_t freq = ((uint64_t) module->frequency << 19) / 32000000;
 8002f1a:	697b      	ldr	r3, [r7, #20]
 8002f1c:	689a      	ldr	r2, [r3, #8]
 8002f1e:	68db      	ldr	r3, [r3, #12]
 8002f20:	0b51      	lsrs	r1, r2, #13
 8002f22:	04dd      	lsls	r5, r3, #19
 8002f24:	430d      	orrs	r5, r1
 8002f26:	04d4      	lsls	r4, r2, #19
 8002f28:	4a84      	ldr	r2, [pc, #528]	; (800313c <SX1278_config+0x240>)
 8002f2a:	2300      	movs	r3, #0
 8002f2c:	0020      	movs	r0, r4
 8002f2e:	0029      	movs	r1, r5
 8002f30:	f7fd faf4 	bl	800051c <__aeabi_uldivmod>
 8002f34:	0002      	movs	r2, r0
 8002f36:	000b      	movs	r3, r1
 8002f38:	623a      	str	r2, [r7, #32]
 8002f3a:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t freq_reg[3];
	freq_reg[0] = (uint8_t) (freq >> 16);
 8002f3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f3e:	041b      	lsls	r3, r3, #16
 8002f40:	6a3a      	ldr	r2, [r7, #32]
 8002f42:	0c12      	lsrs	r2, r2, #16
 8002f44:	60ba      	str	r2, [r7, #8]
 8002f46:	68ba      	ldr	r2, [r7, #8]
 8002f48:	431a      	orrs	r2, r3
 8002f4a:	60ba      	str	r2, [r7, #8]
 8002f4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f4e:	0c1b      	lsrs	r3, r3, #16
 8002f50:	60fb      	str	r3, [r7, #12]
 8002f52:	7a3a      	ldrb	r2, [r7, #8]
 8002f54:	210c      	movs	r1, #12
 8002f56:	2410      	movs	r4, #16
 8002f58:	193b      	adds	r3, r7, r4
 8002f5a:	185b      	adds	r3, r3, r1
 8002f5c:	701a      	strb	r2, [r3, #0]
	freq_reg[1] = (uint8_t) (freq >> 8);
 8002f5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f60:	061b      	lsls	r3, r3, #24
 8002f62:	6a3a      	ldr	r2, [r7, #32]
 8002f64:	0a12      	lsrs	r2, r2, #8
 8002f66:	603a      	str	r2, [r7, #0]
 8002f68:	683a      	ldr	r2, [r7, #0]
 8002f6a:	431a      	orrs	r2, r3
 8002f6c:	603a      	str	r2, [r7, #0]
 8002f6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f70:	0a1b      	lsrs	r3, r3, #8
 8002f72:	607b      	str	r3, [r7, #4]
 8002f74:	783a      	ldrb	r2, [r7, #0]
 8002f76:	193b      	adds	r3, r7, r4
 8002f78:	185b      	adds	r3, r3, r1
 8002f7a:	705a      	strb	r2, [r3, #1]
	freq_reg[2] = (uint8_t) (freq >> 0);
 8002f7c:	6a3a      	ldr	r2, [r7, #32]
 8002f7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f80:	1c13      	adds	r3, r2, #0
 8002f82:	b2da      	uxtb	r2, r3
 8002f84:	193b      	adds	r3, r7, r4
 8002f86:	185b      	adds	r3, r3, r1
 8002f88:	709a      	strb	r2, [r3, #2]
	SX1278_SPIBurstWrite(module, LR_RegFrMsb, (uint8_t*) freq_reg, 3); //setting  frequency parameter
 8002f8a:	193b      	adds	r3, r7, r4
 8002f8c:	185a      	adds	r2, r3, r1
 8002f8e:	6978      	ldr	r0, [r7, #20]
 8002f90:	2303      	movs	r3, #3
 8002f92:	2106      	movs	r1, #6
 8002f94:	f7ff ff65 	bl	8002e62 <SX1278_SPIBurstWrite>

	SX1278_SPIWrite(module, RegSyncWord, 0x34);
 8002f98:	697b      	ldr	r3, [r7, #20]
 8002f9a:	2234      	movs	r2, #52	; 0x34
 8002f9c:	2139      	movs	r1, #57	; 0x39
 8002f9e:	0018      	movs	r0, r3
 8002fa0:	f7ff ff30 	bl	8002e04 <SX1278_SPIWrite>

	//setting base parameter
	SX1278_SPIWrite(module, LR_RegPaConfig, SX1278_Power[module->power]); //Setting output power parameter
 8002fa4:	697b      	ldr	r3, [r7, #20]
 8002fa6:	7c1b      	ldrb	r3, [r3, #16]
 8002fa8:	001a      	movs	r2, r3
 8002faa:	4b65      	ldr	r3, [pc, #404]	; (8003140 <SX1278_config+0x244>)
 8002fac:	5c9a      	ldrb	r2, [r3, r2]
 8002fae:	697b      	ldr	r3, [r7, #20]
 8002fb0:	2109      	movs	r1, #9
 8002fb2:	0018      	movs	r0, r3
 8002fb4:	f7ff ff26 	bl	8002e04 <SX1278_SPIWrite>

	SX1278_SPIWrite(module, LR_RegOcp, 0x0B);			//RegOcp,Close Ocp
 8002fb8:	697b      	ldr	r3, [r7, #20]
 8002fba:	220b      	movs	r2, #11
 8002fbc:	210b      	movs	r1, #11
 8002fbe:	0018      	movs	r0, r3
 8002fc0:	f7ff ff20 	bl	8002e04 <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegLna, 0x23);		//RegLNA,High & LNA Enable
 8002fc4:	697b      	ldr	r3, [r7, #20]
 8002fc6:	2223      	movs	r2, #35	; 0x23
 8002fc8:	210c      	movs	r1, #12
 8002fca:	0018      	movs	r0, r3
 8002fcc:	f7ff ff1a 	bl	8002e04 <SX1278_SPIWrite>
	if (SX1278_SpreadFactor[module->LoRa_SF] == 6) {	//SFactor=6
 8002fd0:	697b      	ldr	r3, [r7, #20]
 8002fd2:	7c5b      	ldrb	r3, [r3, #17]
 8002fd4:	001a      	movs	r2, r3
 8002fd6:	4b5b      	ldr	r3, [pc, #364]	; (8003144 <SX1278_config+0x248>)
 8002fd8:	5c9b      	ldrb	r3, [r3, r2]
 8002fda:	2b06      	cmp	r3, #6
 8002fdc:	d159      	bne.n	8003092 <SX1278_config+0x196>
		uint8_t tmp;
		SX1278_SPIWrite(module,
		LR_RegModemConfig1,
				((SX1278_LoRaBandwidth[module->LoRa_BW] << 4)
 8002fde:	697b      	ldr	r3, [r7, #20]
 8002fe0:	7c9b      	ldrb	r3, [r3, #18]
 8002fe2:	001a      	movs	r2, r3
 8002fe4:	4b58      	ldr	r3, [pc, #352]	; (8003148 <SX1278_config+0x24c>)
 8002fe6:	5c9b      	ldrb	r3, [r3, r2]
 8002fe8:	011b      	lsls	r3, r3, #4
 8002fea:	b2da      	uxtb	r2, r3
						+ (SX1278_CodingRate[module->LoRa_CR] << 1) + 0x01)); //Implicit Enable CRC Enable(0x02) & Error Coding rate 4/5(0x01), 4/6(0x02), 4/7(0x03), 4/8(0x04)
 8002fec:	697b      	ldr	r3, [r7, #20]
 8002fee:	7cdb      	ldrb	r3, [r3, #19]
 8002ff0:	0019      	movs	r1, r3
 8002ff2:	4b56      	ldr	r3, [pc, #344]	; (800314c <SX1278_config+0x250>)
 8002ff4:	5c5b      	ldrb	r3, [r3, r1]
 8002ff6:	18db      	adds	r3, r3, r3
 8002ff8:	b2db      	uxtb	r3, r3
 8002ffa:	18d3      	adds	r3, r2, r3
 8002ffc:	b2db      	uxtb	r3, r3
		SX1278_SPIWrite(module,
 8002ffe:	3301      	adds	r3, #1
 8003000:	b2da      	uxtb	r2, r3
 8003002:	697b      	ldr	r3, [r7, #20]
 8003004:	211d      	movs	r1, #29
 8003006:	0018      	movs	r0, r3
 8003008:	f7ff fefc 	bl	8002e04 <SX1278_SPIWrite>

		SX1278_SPIWrite(module,
		LR_RegModemConfig2,
				((SX1278_SpreadFactor[module->LoRa_SF] << 4)
 800300c:	697b      	ldr	r3, [r7, #20]
 800300e:	7c5b      	ldrb	r3, [r3, #17]
 8003010:	001a      	movs	r2, r3
 8003012:	4b4c      	ldr	r3, [pc, #304]	; (8003144 <SX1278_config+0x248>)
 8003014:	5c9b      	ldrb	r3, [r3, r2]
 8003016:	011b      	lsls	r3, r3, #4
 8003018:	b2da      	uxtb	r2, r3
						+ (SX1278_CRC_Sum[module->LoRa_CRC_sum] << 2) + 0x03));
 800301a:	697b      	ldr	r3, [r7, #20]
 800301c:	7d1b      	ldrb	r3, [r3, #20]
 800301e:	0019      	movs	r1, r3
 8003020:	4b4b      	ldr	r3, [pc, #300]	; (8003150 <SX1278_config+0x254>)
 8003022:	5c5b      	ldrb	r3, [r3, r1]
 8003024:	009b      	lsls	r3, r3, #2
 8003026:	b2db      	uxtb	r3, r3
 8003028:	18d3      	adds	r3, r2, r3
 800302a:	b2db      	uxtb	r3, r3
		SX1278_SPIWrite(module,
 800302c:	3303      	adds	r3, #3
 800302e:	b2da      	uxtb	r2, r3
 8003030:	697b      	ldr	r3, [r7, #20]
 8003032:	211e      	movs	r1, #30
 8003034:	0018      	movs	r0, r3
 8003036:	f7ff fee5 	bl	8002e04 <SX1278_SPIWrite>

		tmp = SX1278_SPIRead(module, 0x31);
 800303a:	250f      	movs	r5, #15
 800303c:	0026      	movs	r6, r4
 800303e:	193b      	adds	r3, r7, r4
 8003040:	195c      	adds	r4, r3, r5
 8003042:	697b      	ldr	r3, [r7, #20]
 8003044:	2131      	movs	r1, #49	; 0x31
 8003046:	0018      	movs	r0, r3
 8003048:	f7ff feb8 	bl	8002dbc <SX1278_SPIRead>
 800304c:	0003      	movs	r3, r0
 800304e:	7023      	strb	r3, [r4, #0]
		tmp &= 0xF8;
 8003050:	0028      	movs	r0, r5
 8003052:	0034      	movs	r4, r6
 8003054:	193b      	adds	r3, r7, r4
 8003056:	181b      	adds	r3, r3, r0
 8003058:	193a      	adds	r2, r7, r4
 800305a:	1812      	adds	r2, r2, r0
 800305c:	7812      	ldrb	r2, [r2, #0]
 800305e:	2107      	movs	r1, #7
 8003060:	438a      	bics	r2, r1
 8003062:	701a      	strb	r2, [r3, #0]
		tmp |= 0x05;
 8003064:	193b      	adds	r3, r7, r4
 8003066:	181b      	adds	r3, r3, r0
 8003068:	193a      	adds	r2, r7, r4
 800306a:	1812      	adds	r2, r2, r0
 800306c:	7812      	ldrb	r2, [r2, #0]
 800306e:	2105      	movs	r1, #5
 8003070:	430a      	orrs	r2, r1
 8003072:	701a      	strb	r2, [r3, #0]
		SX1278_SPIWrite(module, 0x31, tmp);
 8003074:	193b      	adds	r3, r7, r4
 8003076:	181b      	adds	r3, r3, r0
 8003078:	781a      	ldrb	r2, [r3, #0]
 800307a:	697b      	ldr	r3, [r7, #20]
 800307c:	2131      	movs	r1, #49	; 0x31
 800307e:	0018      	movs	r0, r3
 8003080:	f7ff fec0 	bl	8002e04 <SX1278_SPIWrite>
		SX1278_SPIWrite(module, 0x37, 0x0C);
 8003084:	697b      	ldr	r3, [r7, #20]
 8003086:	220c      	movs	r2, #12
 8003088:	2137      	movs	r1, #55	; 0x37
 800308a:	0018      	movs	r0, r3
 800308c:	f7ff feba 	bl	8002e04 <SX1278_SPIWrite>
 8003090:	e029      	b.n	80030e6 <SX1278_config+0x1ea>
	} else {
		SX1278_SPIWrite(module,
		LR_RegModemConfig1,
				((SX1278_LoRaBandwidth[module->LoRa_BW] << 4)
 8003092:	697b      	ldr	r3, [r7, #20]
 8003094:	7c9b      	ldrb	r3, [r3, #18]
 8003096:	001a      	movs	r2, r3
 8003098:	4b2b      	ldr	r3, [pc, #172]	; (8003148 <SX1278_config+0x24c>)
 800309a:	5c9b      	ldrb	r3, [r3, r2]
 800309c:	011b      	lsls	r3, r3, #4
 800309e:	b2da      	uxtb	r2, r3
						+ (SX1278_CodingRate[module->LoRa_CR] << 1) + 0x00)); //Explicit Enable CRC Enable(0x02) & Error Coding rate 4/5(0x01), 4/6(0x02), 4/7(0x03), 4/8(0x04)
 80030a0:	697b      	ldr	r3, [r7, #20]
 80030a2:	7cdb      	ldrb	r3, [r3, #19]
 80030a4:	0019      	movs	r1, r3
 80030a6:	4b29      	ldr	r3, [pc, #164]	; (800314c <SX1278_config+0x250>)
 80030a8:	5c5b      	ldrb	r3, [r3, r1]
 80030aa:	18db      	adds	r3, r3, r3
 80030ac:	b2db      	uxtb	r3, r3
		SX1278_SPIWrite(module,
 80030ae:	18d3      	adds	r3, r2, r3
 80030b0:	b2da      	uxtb	r2, r3
 80030b2:	697b      	ldr	r3, [r7, #20]
 80030b4:	211d      	movs	r1, #29
 80030b6:	0018      	movs	r0, r3
 80030b8:	f7ff fea4 	bl	8002e04 <SX1278_SPIWrite>

		SX1278_SPIWrite(module,
		LR_RegModemConfig2,
				((SX1278_SpreadFactor[module->LoRa_SF] << 4)
 80030bc:	697b      	ldr	r3, [r7, #20]
 80030be:	7c5b      	ldrb	r3, [r3, #17]
 80030c0:	001a      	movs	r2, r3
 80030c2:	4b20      	ldr	r3, [pc, #128]	; (8003144 <SX1278_config+0x248>)
 80030c4:	5c9b      	ldrb	r3, [r3, r2]
 80030c6:	011b      	lsls	r3, r3, #4
 80030c8:	b2da      	uxtb	r2, r3
						+ (SX1278_CRC_Sum[module->LoRa_CRC_sum] << 2) + 0x00)); //SFactor &  LNA gain set by the internal AGC loop
 80030ca:	697b      	ldr	r3, [r7, #20]
 80030cc:	7d1b      	ldrb	r3, [r3, #20]
 80030ce:	0019      	movs	r1, r3
 80030d0:	4b1f      	ldr	r3, [pc, #124]	; (8003150 <SX1278_config+0x254>)
 80030d2:	5c5b      	ldrb	r3, [r3, r1]
 80030d4:	009b      	lsls	r3, r3, #2
 80030d6:	b2db      	uxtb	r3, r3
		SX1278_SPIWrite(module,
 80030d8:	18d3      	adds	r3, r2, r3
 80030da:	b2da      	uxtb	r2, r3
 80030dc:	697b      	ldr	r3, [r7, #20]
 80030de:	211e      	movs	r1, #30
 80030e0:	0018      	movs	r0, r3
 80030e2:	f7ff fe8f 	bl	8002e04 <SX1278_SPIWrite>
	}

	SX1278_SPIWrite(module, LR_RegModemConfig3, 0x04);
 80030e6:	697b      	ldr	r3, [r7, #20]
 80030e8:	2204      	movs	r2, #4
 80030ea:	2126      	movs	r1, #38	; 0x26
 80030ec:	0018      	movs	r0, r3
 80030ee:	f7ff fe89 	bl	8002e04 <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegSymbTimeoutLsb, 0x08); //RegSymbTimeoutLsb Timeout = 0x3FF(Max)
 80030f2:	697b      	ldr	r3, [r7, #20]
 80030f4:	2208      	movs	r2, #8
 80030f6:	211f      	movs	r1, #31
 80030f8:	0018      	movs	r0, r3
 80030fa:	f7ff fe83 	bl	8002e04 <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegPreambleMsb, 0x00); //RegPreambleMsb
 80030fe:	697b      	ldr	r3, [r7, #20]
 8003100:	2200      	movs	r2, #0
 8003102:	2120      	movs	r1, #32
 8003104:	0018      	movs	r0, r3
 8003106:	f7ff fe7d 	bl	8002e04 <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegPreambleLsb, 8); //RegPreambleLsb 8+4=12byte Preamble
 800310a:	697b      	ldr	r3, [r7, #20]
 800310c:	2208      	movs	r2, #8
 800310e:	2121      	movs	r1, #33	; 0x21
 8003110:	0018      	movs	r0, r3
 8003112:	f7ff fe77 	bl	8002e04 <SX1278_SPIWrite>
	SX1278_SPIWrite(module, REG_LR_DIOMAPPING2, 0x01); //RegDioMapping2 DIO5=00, DIO4=01
 8003116:	697b      	ldr	r3, [r7, #20]
 8003118:	2201      	movs	r2, #1
 800311a:	2141      	movs	r1, #65	; 0x41
 800311c:	0018      	movs	r0, r3
 800311e:	f7ff fe71 	bl	8002e04 <SX1278_SPIWrite>
	module->readBytes = 0;
 8003122:	697a      	ldr	r2, [r7, #20]
 8003124:	2318      	movs	r3, #24
 8003126:	33ff      	adds	r3, #255	; 0xff
 8003128:	2100      	movs	r1, #0
 800312a:	54d1      	strb	r1, [r2, r3]
	SX1278_standby(module); //Entry standby mode
 800312c:	697b      	ldr	r3, [r7, #20]
 800312e:	0018      	movs	r0, r3
 8003130:	f000 f810 	bl	8003154 <SX1278_standby>
}
 8003134:	46c0      	nop			; (mov r8, r8)
 8003136:	46bd      	mov	sp, r7
 8003138:	b00b      	add	sp, #44	; 0x2c
 800313a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800313c:	01e84800 	.word	0x01e84800
 8003140:	0800a4b0 	.word	0x0800a4b0
 8003144:	0800a4b4 	.word	0x0800a4b4
 8003148:	0800a4bc 	.word	0x0800a4bc
 800314c:	0800a4c8 	.word	0x0800a4c8
 8003150:	0800a4cc 	.word	0x0800a4cc

08003154 <SX1278_standby>:

void SX1278_standby(SX1278_t *module) {
 8003154:	b580      	push	{r7, lr}
 8003156:	b082      	sub	sp, #8
 8003158:	af00      	add	r7, sp, #0
 800315a:	6078      	str	r0, [r7, #4]
	SX1278_SPIWrite(module, LR_RegOpMode, 0x09);
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	2209      	movs	r2, #9
 8003160:	2101      	movs	r1, #1
 8003162:	0018      	movs	r0, r3
 8003164:	f7ff fe4e 	bl	8002e04 <SX1278_SPIWrite>
	module->status = STANDBY;
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	2201      	movs	r2, #1
 800316c:	759a      	strb	r2, [r3, #22]
}
 800316e:	46c0      	nop			; (mov r8, r8)
 8003170:	46bd      	mov	sp, r7
 8003172:	b002      	add	sp, #8
 8003174:	bd80      	pop	{r7, pc}

08003176 <SX1278_sleep>:

void SX1278_sleep(SX1278_t *module) {
 8003176:	b580      	push	{r7, lr}
 8003178:	b082      	sub	sp, #8
 800317a:	af00      	add	r7, sp, #0
 800317c:	6078      	str	r0, [r7, #4]
	SX1278_SPIWrite(module, LR_RegOpMode, 0x08);
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	2208      	movs	r2, #8
 8003182:	2101      	movs	r1, #1
 8003184:	0018      	movs	r0, r3
 8003186:	f7ff fe3d 	bl	8002e04 <SX1278_SPIWrite>
	module->status = SLEEP;
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	2200      	movs	r2, #0
 800318e:	759a      	strb	r2, [r3, #22]
}
 8003190:	46c0      	nop			; (mov r8, r8)
 8003192:	46bd      	mov	sp, r7
 8003194:	b002      	add	sp, #8
 8003196:	bd80      	pop	{r7, pc}

08003198 <SX1278_entryLoRa>:

void SX1278_entryLoRa(SX1278_t *module) {
 8003198:	b580      	push	{r7, lr}
 800319a:	b082      	sub	sp, #8
 800319c:	af00      	add	r7, sp, #0
 800319e:	6078      	str	r0, [r7, #4]
	SX1278_SPIWrite(module, LR_RegOpMode, 0x88);
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	2288      	movs	r2, #136	; 0x88
 80031a4:	2101      	movs	r1, #1
 80031a6:	0018      	movs	r0, r3
 80031a8:	f7ff fe2c 	bl	8002e04 <SX1278_SPIWrite>
}
 80031ac:	46c0      	nop			; (mov r8, r8)
 80031ae:	46bd      	mov	sp, r7
 80031b0:	b002      	add	sp, #8
 80031b2:	bd80      	pop	{r7, pc}

080031b4 <SX1278_clearLoRaIrq>:

void SX1278_clearLoRaIrq(SX1278_t *module) {
 80031b4:	b580      	push	{r7, lr}
 80031b6:	b082      	sub	sp, #8
 80031b8:	af00      	add	r7, sp, #0
 80031ba:	6078      	str	r0, [r7, #4]
	SX1278_SPIWrite(module, LR_RegIrqFlags, 0xFF);
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	22ff      	movs	r2, #255	; 0xff
 80031c0:	2112      	movs	r1, #18
 80031c2:	0018      	movs	r0, r3
 80031c4:	f7ff fe1e 	bl	8002e04 <SX1278_SPIWrite>
}
 80031c8:	46c0      	nop			; (mov r8, r8)
 80031ca:	46bd      	mov	sp, r7
 80031cc:	b002      	add	sp, #8
 80031ce:	bd80      	pop	{r7, pc}

080031d0 <SX1278_LoRaEntryTx>:
		SX1278_clearLoRaIrq(module);
	}
	return module->readBytes;
}

int SX1278_LoRaEntryTx(SX1278_t *module, uint8_t length, uint32_t timeout) {
 80031d0:	b5b0      	push	{r4, r5, r7, lr}
 80031d2:	b086      	sub	sp, #24
 80031d4:	af00      	add	r7, sp, #0
 80031d6:	60f8      	str	r0, [r7, #12]
 80031d8:	607a      	str	r2, [r7, #4]
 80031da:	240b      	movs	r4, #11
 80031dc:	193b      	adds	r3, r7, r4
 80031de:	1c0a      	adds	r2, r1, #0
 80031e0:	701a      	strb	r2, [r3, #0]
	uint8_t addr;
	uint8_t temp;

	module->packetLength = length;
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	193a      	adds	r2, r7, r4
 80031e6:	7812      	ldrb	r2, [r2, #0]
 80031e8:	755a      	strb	r2, [r3, #21]

	SX1278_config(module); //setting base parameter
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	0018      	movs	r0, r3
 80031ee:	f7ff fe85 	bl	8002efc <SX1278_config>
	SX1278_SPIWrite(module, REG_LR_PADAC, 0x87);	//Tx for 20dBm
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	2287      	movs	r2, #135	; 0x87
 80031f6:	214d      	movs	r1, #77	; 0x4d
 80031f8:	0018      	movs	r0, r3
 80031fa:	f7ff fe03 	bl	8002e04 <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegHopPeriod, 0x00); //RegHopPeriod NO FHSS
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	2200      	movs	r2, #0
 8003202:	2124      	movs	r1, #36	; 0x24
 8003204:	0018      	movs	r0, r3
 8003206:	f7ff fdfd 	bl	8002e04 <SX1278_SPIWrite>
	SX1278_SPIWrite(module, REG_LR_DIOMAPPING1, 0x41); //DIO0=01, DIO1=00,DIO2=00, DIO3=01
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	2241      	movs	r2, #65	; 0x41
 800320e:	2140      	movs	r1, #64	; 0x40
 8003210:	0018      	movs	r0, r3
 8003212:	f7ff fdf7 	bl	8002e04 <SX1278_SPIWrite>
	SX1278_clearLoRaIrq(module);
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	0018      	movs	r0, r3
 800321a:	f7ff ffcb 	bl	80031b4 <SX1278_clearLoRaIrq>
	SX1278_SPIWrite(module, LR_RegIrqFlagsMask, 0xF7); //Open TxDone interrupt
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	22f7      	movs	r2, #247	; 0xf7
 8003222:	2111      	movs	r1, #17
 8003224:	0018      	movs	r0, r3
 8003226:	f7ff fded 	bl	8002e04 <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegPayloadLength, length); //RegPayloadLength 21byte
 800322a:	193b      	adds	r3, r7, r4
 800322c:	781a      	ldrb	r2, [r3, #0]
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	2122      	movs	r1, #34	; 0x22
 8003232:	0018      	movs	r0, r3
 8003234:	f7ff fde6 	bl	8002e04 <SX1278_SPIWrite>
	addr = SX1278_SPIRead(module, LR_RegFifoTxBaseAddr); //RegFiFoTxBaseAddr
 8003238:	2517      	movs	r5, #23
 800323a:	197c      	adds	r4, r7, r5
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	210e      	movs	r1, #14
 8003240:	0018      	movs	r0, r3
 8003242:	f7ff fdbb 	bl	8002dbc <SX1278_SPIRead>
 8003246:	0003      	movs	r3, r0
 8003248:	7023      	strb	r3, [r4, #0]
	SX1278_SPIWrite(module, LR_RegFifoAddrPtr, addr); //RegFifoAddrPtr
 800324a:	197b      	adds	r3, r7, r5
 800324c:	781a      	ldrb	r2, [r3, #0]
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	210d      	movs	r1, #13
 8003252:	0018      	movs	r0, r3
 8003254:	f7ff fdd6 	bl	8002e04 <SX1278_SPIWrite>

	while (1) {
		temp = SX1278_SPIRead(module, LR_RegPayloadLength);
 8003258:	2516      	movs	r5, #22
 800325a:	197c      	adds	r4, r7, r5
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	2122      	movs	r1, #34	; 0x22
 8003260:	0018      	movs	r0, r3
 8003262:	f7ff fdab 	bl	8002dbc <SX1278_SPIRead>
 8003266:	0003      	movs	r3, r0
 8003268:	7023      	strb	r3, [r4, #0]
		if ((temp & length) == length) {
 800326a:	197b      	adds	r3, r7, r5
 800326c:	210b      	movs	r1, #11
 800326e:	187a      	adds	r2, r7, r1
 8003270:	781b      	ldrb	r3, [r3, #0]
 8003272:	7812      	ldrb	r2, [r2, #0]
 8003274:	4013      	ands	r3, r2
 8003276:	b2db      	uxtb	r3, r3
 8003278:	187a      	adds	r2, r7, r1
 800327a:	7812      	ldrb	r2, [r2, #0]
 800327c:	429a      	cmp	r2, r3
 800327e:	d104      	bne.n	800328a <SX1278_LoRaEntryTx+0xba>
			module->status = TX;
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	2202      	movs	r2, #2
 8003284:	759a      	strb	r2, [r3, #22]
			return 1;
 8003286:	2301      	movs	r3, #1
 8003288:	e00f      	b.n	80032aa <SX1278_LoRaEntryTx+0xda>
		}

		if (--timeout == 0) {
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	3b01      	subs	r3, #1
 800328e:	607b      	str	r3, [r7, #4]
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	2b00      	cmp	r3, #0
 8003294:	d1e0      	bne.n	8003258 <SX1278_LoRaEntryTx+0x88>
			SX1278_hw_Reset(module->hw);
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	0018      	movs	r0, r3
 800329c:	f000 f8af 	bl	80033fe <SX1278_hw_Reset>
			SX1278_config(module);
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	0018      	movs	r0, r3
 80032a4:	f7ff fe2a 	bl	8002efc <SX1278_config>
			return 0;
 80032a8:	2300      	movs	r3, #0
		}
	}
}
 80032aa:	0018      	movs	r0, r3
 80032ac:	46bd      	mov	sp, r7
 80032ae:	b006      	add	sp, #24
 80032b0:	bdb0      	pop	{r4, r5, r7, pc}

080032b2 <SX1278_LoRaTxPacket>:

int SX1278_LoRaTxPacket(SX1278_t *module, uint8_t *txBuffer, uint8_t length,
		uint32_t timeout) {
 80032b2:	b580      	push	{r7, lr}
 80032b4:	b084      	sub	sp, #16
 80032b6:	af00      	add	r7, sp, #0
 80032b8:	60f8      	str	r0, [r7, #12]
 80032ba:	60b9      	str	r1, [r7, #8]
 80032bc:	603b      	str	r3, [r7, #0]
 80032be:	1dfb      	adds	r3, r7, #7
 80032c0:	701a      	strb	r2, [r3, #0]
	SX1278_SPIBurstWrite(module, 0x00, txBuffer, length);
 80032c2:	1dfb      	adds	r3, r7, #7
 80032c4:	781b      	ldrb	r3, [r3, #0]
 80032c6:	68ba      	ldr	r2, [r7, #8]
 80032c8:	68f8      	ldr	r0, [r7, #12]
 80032ca:	2100      	movs	r1, #0
 80032cc:	f7ff fdc9 	bl	8002e62 <SX1278_SPIBurstWrite>
	SX1278_SPIWrite(module, LR_RegOpMode, 0x8b);	//Tx Mode
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	228b      	movs	r2, #139	; 0x8b
 80032d4:	2101      	movs	r1, #1
 80032d6:	0018      	movs	r0, r3
 80032d8:	f7ff fd94 	bl	8002e04 <SX1278_SPIWrite>
	while (1) {
		if (SX1278_hw_GetDIO0(module->hw)) { //if(Get_NIRQ()) //Packet send over
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	0018      	movs	r0, r3
 80032e2:	f000 f90a 	bl	80034fa <SX1278_hw_GetDIO0>
 80032e6:	1e03      	subs	r3, r0, #0
 80032e8:	d00e      	beq.n	8003308 <SX1278_LoRaTxPacket+0x56>
			SX1278_SPIRead(module, LR_RegIrqFlags);
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	2112      	movs	r1, #18
 80032ee:	0018      	movs	r0, r3
 80032f0:	f7ff fd64 	bl	8002dbc <SX1278_SPIRead>
			SX1278_clearLoRaIrq(module); //Clear irq
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	0018      	movs	r0, r3
 80032f8:	f7ff ff5c 	bl	80031b4 <SX1278_clearLoRaIrq>
			SX1278_standby(module); //Entry Standby mode
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	0018      	movs	r0, r3
 8003300:	f7ff ff28 	bl	8003154 <SX1278_standby>
			return 1;
 8003304:	2301      	movs	r3, #1
 8003306:	e014      	b.n	8003332 <SX1278_LoRaTxPacket+0x80>
		}

		if (--timeout == 0) {
 8003308:	683b      	ldr	r3, [r7, #0]
 800330a:	3b01      	subs	r3, #1
 800330c:	603b      	str	r3, [r7, #0]
 800330e:	683b      	ldr	r3, [r7, #0]
 8003310:	2b00      	cmp	r3, #0
 8003312:	d10a      	bne.n	800332a <SX1278_LoRaTxPacket+0x78>
			SX1278_hw_Reset(module->hw);
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	0018      	movs	r0, r3
 800331a:	f000 f870 	bl	80033fe <SX1278_hw_Reset>
			SX1278_config(module);
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	0018      	movs	r0, r3
 8003322:	f7ff fdeb 	bl	8002efc <SX1278_config>
			return 0;
 8003326:	2300      	movs	r3, #0
 8003328:	e003      	b.n	8003332 <SX1278_LoRaTxPacket+0x80>
		}
		SX1278_hw_DelayMs(1);
 800332a:	2001      	movs	r0, #1
 800332c:	f000 f8d9 	bl	80034e2 <SX1278_hw_DelayMs>
		if (SX1278_hw_GetDIO0(module->hw)) { //if(Get_NIRQ()) //Packet send over
 8003330:	e7d4      	b.n	80032dc <SX1278_LoRaTxPacket+0x2a>
	}
}
 8003332:	0018      	movs	r0, r3
 8003334:	46bd      	mov	sp, r7
 8003336:	b004      	add	sp, #16
 8003338:	bd80      	pop	{r7, pc}

0800333a <SX1278_init>:

void SX1278_init(SX1278_t *module, uint64_t frequency, uint8_t power,
		uint8_t LoRa_SF, uint8_t LoRa_BW, uint8_t LoRa_CR,
		uint8_t LoRa_CRC_sum, uint8_t packetLength) {
 800333a:	b580      	push	{r7, lr}
 800333c:	b084      	sub	sp, #16
 800333e:	af00      	add	r7, sp, #0
 8003340:	60f8      	str	r0, [r7, #12]
 8003342:	603a      	str	r2, [r7, #0]
 8003344:	607b      	str	r3, [r7, #4]
	SX1278_hw_init(module->hw);
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	0018      	movs	r0, r3
 800334c:	f000 f82b 	bl	80033a6 <SX1278_hw_init>
	module->frequency = frequency;
 8003350:	68f9      	ldr	r1, [r7, #12]
 8003352:	683a      	ldr	r2, [r7, #0]
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	608a      	str	r2, [r1, #8]
 8003358:	60cb      	str	r3, [r1, #12]
	module->power = power;
 800335a:	68fa      	ldr	r2, [r7, #12]
 800335c:	2318      	movs	r3, #24
 800335e:	18fb      	adds	r3, r7, r3
 8003360:	781b      	ldrb	r3, [r3, #0]
 8003362:	7413      	strb	r3, [r2, #16]
	module->LoRa_SF = LoRa_SF;
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	221c      	movs	r2, #28
 8003368:	18ba      	adds	r2, r7, r2
 800336a:	7812      	ldrb	r2, [r2, #0]
 800336c:	745a      	strb	r2, [r3, #17]
	module->LoRa_BW = LoRa_BW;
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	2220      	movs	r2, #32
 8003372:	18ba      	adds	r2, r7, r2
 8003374:	7812      	ldrb	r2, [r2, #0]
 8003376:	749a      	strb	r2, [r3, #18]
	module->LoRa_CR = LoRa_CR;
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	2224      	movs	r2, #36	; 0x24
 800337c:	18ba      	adds	r2, r7, r2
 800337e:	7812      	ldrb	r2, [r2, #0]
 8003380:	74da      	strb	r2, [r3, #19]
	module->LoRa_CRC_sum = LoRa_CRC_sum;
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	2228      	movs	r2, #40	; 0x28
 8003386:	18ba      	adds	r2, r7, r2
 8003388:	7812      	ldrb	r2, [r2, #0]
 800338a:	751a      	strb	r2, [r3, #20]
	module->packetLength = packetLength;
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	222c      	movs	r2, #44	; 0x2c
 8003390:	18ba      	adds	r2, r7, r2
 8003392:	7812      	ldrb	r2, [r2, #0]
 8003394:	755a      	strb	r2, [r3, #21]
	SX1278_config(module);
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	0018      	movs	r0, r3
 800339a:	f7ff fdaf 	bl	8002efc <SX1278_config>
}
 800339e:	46c0      	nop			; (mov r8, r8)
 80033a0:	46bd      	mov	sp, r7
 80033a2:	b004      	add	sp, #16
 80033a4:	bd80      	pop	{r7, pc}

080033a6 <SX1278_hw_init>:

#include "SX1278_hw.h"
#include <string.h>
#include "stm32l0xx_hal.h"

__weak void SX1278_hw_init(SX1278_hw_t *hw) {
 80033a6:	b580      	push	{r7, lr}
 80033a8:	b082      	sub	sp, #8
 80033aa:	af00      	add	r7, sp, #0
 80033ac:	6078      	str	r0, [r7, #4]
	SX1278_hw_SetNSS(hw, 1);
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	2101      	movs	r1, #1
 80033b2:	0018      	movs	r0, r3
 80033b4:	f000 f80d 	bl	80033d2 <SX1278_hw_SetNSS>
	HAL_GPIO_WritePin(hw->reset.port, hw->reset.pin, GPIO_PIN_SET);
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	6858      	ldr	r0, [r3, #4]
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	b29b      	uxth	r3, r3
 80033c2:	2201      	movs	r2, #1
 80033c4:	0019      	movs	r1, r3
 80033c6:	f001 fd28 	bl	8004e1a <HAL_GPIO_WritePin>
}
 80033ca:	46c0      	nop			; (mov r8, r8)
 80033cc:	46bd      	mov	sp, r7
 80033ce:	b002      	add	sp, #8
 80033d0:	bd80      	pop	{r7, pc}

080033d2 <SX1278_hw_SetNSS>:

__weak void SX1278_hw_SetNSS(SX1278_hw_t *hw, int value) {
 80033d2:	b580      	push	{r7, lr}
 80033d4:	b082      	sub	sp, #8
 80033d6:	af00      	add	r7, sp, #0
 80033d8:	6078      	str	r0, [r7, #4]
 80033da:	6039      	str	r1, [r7, #0]
	HAL_GPIO_WritePin(hw->nss.port, hw->nss.pin,
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	6958      	ldr	r0, [r3, #20]
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	691b      	ldr	r3, [r3, #16]
 80033e4:	b299      	uxth	r1, r3
 80033e6:	683b      	ldr	r3, [r7, #0]
 80033e8:	3b01      	subs	r3, #1
 80033ea:	425a      	negs	r2, r3
 80033ec:	4153      	adcs	r3, r2
 80033ee:	b2db      	uxtb	r3, r3
 80033f0:	001a      	movs	r2, r3
 80033f2:	f001 fd12 	bl	8004e1a <HAL_GPIO_WritePin>
			(value == 1) ? GPIO_PIN_SET : GPIO_PIN_RESET);
}
 80033f6:	46c0      	nop			; (mov r8, r8)
 80033f8:	46bd      	mov	sp, r7
 80033fa:	b002      	add	sp, #8
 80033fc:	bd80      	pop	{r7, pc}

080033fe <SX1278_hw_Reset>:

__weak void SX1278_hw_Reset(SX1278_hw_t *hw) {
 80033fe:	b580      	push	{r7, lr}
 8003400:	b082      	sub	sp, #8
 8003402:	af00      	add	r7, sp, #0
 8003404:	6078      	str	r0, [r7, #4]
	SX1278_hw_SetNSS(hw, 1);
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	2101      	movs	r1, #1
 800340a:	0018      	movs	r0, r3
 800340c:	f7ff ffe1 	bl	80033d2 <SX1278_hw_SetNSS>
	HAL_GPIO_WritePin(hw->reset.port, hw->reset.pin, GPIO_PIN_RESET);
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	6858      	ldr	r0, [r3, #4]
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	b29b      	uxth	r3, r3
 800341a:	2200      	movs	r2, #0
 800341c:	0019      	movs	r1, r3
 800341e:	f001 fcfc 	bl	8004e1a <HAL_GPIO_WritePin>

	SX1278_hw_DelayMs(1);
 8003422:	2001      	movs	r0, #1
 8003424:	f000 f85d 	bl	80034e2 <SX1278_hw_DelayMs>

	HAL_GPIO_WritePin(hw->reset.port, hw->reset.pin, GPIO_PIN_SET);
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	6858      	ldr	r0, [r3, #4]
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	b29b      	uxth	r3, r3
 8003432:	2201      	movs	r2, #1
 8003434:	0019      	movs	r1, r3
 8003436:	f001 fcf0 	bl	8004e1a <HAL_GPIO_WritePin>

	SX1278_hw_DelayMs(100);
 800343a:	2064      	movs	r0, #100	; 0x64
 800343c:	f000 f851 	bl	80034e2 <SX1278_hw_DelayMs>
}
 8003440:	46c0      	nop			; (mov r8, r8)
 8003442:	46bd      	mov	sp, r7
 8003444:	b002      	add	sp, #8
 8003446:	bd80      	pop	{r7, pc}

08003448 <SX1278_hw_SPICommand>:

__weak void SX1278_hw_SPICommand(SX1278_hw_t *hw, uint8_t cmd) {
 8003448:	b580      	push	{r7, lr}
 800344a:	b082      	sub	sp, #8
 800344c:	af00      	add	r7, sp, #0
 800344e:	6078      	str	r0, [r7, #4]
 8003450:	000a      	movs	r2, r1
 8003452:	1cfb      	adds	r3, r7, #3
 8003454:	701a      	strb	r2, [r3, #0]
	SX1278_hw_SetNSS(hw, 0);
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	2100      	movs	r1, #0
 800345a:	0018      	movs	r0, r3
 800345c:	f7ff ffb9 	bl	80033d2 <SX1278_hw_SetNSS>
	HAL_SPI_Transmit(hw->spi, &cmd, 1, 1000);
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	6998      	ldr	r0, [r3, #24]
 8003464:	23fa      	movs	r3, #250	; 0xfa
 8003466:	009b      	lsls	r3, r3, #2
 8003468:	1cf9      	adds	r1, r7, #3
 800346a:	2201      	movs	r2, #1
 800346c:	f002 fcd2 	bl	8005e14 <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(hw->spi) != HAL_SPI_STATE_READY)
 8003470:	46c0      	nop			; (mov r8, r8)
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	699b      	ldr	r3, [r3, #24]
 8003476:	0018      	movs	r0, r3
 8003478:	f002 ffdd 	bl	8006436 <HAL_SPI_GetState>
 800347c:	0003      	movs	r3, r0
 800347e:	2b01      	cmp	r3, #1
 8003480:	d1f7      	bne.n	8003472 <SX1278_hw_SPICommand+0x2a>
		;
}
 8003482:	46c0      	nop			; (mov r8, r8)
 8003484:	46c0      	nop			; (mov r8, r8)
 8003486:	46bd      	mov	sp, r7
 8003488:	b002      	add	sp, #8
 800348a:	bd80      	pop	{r7, pc}

0800348c <SX1278_hw_SPIReadByte>:

__weak uint8_t SX1278_hw_SPIReadByte(SX1278_hw_t *hw) {
 800348c:	b5b0      	push	{r4, r5, r7, lr}
 800348e:	b086      	sub	sp, #24
 8003490:	af02      	add	r7, sp, #8
 8003492:	6078      	str	r0, [r7, #4]
	uint8_t txByte = 0x00;
 8003494:	240f      	movs	r4, #15
 8003496:	193b      	adds	r3, r7, r4
 8003498:	2200      	movs	r2, #0
 800349a:	701a      	strb	r2, [r3, #0]
	uint8_t rxByte = 0x00;
 800349c:	250e      	movs	r5, #14
 800349e:	197b      	adds	r3, r7, r5
 80034a0:	2200      	movs	r2, #0
 80034a2:	701a      	strb	r2, [r3, #0]

	SX1278_hw_SetNSS(hw, 0);
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	2100      	movs	r1, #0
 80034a8:	0018      	movs	r0, r3
 80034aa:	f7ff ff92 	bl	80033d2 <SX1278_hw_SetNSS>
	HAL_SPI_TransmitReceive(hw->spi, &txByte, &rxByte, 1, 1000);
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	6998      	ldr	r0, [r3, #24]
 80034b2:	197a      	adds	r2, r7, r5
 80034b4:	1939      	adds	r1, r7, r4
 80034b6:	23fa      	movs	r3, #250	; 0xfa
 80034b8:	009b      	lsls	r3, r3, #2
 80034ba:	9300      	str	r3, [sp, #0]
 80034bc:	2301      	movs	r3, #1
 80034be:	f002 fdff 	bl	80060c0 <HAL_SPI_TransmitReceive>
	while (HAL_SPI_GetState(hw->spi) != HAL_SPI_STATE_READY)
 80034c2:	46c0      	nop			; (mov r8, r8)
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	699b      	ldr	r3, [r3, #24]
 80034c8:	0018      	movs	r0, r3
 80034ca:	f002 ffb4 	bl	8006436 <HAL_SPI_GetState>
 80034ce:	0003      	movs	r3, r0
 80034d0:	2b01      	cmp	r3, #1
 80034d2:	d1f7      	bne.n	80034c4 <SX1278_hw_SPIReadByte+0x38>
		;
	return rxByte;
 80034d4:	230e      	movs	r3, #14
 80034d6:	18fb      	adds	r3, r7, r3
 80034d8:	781b      	ldrb	r3, [r3, #0]
}
 80034da:	0018      	movs	r0, r3
 80034dc:	46bd      	mov	sp, r7
 80034de:	b004      	add	sp, #16
 80034e0:	bdb0      	pop	{r4, r5, r7, pc}

080034e2 <SX1278_hw_DelayMs>:

__weak void SX1278_hw_DelayMs(uint32_t msec) {
 80034e2:	b580      	push	{r7, lr}
 80034e4:	b082      	sub	sp, #8
 80034e6:	af00      	add	r7, sp, #0
 80034e8:	6078      	str	r0, [r7, #4]
	HAL_Delay(msec);
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	0018      	movs	r0, r3
 80034ee:	f000 fdb9 	bl	8004064 <HAL_Delay>
}
 80034f2:	46c0      	nop			; (mov r8, r8)
 80034f4:	46bd      	mov	sp, r7
 80034f6:	b002      	add	sp, #8
 80034f8:	bd80      	pop	{r7, pc}

080034fa <SX1278_hw_GetDIO0>:

__weak int SX1278_hw_GetDIO0(SX1278_hw_t *hw) {
 80034fa:	b580      	push	{r7, lr}
 80034fc:	b082      	sub	sp, #8
 80034fe:	af00      	add	r7, sp, #0
 8003500:	6078      	str	r0, [r7, #4]
	return (HAL_GPIO_ReadPin(hw->dio0.port, hw->dio0.pin) == GPIO_PIN_SET);
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	68da      	ldr	r2, [r3, #12]
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	689b      	ldr	r3, [r3, #8]
 800350a:	b29b      	uxth	r3, r3
 800350c:	0019      	movs	r1, r3
 800350e:	0010      	movs	r0, r2
 8003510:	f001 fc66 	bl	8004de0 <HAL_GPIO_ReadPin>
 8003514:	0003      	movs	r3, r0
 8003516:	3b01      	subs	r3, #1
 8003518:	425a      	negs	r2, r3
 800351a:	4153      	adcs	r3, r2
 800351c:	b2db      	uxtb	r3, r3
}
 800351e:	0018      	movs	r0, r3
 8003520:	46bd      	mov	sp, r7
 8003522:	b002      	add	sp, #8
 8003524:	bd80      	pop	{r7, pc}
	...

08003528 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003528:	b5b0      	push	{r4, r5, r7, lr}
 800352a:	b086      	sub	sp, #24
 800352c:	af06      	add	r7, sp, #24
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800352e:	f000 fd29 	bl	8003f84 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003532:	f000 f8e5 	bl	8003700 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003536:	f000 fa13 	bl	8003960 <MX_GPIO_Init>
  MX_ADC_Init();
 800353a:	f000 f945 	bl	80037c8 <MX_ADC_Init>
  MX_LPUART1_UART_Init();
 800353e:	f000 f9a9 	bl	8003894 <MX_LPUART1_UART_Init>
  MX_SPI2_Init();
 8003542:	f000 f9d5 	bl	80038f0 <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */
  lw20Connect();
 8003546:	f000 fa8d 	bl	8003a64 <lw20Connect>
  HAL_GPIO_WritePin(LASER_GPIO_Port, LASER_Pin, SET);
 800354a:	23a0      	movs	r3, #160	; 0xa0
 800354c:	05db      	lsls	r3, r3, #23
 800354e:	2201      	movs	r2, #1
 8003550:	2108      	movs	r1, #8
 8003552:	0018      	movs	r0, r3
 8003554:	f001 fc61 	bl	8004e1a <HAL_GPIO_WritePin>
	//initialize LoRa module
  SX1278_hw.dio0.port = DIO0_GPIO_Port;
 8003558:	4b5a      	ldr	r3, [pc, #360]	; (80036c4 <main+0x19c>)
 800355a:	22a0      	movs	r2, #160	; 0xa0
 800355c:	05d2      	lsls	r2, r2, #23
 800355e:	60da      	str	r2, [r3, #12]
  SX1278_hw.dio0.pin = DIO0_Pin;
 8003560:	4b58      	ldr	r3, [pc, #352]	; (80036c4 <main+0x19c>)
 8003562:	2280      	movs	r2, #128	; 0x80
 8003564:	0112      	lsls	r2, r2, #4
 8003566:	609a      	str	r2, [r3, #8]
  SX1278_hw.nss.port = EN_GPIO_Port;
 8003568:	4b56      	ldr	r3, [pc, #344]	; (80036c4 <main+0x19c>)
 800356a:	4a57      	ldr	r2, [pc, #348]	; (80036c8 <main+0x1a0>)
 800356c:	615a      	str	r2, [r3, #20]
  SX1278_hw.nss.pin = EN_Pin;
 800356e:	4b55      	ldr	r3, [pc, #340]	; (80036c4 <main+0x19c>)
 8003570:	2280      	movs	r2, #128	; 0x80
 8003572:	0152      	lsls	r2, r2, #5
 8003574:	611a      	str	r2, [r3, #16]
  SX1278_hw.reset.port = RST_GPIO_Port;
 8003576:	4b53      	ldr	r3, [pc, #332]	; (80036c4 <main+0x19c>)
 8003578:	22a0      	movs	r2, #160	; 0xa0
 800357a:	05d2      	lsls	r2, r2, #23
 800357c:	605a      	str	r2, [r3, #4]
  SX1278_hw.reset.pin = RST_Pin;
 800357e:	4b51      	ldr	r3, [pc, #324]	; (80036c4 <main+0x19c>)
 8003580:	2280      	movs	r2, #128	; 0x80
 8003582:	00d2      	lsls	r2, r2, #3
 8003584:	601a      	str	r2, [r3, #0]
  SX1278_hw.spi = &hspi2;
 8003586:	4b4f      	ldr	r3, [pc, #316]	; (80036c4 <main+0x19c>)
 8003588:	4a50      	ldr	r2, [pc, #320]	; (80036cc <main+0x1a4>)
 800358a:	619a      	str	r2, [r3, #24]
  SX1278.hw = &SX1278_hw;
 800358c:	4b50      	ldr	r3, [pc, #320]	; (80036d0 <main+0x1a8>)
 800358e:	4a4d      	ldr	r2, [pc, #308]	; (80036c4 <main+0x19c>)
 8003590:	601a      	str	r2, [r3, #0]

  SX1278_init(&SX1278, 434000000, SX1278_POWER_17DBM, SX1278_LORA_SF_7,
 8003592:	4a50      	ldr	r2, [pc, #320]	; (80036d4 <main+0x1ac>)
 8003594:	2300      	movs	r3, #0
 8003596:	494e      	ldr	r1, [pc, #312]	; (80036d0 <main+0x1a8>)
 8003598:	200a      	movs	r0, #10
 800359a:	9005      	str	r0, [sp, #20]
 800359c:	2000      	movs	r0, #0
 800359e:	9004      	str	r0, [sp, #16]
 80035a0:	2000      	movs	r0, #0
 80035a2:	9003      	str	r0, [sp, #12]
 80035a4:	2007      	movs	r0, #7
 80035a6:	9002      	str	r0, [sp, #8]
 80035a8:	2001      	movs	r0, #1
 80035aa:	9001      	str	r0, [sp, #4]
 80035ac:	2001      	movs	r0, #1
 80035ae:	9000      	str	r0, [sp, #0]
 80035b0:	0008      	movs	r0, r1
 80035b2:	f7ff fec2 	bl	800333a <SX1278_init>
  SX1278_LORA_BW_125KHZ, SX1278_LORA_CR_4_5, SX1278_LORA_CRC_EN, 10);


  ret = SX1278_LoRaEntryTx(&SX1278, 16, 2000);
 80035b6:	23fa      	movs	r3, #250	; 0xfa
 80035b8:	00da      	lsls	r2, r3, #3
 80035ba:	4b45      	ldr	r3, [pc, #276]	; (80036d0 <main+0x1a8>)
 80035bc:	2110      	movs	r1, #16
 80035be:	0018      	movs	r0, r3
 80035c0:	f7ff fe06 	bl	80031d0 <SX1278_LoRaEntryTx>
 80035c4:	0002      	movs	r2, r0
 80035c6:	4b44      	ldr	r3, [pc, #272]	; (80036d8 <main+0x1b0>)
 80035c8:	601a      	str	r2, [r3, #0]
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
    HAL_ADC_Start(&hadc);
 80035ca:	4b44      	ldr	r3, [pc, #272]	; (80036dc <main+0x1b4>)
 80035cc:	0018      	movs	r0, r3
 80035ce:	f000 fee1 	bl	8004394 <HAL_ADC_Start>
    HAL_ADC_PollForConversion(&hadc, HAL_MAX_DELAY);
 80035d2:	2301      	movs	r3, #1
 80035d4:	425a      	negs	r2, r3
 80035d6:	4b41      	ldr	r3, [pc, #260]	; (80036dc <main+0x1b4>)
 80035d8:	0011      	movs	r1, r2
 80035da:	0018      	movs	r0, r3
 80035dc:	f000 ff6e 	bl	80044bc <HAL_ADC_PollForConversion>
    channel = (HAL_ADC_GetValue(&hadc)-40)/410;
 80035e0:	4b3e      	ldr	r3, [pc, #248]	; (80036dc <main+0x1b4>)
 80035e2:	0018      	movs	r0, r3
 80035e4:	f001 f800 	bl	80045e8 <HAL_ADC_GetValue>
 80035e8:	0003      	movs	r3, r0
 80035ea:	3b28      	subs	r3, #40	; 0x28
 80035ec:	22cd      	movs	r2, #205	; 0xcd
 80035ee:	0051      	lsls	r1, r2, #1
 80035f0:	0018      	movs	r0, r3
 80035f2:	f7fc fda5 	bl	8000140 <__udivsi3>
 80035f6:	0003      	movs	r3, r0
 80035f8:	b2da      	uxtb	r2, r3
 80035fa:	4b39      	ldr	r3, [pc, #228]	; (80036e0 <main+0x1b8>)
 80035fc:	701a      	strb	r2, [r3, #0]
    HAL_ADC_Stop(&hadc);
 80035fe:	4b37      	ldr	r3, [pc, #220]	; (80036dc <main+0x1b4>)
 8003600:	0018      	movs	r0, r3
 8003602:	f000 ff1b 	bl	800443c <HAL_ADC_Stop>
	HAL_Delay(1000);
 8003606:	23fa      	movs	r3, #250	; 0xfa
 8003608:	009b      	lsls	r3, r3, #2
 800360a:	0018      	movs	r0, r3
 800360c:	f000 fd2a 	bl	8004064 <HAL_Delay>
	if(abs(3.28*lw20GetDistance()-distance)>=1){
 8003610:	f000 fabc 	bl	8003b8c <lw20GetDistance>
 8003614:	1c03      	adds	r3, r0, #0
 8003616:	1c18      	adds	r0, r3, #0
 8003618:	f7ff fad6 	bl	8002bc8 <__aeabi_f2d>
 800361c:	4a31      	ldr	r2, [pc, #196]	; (80036e4 <main+0x1bc>)
 800361e:	4b32      	ldr	r3, [pc, #200]	; (80036e8 <main+0x1c0>)
 8003620:	f7fe fc48 	bl	8001eb4 <__aeabi_dmul>
 8003624:	0002      	movs	r2, r0
 8003626:	000b      	movs	r3, r1
 8003628:	0014      	movs	r4, r2
 800362a:	001d      	movs	r5, r3
 800362c:	4b2f      	ldr	r3, [pc, #188]	; (80036ec <main+0x1c4>)
 800362e:	781b      	ldrb	r3, [r3, #0]
 8003630:	0018      	movs	r0, r3
 8003632:	f7ff fa73 	bl	8002b1c <__aeabi_i2d>
 8003636:	0002      	movs	r2, r0
 8003638:	000b      	movs	r3, r1
 800363a:	0020      	movs	r0, r4
 800363c:	0029      	movs	r1, r5
 800363e:	f7fe fea5 	bl	800238c <__aeabi_dsub>
 8003642:	0002      	movs	r2, r0
 8003644:	000b      	movs	r3, r1
 8003646:	0010      	movs	r0, r2
 8003648:	0019      	movs	r1, r3
 800364a:	f7ff fa31 	bl	8002ab0 <__aeabi_d2iz>
 800364e:	0003      	movs	r3, r0
 8003650:	17da      	asrs	r2, r3, #31
 8003652:	189b      	adds	r3, r3, r2
 8003654:	4053      	eors	r3, r2
 8003656:	2b00      	cmp	r3, #0
 8003658:	ddb7      	ble.n	80035ca <main+0xa2>
		distance = (uint8_t)3.28*lw20GetDistance();
 800365a:	f000 fa97 	bl	8003b8c <lw20GetDistance>
 800365e:	1c03      	adds	r3, r0, #0
 8003660:	4923      	ldr	r1, [pc, #140]	; (80036f0 <main+0x1c8>)
 8003662:	1c18      	adds	r0, r3, #0
 8003664:	f7fd f9b4 	bl	80009d0 <__aeabi_fmul>
 8003668:	1c03      	adds	r3, r0, #0
 800366a:	1c18      	adds	r0, r3, #0
 800366c:	f7fc ff9e 	bl	80005ac <__aeabi_f2uiz>
 8003670:	0003      	movs	r3, r0
 8003672:	b2da      	uxtb	r2, r3
 8003674:	4b1d      	ldr	r3, [pc, #116]	; (80036ec <main+0x1c4>)
 8003676:	701a      	strb	r2, [r3, #0]
		message_length = sprintf(buffer,"%d:%d", channel, distance);
 8003678:	4b19      	ldr	r3, [pc, #100]	; (80036e0 <main+0x1b8>)
 800367a:	781b      	ldrb	r3, [r3, #0]
 800367c:	001a      	movs	r2, r3
 800367e:	4b1b      	ldr	r3, [pc, #108]	; (80036ec <main+0x1c4>)
 8003680:	781b      	ldrb	r3, [r3, #0]
 8003682:	491c      	ldr	r1, [pc, #112]	; (80036f4 <main+0x1cc>)
 8003684:	481c      	ldr	r0, [pc, #112]	; (80036f8 <main+0x1d0>)
 8003686:	f003 fdfd 	bl	8007284 <siprintf>
 800368a:	0002      	movs	r2, r0
 800368c:	4b1b      	ldr	r3, [pc, #108]	; (80036fc <main+0x1d4>)
 800368e:	601a      	str	r2, [r3, #0]
		while(!SX1278_LoRaEntryTx(&SX1278, message_length, 2000));
 8003690:	46c0      	nop			; (mov r8, r8)
 8003692:	4b1a      	ldr	r3, [pc, #104]	; (80036fc <main+0x1d4>)
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	b2d9      	uxtb	r1, r3
 8003698:	23fa      	movs	r3, #250	; 0xfa
 800369a:	00da      	lsls	r2, r3, #3
 800369c:	4b0c      	ldr	r3, [pc, #48]	; (80036d0 <main+0x1a8>)
 800369e:	0018      	movs	r0, r3
 80036a0:	f7ff fd96 	bl	80031d0 <SX1278_LoRaEntryTx>
 80036a4:	1e03      	subs	r3, r0, #0
 80036a6:	d0f4      	beq.n	8003692 <main+0x16a>
		while(!SX1278_LoRaTxPacket(&SX1278, (uint8_t*) buffer, message_length, 2000));
 80036a8:	46c0      	nop			; (mov r8, r8)
 80036aa:	4b14      	ldr	r3, [pc, #80]	; (80036fc <main+0x1d4>)
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	b2da      	uxtb	r2, r3
 80036b0:	23fa      	movs	r3, #250	; 0xfa
 80036b2:	00db      	lsls	r3, r3, #3
 80036b4:	4910      	ldr	r1, [pc, #64]	; (80036f8 <main+0x1d0>)
 80036b6:	4806      	ldr	r0, [pc, #24]	; (80036d0 <main+0x1a8>)
 80036b8:	f7ff fdfb 	bl	80032b2 <SX1278_LoRaTxPacket>
 80036bc:	1e03      	subs	r3, r0, #0
 80036be:	d0f4      	beq.n	80036aa <main+0x182>
    HAL_ADC_Start(&hadc);
 80036c0:	e783      	b.n	80035ca <main+0xa2>
 80036c2:	46c0      	nop			; (mov r8, r8)
 80036c4:	20000698 	.word	0x20000698
 80036c8:	50000400 	.word	0x50000400
 80036cc:	20000210 	.word	0x20000210
 80036d0:	20000520 	.word	0x20000520
 80036d4:	19de5080 	.word	0x19de5080
 80036d8:	20000638 	.word	0x20000638
 80036dc:	2000063c 	.word	0x2000063c
 80036e0:	2000051c 	.word	0x2000051c
 80036e4:	a3d70a3d 	.word	0xa3d70a3d
 80036e8:	400a3d70 	.word	0x400a3d70
 80036ec:	20000294 	.word	0x20000294
 80036f0:	40400000 	.word	0x40400000
 80036f4:	0800a3d0 	.word	0x0800a3d0
 80036f8:	2000031c 	.word	0x2000031c
 80036fc:	20000268 	.word	0x20000268

08003700 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003700:	b590      	push	{r4, r7, lr}
 8003702:	b09d      	sub	sp, #116	; 0x74
 8003704:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003706:	2438      	movs	r4, #56	; 0x38
 8003708:	193b      	adds	r3, r7, r4
 800370a:	0018      	movs	r0, r3
 800370c:	2338      	movs	r3, #56	; 0x38
 800370e:	001a      	movs	r2, r3
 8003710:	2100      	movs	r1, #0
 8003712:	f003 fdae 	bl	8007272 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003716:	2324      	movs	r3, #36	; 0x24
 8003718:	18fb      	adds	r3, r7, r3
 800371a:	0018      	movs	r0, r3
 800371c:	2314      	movs	r3, #20
 800371e:	001a      	movs	r2, r3
 8003720:	2100      	movs	r1, #0
 8003722:	f003 fda6 	bl	8007272 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003726:	003b      	movs	r3, r7
 8003728:	0018      	movs	r0, r3
 800372a:	2324      	movs	r3, #36	; 0x24
 800372c:	001a      	movs	r2, r3
 800372e:	2100      	movs	r1, #0
 8003730:	f003 fd9f 	bl	8007272 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003734:	4b22      	ldr	r3, [pc, #136]	; (80037c0 <SystemClock_Config+0xc0>)
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	4a22      	ldr	r2, [pc, #136]	; (80037c4 <SystemClock_Config+0xc4>)
 800373a:	401a      	ands	r2, r3
 800373c:	4b20      	ldr	r3, [pc, #128]	; (80037c0 <SystemClock_Config+0xc0>)
 800373e:	2180      	movs	r1, #128	; 0x80
 8003740:	0109      	lsls	r1, r1, #4
 8003742:	430a      	orrs	r2, r1
 8003744:	601a      	str	r2, [r3, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8003746:	193b      	adds	r3, r7, r4
 8003748:	2201      	movs	r2, #1
 800374a:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800374c:	193b      	adds	r3, r7, r4
 800374e:	2280      	movs	r2, #128	; 0x80
 8003750:	0252      	lsls	r2, r2, #9
 8003752:	605a      	str	r2, [r3, #4]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8003754:	193b      	adds	r3, r7, r4
 8003756:	2200      	movs	r2, #0
 8003758:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800375a:	193b      	adds	r3, r7, r4
 800375c:	0018      	movs	r0, r3
 800375e:	f001 fb79 	bl	8004e54 <HAL_RCC_OscConfig>
 8003762:	1e03      	subs	r3, r0, #0
 8003764:	d001      	beq.n	800376a <SystemClock_Config+0x6a>
  {
    Error_Handler();
 8003766:	f000 fa27 	bl	8003bb8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800376a:	2124      	movs	r1, #36	; 0x24
 800376c:	187b      	adds	r3, r7, r1
 800376e:	220f      	movs	r2, #15
 8003770:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 8003772:	187b      	adds	r3, r7, r1
 8003774:	2202      	movs	r2, #2
 8003776:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003778:	187b      	adds	r3, r7, r1
 800377a:	2200      	movs	r2, #0
 800377c:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800377e:	187b      	adds	r3, r7, r1
 8003780:	2200      	movs	r2, #0
 8003782:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003784:	187b      	adds	r3, r7, r1
 8003786:	2200      	movs	r2, #0
 8003788:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800378a:	187b      	adds	r3, r7, r1
 800378c:	2100      	movs	r1, #0
 800378e:	0018      	movs	r0, r3
 8003790:	f001 ff24 	bl	80055dc <HAL_RCC_ClockConfig>
 8003794:	1e03      	subs	r3, r0, #0
 8003796:	d001      	beq.n	800379c <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8003798:	f000 fa0e 	bl	8003bb8 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 800379c:	003b      	movs	r3, r7
 800379e:	2204      	movs	r2, #4
 80037a0:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 80037a2:	003b      	movs	r3, r7
 80037a4:	2200      	movs	r2, #0
 80037a6:	615a      	str	r2, [r3, #20]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80037a8:	003b      	movs	r3, r7
 80037aa:	0018      	movs	r0, r3
 80037ac:	f002 f93a 	bl	8005a24 <HAL_RCCEx_PeriphCLKConfig>
 80037b0:	1e03      	subs	r3, r0, #0
 80037b2:	d001      	beq.n	80037b8 <SystemClock_Config+0xb8>
  {
    Error_Handler();
 80037b4:	f000 fa00 	bl	8003bb8 <Error_Handler>
  }
}
 80037b8:	46c0      	nop			; (mov r8, r8)
 80037ba:	46bd      	mov	sp, r7
 80037bc:	b01d      	add	sp, #116	; 0x74
 80037be:	bd90      	pop	{r4, r7, pc}
 80037c0:	40007000 	.word	0x40007000
 80037c4:	ffffe7ff 	.word	0xffffe7ff

080037c8 <MX_ADC_Init>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 80037c8:	b580      	push	{r7, lr}
 80037ca:	b082      	sub	sp, #8
 80037cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80037ce:	003b      	movs	r3, r7
 80037d0:	0018      	movs	r0, r3
 80037d2:	2308      	movs	r3, #8
 80037d4:	001a      	movs	r2, r3
 80037d6:	2100      	movs	r1, #0
 80037d8:	f003 fd4b 	bl	8007272 <memset>
  /* USER CODE BEGIN ADC_Init 1 */

  /* USER CODE END ADC_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 80037dc:	4b2a      	ldr	r3, [pc, #168]	; (8003888 <MX_ADC_Init+0xc0>)
 80037de:	4a2b      	ldr	r2, [pc, #172]	; (800388c <MX_ADC_Init+0xc4>)
 80037e0:	601a      	str	r2, [r3, #0]
  hadc.Init.OversamplingMode = DISABLE;
 80037e2:	4b29      	ldr	r3, [pc, #164]	; (8003888 <MX_ADC_Init+0xc0>)
 80037e4:	2200      	movs	r2, #0
 80037e6:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV1;
 80037e8:	4b27      	ldr	r3, [pc, #156]	; (8003888 <MX_ADC_Init+0xc0>)
 80037ea:	22c0      	movs	r2, #192	; 0xc0
 80037ec:	0612      	lsls	r2, r2, #24
 80037ee:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 80037f0:	4b25      	ldr	r3, [pc, #148]	; (8003888 <MX_ADC_Init+0xc0>)
 80037f2:	2200      	movs	r2, #0
 80037f4:	609a      	str	r2, [r3, #8]
  hadc.Init.SamplingTime = ADC_SAMPLETIME_39CYCLES_5;
 80037f6:	4b24      	ldr	r3, [pc, #144]	; (8003888 <MX_ADC_Init+0xc0>)
 80037f8:	2205      	movs	r2, #5
 80037fa:	639a      	str	r2, [r3, #56]	; 0x38
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 80037fc:	4b22      	ldr	r3, [pc, #136]	; (8003888 <MX_ADC_Init+0xc0>)
 80037fe:	2201      	movs	r2, #1
 8003800:	611a      	str	r2, [r3, #16]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8003802:	4b21      	ldr	r3, [pc, #132]	; (8003888 <MX_ADC_Init+0xc0>)
 8003804:	2200      	movs	r2, #0
 8003806:	60da      	str	r2, [r3, #12]
  hadc.Init.ContinuousConvMode = ENABLE;
 8003808:	4b1f      	ldr	r3, [pc, #124]	; (8003888 <MX_ADC_Init+0xc0>)
 800380a:	2220      	movs	r2, #32
 800380c:	2101      	movs	r1, #1
 800380e:	5499      	strb	r1, [r3, r2]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 8003810:	4b1d      	ldr	r3, [pc, #116]	; (8003888 <MX_ADC_Init+0xc0>)
 8003812:	2221      	movs	r2, #33	; 0x21
 8003814:	2100      	movs	r1, #0
 8003816:	5499      	strb	r1, [r3, r2]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8003818:	4b1b      	ldr	r3, [pc, #108]	; (8003888 <MX_ADC_Init+0xc0>)
 800381a:	2200      	movs	r2, #0
 800381c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800381e:	4b1a      	ldr	r3, [pc, #104]	; (8003888 <MX_ADC_Init+0xc0>)
 8003820:	22c2      	movs	r2, #194	; 0xc2
 8003822:	32ff      	adds	r2, #255	; 0xff
 8003824:	625a      	str	r2, [r3, #36]	; 0x24
  hadc.Init.DMAContinuousRequests = DISABLE;
 8003826:	4b18      	ldr	r3, [pc, #96]	; (8003888 <MX_ADC_Init+0xc0>)
 8003828:	222c      	movs	r2, #44	; 0x2c
 800382a:	2100      	movs	r1, #0
 800382c:	5499      	strb	r1, [r3, r2]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800382e:	4b16      	ldr	r3, [pc, #88]	; (8003888 <MX_ADC_Init+0xc0>)
 8003830:	2204      	movs	r2, #4
 8003832:	615a      	str	r2, [r3, #20]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8003834:	4b14      	ldr	r3, [pc, #80]	; (8003888 <MX_ADC_Init+0xc0>)
 8003836:	2200      	movs	r2, #0
 8003838:	631a      	str	r2, [r3, #48]	; 0x30
  hadc.Init.LowPowerAutoWait = DISABLE;
 800383a:	4b13      	ldr	r3, [pc, #76]	; (8003888 <MX_ADC_Init+0xc0>)
 800383c:	2200      	movs	r2, #0
 800383e:	619a      	str	r2, [r3, #24]
  hadc.Init.LowPowerFrequencyMode = DISABLE;
 8003840:	4b11      	ldr	r3, [pc, #68]	; (8003888 <MX_ADC_Init+0xc0>)
 8003842:	2200      	movs	r2, #0
 8003844:	635a      	str	r2, [r3, #52]	; 0x34
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 8003846:	4b10      	ldr	r3, [pc, #64]	; (8003888 <MX_ADC_Init+0xc0>)
 8003848:	2200      	movs	r2, #0
 800384a:	61da      	str	r2, [r3, #28]
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 800384c:	4b0e      	ldr	r3, [pc, #56]	; (8003888 <MX_ADC_Init+0xc0>)
 800384e:	0018      	movs	r0, r3
 8003850:	f000 fc2c 	bl	80040ac <HAL_ADC_Init>
 8003854:	1e03      	subs	r3, r0, #0
 8003856:	d001      	beq.n	800385c <MX_ADC_Init+0x94>
  {
    Error_Handler();
 8003858:	f000 f9ae 	bl	8003bb8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 800385c:	003b      	movs	r3, r7
 800385e:	4a0c      	ldr	r2, [pc, #48]	; (8003890 <MX_ADC_Init+0xc8>)
 8003860:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8003862:	003b      	movs	r3, r7
 8003864:	2280      	movs	r2, #128	; 0x80
 8003866:	0152      	lsls	r2, r2, #5
 8003868:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800386a:	003a      	movs	r2, r7
 800386c:	4b06      	ldr	r3, [pc, #24]	; (8003888 <MX_ADC_Init+0xc0>)
 800386e:	0011      	movs	r1, r2
 8003870:	0018      	movs	r0, r3
 8003872:	f000 fec5 	bl	8004600 <HAL_ADC_ConfigChannel>
 8003876:	1e03      	subs	r3, r0, #0
 8003878:	d001      	beq.n	800387e <MX_ADC_Init+0xb6>
  {
    Error_Handler();
 800387a:	f000 f99d 	bl	8003bb8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 800387e:	46c0      	nop			; (mov r8, r8)
 8003880:	46bd      	mov	sp, r7
 8003882:	b002      	add	sp, #8
 8003884:	bd80      	pop	{r7, pc}
 8003886:	46c0      	nop			; (mov r8, r8)
 8003888:	2000063c 	.word	0x2000063c
 800388c:	40012400 	.word	0x40012400
 8003890:	08000004 	.word	0x08000004

08003894 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8003894:	b580      	push	{r7, lr}
 8003896:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8003898:	4b13      	ldr	r3, [pc, #76]	; (80038e8 <MX_LPUART1_UART_Init+0x54>)
 800389a:	4a14      	ldr	r2, [pc, #80]	; (80038ec <MX_LPUART1_UART_Init+0x58>)
 800389c:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 800389e:	4b12      	ldr	r3, [pc, #72]	; (80038e8 <MX_LPUART1_UART_Init+0x54>)
 80038a0:	22e1      	movs	r2, #225	; 0xe1
 80038a2:	0252      	lsls	r2, r2, #9
 80038a4:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 80038a6:	4b10      	ldr	r3, [pc, #64]	; (80038e8 <MX_LPUART1_UART_Init+0x54>)
 80038a8:	2200      	movs	r2, #0
 80038aa:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 80038ac:	4b0e      	ldr	r3, [pc, #56]	; (80038e8 <MX_LPUART1_UART_Init+0x54>)
 80038ae:	2200      	movs	r2, #0
 80038b0:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 80038b2:	4b0d      	ldr	r3, [pc, #52]	; (80038e8 <MX_LPUART1_UART_Init+0x54>)
 80038b4:	2200      	movs	r2, #0
 80038b6:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 80038b8:	4b0b      	ldr	r3, [pc, #44]	; (80038e8 <MX_LPUART1_UART_Init+0x54>)
 80038ba:	220c      	movs	r2, #12
 80038bc:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80038be:	4b0a      	ldr	r3, [pc, #40]	; (80038e8 <MX_LPUART1_UART_Init+0x54>)
 80038c0:	2200      	movs	r2, #0
 80038c2:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80038c4:	4b08      	ldr	r3, [pc, #32]	; (80038e8 <MX_LPUART1_UART_Init+0x54>)
 80038c6:	2200      	movs	r2, #0
 80038c8:	621a      	str	r2, [r3, #32]
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80038ca:	4b07      	ldr	r3, [pc, #28]	; (80038e8 <MX_LPUART1_UART_Init+0x54>)
 80038cc:	2200      	movs	r2, #0
 80038ce:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 80038d0:	4b05      	ldr	r3, [pc, #20]	; (80038e8 <MX_LPUART1_UART_Init+0x54>)
 80038d2:	0018      	movs	r0, r3
 80038d4:	f002 fe90 	bl	80065f8 <HAL_UART_Init>
 80038d8:	1e03      	subs	r3, r0, #0
 80038da:	d001      	beq.n	80038e0 <MX_LPUART1_UART_Init+0x4c>
  {
    Error_Handler();
 80038dc:	f000 f96c 	bl	8003bb8 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 80038e0:	46c0      	nop			; (mov r8, r8)
 80038e2:	46bd      	mov	sp, r7
 80038e4:	bd80      	pop	{r7, pc}
 80038e6:	46c0      	nop			; (mov r8, r8)
 80038e8:	20000298 	.word	0x20000298
 80038ec:	40004800 	.word	0x40004800

080038f0 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80038f0:	b580      	push	{r7, lr}
 80038f2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80038f4:	4b18      	ldr	r3, [pc, #96]	; (8003958 <MX_SPI2_Init+0x68>)
 80038f6:	4a19      	ldr	r2, [pc, #100]	; (800395c <MX_SPI2_Init+0x6c>)
 80038f8:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80038fa:	4b17      	ldr	r3, [pc, #92]	; (8003958 <MX_SPI2_Init+0x68>)
 80038fc:	2282      	movs	r2, #130	; 0x82
 80038fe:	0052      	lsls	r2, r2, #1
 8003900:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8003902:	4b15      	ldr	r3, [pc, #84]	; (8003958 <MX_SPI2_Init+0x68>)
 8003904:	2200      	movs	r2, #0
 8003906:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8003908:	4b13      	ldr	r3, [pc, #76]	; (8003958 <MX_SPI2_Init+0x68>)
 800390a:	2200      	movs	r2, #0
 800390c:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800390e:	4b12      	ldr	r3, [pc, #72]	; (8003958 <MX_SPI2_Init+0x68>)
 8003910:	2200      	movs	r2, #0
 8003912:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003914:	4b10      	ldr	r3, [pc, #64]	; (8003958 <MX_SPI2_Init+0x68>)
 8003916:	2200      	movs	r2, #0
 8003918:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800391a:	4b0f      	ldr	r3, [pc, #60]	; (8003958 <MX_SPI2_Init+0x68>)
 800391c:	2280      	movs	r2, #128	; 0x80
 800391e:	0092      	lsls	r2, r2, #2
 8003920:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8003922:	4b0d      	ldr	r3, [pc, #52]	; (8003958 <MX_SPI2_Init+0x68>)
 8003924:	2208      	movs	r2, #8
 8003926:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003928:	4b0b      	ldr	r3, [pc, #44]	; (8003958 <MX_SPI2_Init+0x68>)
 800392a:	2200      	movs	r2, #0
 800392c:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800392e:	4b0a      	ldr	r3, [pc, #40]	; (8003958 <MX_SPI2_Init+0x68>)
 8003930:	2200      	movs	r2, #0
 8003932:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003934:	4b08      	ldr	r3, [pc, #32]	; (8003958 <MX_SPI2_Init+0x68>)
 8003936:	2200      	movs	r2, #0
 8003938:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 800393a:	4b07      	ldr	r3, [pc, #28]	; (8003958 <MX_SPI2_Init+0x68>)
 800393c:	2207      	movs	r2, #7
 800393e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8003940:	4b05      	ldr	r3, [pc, #20]	; (8003958 <MX_SPI2_Init+0x68>)
 8003942:	0018      	movs	r0, r3
 8003944:	f002 f9d2 	bl	8005cec <HAL_SPI_Init>
 8003948:	1e03      	subs	r3, r0, #0
 800394a:	d001      	beq.n	8003950 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 800394c:	f000 f934 	bl	8003bb8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8003950:	46c0      	nop			; (mov r8, r8)
 8003952:	46bd      	mov	sp, r7
 8003954:	bd80      	pop	{r7, pc}
 8003956:	46c0      	nop			; (mov r8, r8)
 8003958:	20000210 	.word	0x20000210
 800395c:	40003800 	.word	0x40003800

08003960 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003960:	b590      	push	{r4, r7, lr}
 8003962:	b089      	sub	sp, #36	; 0x24
 8003964:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003966:	240c      	movs	r4, #12
 8003968:	193b      	adds	r3, r7, r4
 800396a:	0018      	movs	r0, r3
 800396c:	2314      	movs	r3, #20
 800396e:	001a      	movs	r2, r3
 8003970:	2100      	movs	r1, #0
 8003972:	f003 fc7e 	bl	8007272 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8003976:	4b39      	ldr	r3, [pc, #228]	; (8003a5c <MX_GPIO_Init+0xfc>)
 8003978:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800397a:	4b38      	ldr	r3, [pc, #224]	; (8003a5c <MX_GPIO_Init+0xfc>)
 800397c:	2180      	movs	r1, #128	; 0x80
 800397e:	430a      	orrs	r2, r1
 8003980:	62da      	str	r2, [r3, #44]	; 0x2c
 8003982:	4b36      	ldr	r3, [pc, #216]	; (8003a5c <MX_GPIO_Init+0xfc>)
 8003984:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003986:	2280      	movs	r2, #128	; 0x80
 8003988:	4013      	ands	r3, r2
 800398a:	60bb      	str	r3, [r7, #8]
 800398c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800398e:	4b33      	ldr	r3, [pc, #204]	; (8003a5c <MX_GPIO_Init+0xfc>)
 8003990:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003992:	4b32      	ldr	r3, [pc, #200]	; (8003a5c <MX_GPIO_Init+0xfc>)
 8003994:	2101      	movs	r1, #1
 8003996:	430a      	orrs	r2, r1
 8003998:	62da      	str	r2, [r3, #44]	; 0x2c
 800399a:	4b30      	ldr	r3, [pc, #192]	; (8003a5c <MX_GPIO_Init+0xfc>)
 800399c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800399e:	2201      	movs	r2, #1
 80039a0:	4013      	ands	r3, r2
 80039a2:	607b      	str	r3, [r7, #4]
 80039a4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80039a6:	4b2d      	ldr	r3, [pc, #180]	; (8003a5c <MX_GPIO_Init+0xfc>)
 80039a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80039aa:	4b2c      	ldr	r3, [pc, #176]	; (8003a5c <MX_GPIO_Init+0xfc>)
 80039ac:	2102      	movs	r1, #2
 80039ae:	430a      	orrs	r2, r1
 80039b0:	62da      	str	r2, [r3, #44]	; 0x2c
 80039b2:	4b2a      	ldr	r3, [pc, #168]	; (8003a5c <MX_GPIO_Init+0xfc>)
 80039b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039b6:	2202      	movs	r2, #2
 80039b8:	4013      	ands	r3, r2
 80039ba:	603b      	str	r3, [r7, #0]
 80039bc:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LASER_Pin|RST_Pin, GPIO_PIN_RESET);
 80039be:	2381      	movs	r3, #129	; 0x81
 80039c0:	00d9      	lsls	r1, r3, #3
 80039c2:	23a0      	movs	r3, #160	; 0xa0
 80039c4:	05db      	lsls	r3, r3, #23
 80039c6:	2200      	movs	r2, #0
 80039c8:	0018      	movs	r0, r3
 80039ca:	f001 fa26 	bl	8004e1a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(EN_GPIO_Port, EN_Pin, GPIO_PIN_RESET);
 80039ce:	2380      	movs	r3, #128	; 0x80
 80039d0:	015b      	lsls	r3, r3, #5
 80039d2:	4823      	ldr	r0, [pc, #140]	; (8003a60 <MX_GPIO_Init+0x100>)
 80039d4:	2200      	movs	r2, #0
 80039d6:	0019      	movs	r1, r3
 80039d8:	f001 fa1f 	bl	8004e1a <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LASER_Pin RST_Pin */
  GPIO_InitStruct.Pin = LASER_Pin|RST_Pin;
 80039dc:	193b      	adds	r3, r7, r4
 80039de:	2281      	movs	r2, #129	; 0x81
 80039e0:	00d2      	lsls	r2, r2, #3
 80039e2:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80039e4:	193b      	adds	r3, r7, r4
 80039e6:	2201      	movs	r2, #1
 80039e8:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039ea:	193b      	adds	r3, r7, r4
 80039ec:	2200      	movs	r2, #0
 80039ee:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80039f0:	193b      	adds	r3, r7, r4
 80039f2:	2200      	movs	r2, #0
 80039f4:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80039f6:	193a      	adds	r2, r7, r4
 80039f8:	23a0      	movs	r3, #160	; 0xa0
 80039fa:	05db      	lsls	r3, r3, #23
 80039fc:	0011      	movs	r1, r2
 80039fe:	0018      	movs	r0, r3
 8003a00:	f001 f878 	bl	8004af4 <HAL_GPIO_Init>

  /*Configure GPIO pin : EN_Pin */
  GPIO_InitStruct.Pin = EN_Pin;
 8003a04:	0021      	movs	r1, r4
 8003a06:	187b      	adds	r3, r7, r1
 8003a08:	2280      	movs	r2, #128	; 0x80
 8003a0a:	0152      	lsls	r2, r2, #5
 8003a0c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003a0e:	000c      	movs	r4, r1
 8003a10:	193b      	adds	r3, r7, r4
 8003a12:	2201      	movs	r2, #1
 8003a14:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a16:	193b      	adds	r3, r7, r4
 8003a18:	2200      	movs	r2, #0
 8003a1a:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003a1c:	193b      	adds	r3, r7, r4
 8003a1e:	2200      	movs	r2, #0
 8003a20:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(EN_GPIO_Port, &GPIO_InitStruct);
 8003a22:	193b      	adds	r3, r7, r4
 8003a24:	4a0e      	ldr	r2, [pc, #56]	; (8003a60 <MX_GPIO_Init+0x100>)
 8003a26:	0019      	movs	r1, r3
 8003a28:	0010      	movs	r0, r2
 8003a2a:	f001 f863 	bl	8004af4 <HAL_GPIO_Init>

  /*Configure GPIO pin : DIO0_Pin */
  GPIO_InitStruct.Pin = DIO0_Pin;
 8003a2e:	0021      	movs	r1, r4
 8003a30:	187b      	adds	r3, r7, r1
 8003a32:	2280      	movs	r2, #128	; 0x80
 8003a34:	0112      	lsls	r2, r2, #4
 8003a36:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003a38:	187b      	adds	r3, r7, r1
 8003a3a:	2200      	movs	r2, #0
 8003a3c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a3e:	187b      	adds	r3, r7, r1
 8003a40:	2200      	movs	r2, #0
 8003a42:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(DIO0_GPIO_Port, &GPIO_InitStruct);
 8003a44:	187a      	adds	r2, r7, r1
 8003a46:	23a0      	movs	r3, #160	; 0xa0
 8003a48:	05db      	lsls	r3, r3, #23
 8003a4a:	0011      	movs	r1, r2
 8003a4c:	0018      	movs	r0, r3
 8003a4e:	f001 f851 	bl	8004af4 <HAL_GPIO_Init>

}
 8003a52:	46c0      	nop			; (mov r8, r8)
 8003a54:	46bd      	mov	sp, r7
 8003a56:	b009      	add	sp, #36	; 0x24
 8003a58:	bd90      	pop	{r4, r7, pc}
 8003a5a:	46c0      	nop			; (mov r8, r8)
 8003a5c:	40021000 	.word	0x40021000
 8003a60:	50000400 	.word	0x50000400

08003a64 <lw20Connect>:

/* USER CODE BEGIN 4 */
void lw20Connect(void)
{
 8003a64:	b580      	push	{r7, lr}
 8003a66:	b082      	sub	sp, #8
 8003a68:	af00      	add	r7, sp, #0
  char pData[] = "www\r\n";
 8003a6a:	003b      	movs	r3, r7
 8003a6c:	4a07      	ldr	r2, [pc, #28]	; (8003a8c <lw20Connect+0x28>)
 8003a6e:	6811      	ldr	r1, [r2, #0]
 8003a70:	6019      	str	r1, [r3, #0]
 8003a72:	8892      	ldrh	r2, [r2, #4]
 8003a74:	809a      	strh	r2, [r3, #4]
  HAL_UART_Transmit(&hlpuart1, (uint8_t*)pData, sizeof(pData), 1000);
 8003a76:	23fa      	movs	r3, #250	; 0xfa
 8003a78:	009b      	lsls	r3, r3, #2
 8003a7a:	0039      	movs	r1, r7
 8003a7c:	4804      	ldr	r0, [pc, #16]	; (8003a90 <lw20Connect+0x2c>)
 8003a7e:	2206      	movs	r2, #6
 8003a80:	f002 fe0e 	bl	80066a0 <HAL_UART_Transmit>
  // Send some characters to make sure the LW20 switches to serial mode.
}
 8003a84:	46c0      	nop			; (mov r8, r8)
 8003a86:	46bd      	mov	sp, r7
 8003a88:	b002      	add	sp, #8
 8003a8a:	bd80      	pop	{r7, pc}
 8003a8c:	0800a3d8 	.word	0x0800a3d8
 8003a90:	20000298 	.word	0x20000298

08003a94 <lw20SendCommand>:

bool lw20SendCommand(char* CommandStr)
{
 8003a94:	b590      	push	{r4, r7, lr}
 8003a96:	b085      	sub	sp, #20
 8003a98:	af00      	add	r7, sp, #0
 8003a9a:	6078      	str	r0, [r7, #4]
	uint8_t buffer1 = 0;
 8003a9c:	240f      	movs	r4, #15
 8003a9e:	193b      	adds	r3, r7, r4
 8003aa0:	2200      	movs	r2, #0
 8003aa2:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit(&hlpuart1, (uint8_t*)CommandStr, sizeof(CommandStr), 1000);
 8003aa4:	23fa      	movs	r3, #250	; 0xfa
 8003aa6:	009b      	lsls	r3, r3, #2
 8003aa8:	6879      	ldr	r1, [r7, #4]
 8003aaa:	481b      	ldr	r0, [pc, #108]	; (8003b18 <lw20SendCommand+0x84>)
 8003aac:	2204      	movs	r2, #4
 8003aae:	f002 fdf7 	bl	80066a0 <HAL_UART_Transmit>
	responseDataSize = 0;
 8003ab2:	4b1a      	ldr	r3, [pc, #104]	; (8003b1c <lw20SendCommand+0x88>)
 8003ab4:	2200      	movs	r2, #0
 8003ab6:	701a      	strb	r2, [r3, #0]
	HAL_UART_Receive(&hlpuart1, &buffer1, 1, 1000);
 8003ab8:	23fa      	movs	r3, #250	; 0xfa
 8003aba:	009b      	lsls	r3, r3, #2
 8003abc:	1939      	adds	r1, r7, r4
 8003abe:	4816      	ldr	r0, [pc, #88]	; (8003b18 <lw20SendCommand+0x84>)
 8003ac0:	2201      	movs	r2, #1
 8003ac2:	f002 fe95 	bl	80067f0 <HAL_UART_Receive>
	if(buffer1 == '\n'){
 8003ac6:	193b      	adds	r3, r7, r4
 8003ac8:	781b      	ldrb	r3, [r3, #0]
 8003aca:	2b0a      	cmp	r3, #10
 8003acc:	d107      	bne.n	8003ade <lw20SendCommand+0x4a>
		responseData[responseDataSize] = 0;
 8003ace:	4b13      	ldr	r3, [pc, #76]	; (8003b1c <lw20SendCommand+0x88>)
 8003ad0:	781b      	ldrb	r3, [r3, #0]
 8003ad2:	001a      	movs	r2, r3
 8003ad4:	4b12      	ldr	r3, [pc, #72]	; (8003b20 <lw20SendCommand+0x8c>)
 8003ad6:	2100      	movs	r1, #0
 8003ad8:	5499      	strb	r1, [r3, r2]
		return true;
 8003ada:	2301      	movs	r3, #1
 8003adc:	e018      	b.n	8003b10 <lw20SendCommand+0x7c>
	} else if(buffer1 != '\r'){
 8003ade:	230f      	movs	r3, #15
 8003ae0:	18fb      	adds	r3, r7, r3
 8003ae2:	781b      	ldrb	r3, [r3, #0]
 8003ae4:	2b0d      	cmp	r3, #13
 8003ae6:	d012      	beq.n	8003b0e <lw20SendCommand+0x7a>
		if(responseDataSize == sizeof(responseData)-1){
 8003ae8:	4b0c      	ldr	r3, [pc, #48]	; (8003b1c <lw20SendCommand+0x88>)
 8003aea:	781b      	ldrb	r3, [r3, #0]
 8003aec:	2b27      	cmp	r3, #39	; 0x27
 8003aee:	d102      	bne.n	8003af6 <lw20SendCommand+0x62>
			responseDataSize = 0;
 8003af0:	4b0a      	ldr	r3, [pc, #40]	; (8003b1c <lw20SendCommand+0x88>)
 8003af2:	2200      	movs	r2, #0
 8003af4:	701a      	strb	r2, [r3, #0]
		}

		responseData[responseDataSize++] = (char) buffer1;
 8003af6:	4b09      	ldr	r3, [pc, #36]	; (8003b1c <lw20SendCommand+0x88>)
 8003af8:	781b      	ldrb	r3, [r3, #0]
 8003afa:	1c5a      	adds	r2, r3, #1
 8003afc:	b2d1      	uxtb	r1, r2
 8003afe:	4a07      	ldr	r2, [pc, #28]	; (8003b1c <lw20SendCommand+0x88>)
 8003b00:	7011      	strb	r1, [r2, #0]
 8003b02:	001a      	movs	r2, r3
 8003b04:	230f      	movs	r3, #15
 8003b06:	18fb      	adds	r3, r7, r3
 8003b08:	7819      	ldrb	r1, [r3, #0]
 8003b0a:	4b05      	ldr	r3, [pc, #20]	; (8003b20 <lw20SendCommand+0x8c>)
 8003b0c:	5499      	strb	r1, [r3, r2]
	}

	return false;
 8003b0e:	2300      	movs	r3, #0
}
 8003b10:	0018      	movs	r0, r3
 8003b12:	46bd      	mov	sp, r7
 8003b14:	b005      	add	sp, #20
 8003b16:	bd90      	pop	{r4, r7, pc}
 8003b18:	20000298 	.word	0x20000298
 8003b1c:	200001fc 	.word	0x200001fc
 8003b20:	2000026c 	.word	0x2000026c

08003b24 <getNumberFromResponse>:

float getNumberFromResponse(char* ResponseStr)
{
 8003b24:	b580      	push	{r7, lr}
 8003b26:	b084      	sub	sp, #16
 8003b28:	af00      	add	r7, sp, #0
 8003b2a:	6078      	str	r0, [r7, #4]
	uint8_t index = 0;
 8003b2c:	230f      	movs	r3, #15
 8003b2e:	18fb      	adds	r3, r7, r3
 8003b30:	2200      	movs	r2, #0
 8003b32:	701a      	strb	r2, [r3, #0]

	while(true){
		if(ResponseStr[index] == 0)
 8003b34:	210f      	movs	r1, #15
 8003b36:	187b      	adds	r3, r7, r1
 8003b38:	781b      	ldrb	r3, [r3, #0]
 8003b3a:	687a      	ldr	r2, [r7, #4]
 8003b3c:	18d3      	adds	r3, r2, r3
 8003b3e:	781b      	ldrb	r3, [r3, #0]
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d01d      	beq.n	8003b80 <getNumberFromResponse+0x5c>
			break;
		if(ResponseStr[index] == ':')
 8003b44:	187b      	adds	r3, r7, r1
 8003b46:	781b      	ldrb	r3, [r3, #0]
 8003b48:	687a      	ldr	r2, [r7, #4]
 8003b4a:	18d3      	adds	r3, r2, r3
 8003b4c:	781b      	ldrb	r3, [r3, #0]
 8003b4e:	2b3a      	cmp	r3, #58	; 0x3a
 8003b50:	d10f      	bne.n	8003b72 <getNumberFromResponse+0x4e>
			return atof(ResponseStr+index+1);
 8003b52:	187b      	adds	r3, r7, r1
 8003b54:	781b      	ldrb	r3, [r3, #0]
 8003b56:	3301      	adds	r3, #1
 8003b58:	687a      	ldr	r2, [r7, #4]
 8003b5a:	18d3      	adds	r3, r2, r3
 8003b5c:	0018      	movs	r0, r3
 8003b5e:	f003 fb4f 	bl	8007200 <atof>
 8003b62:	0002      	movs	r2, r0
 8003b64:	000b      	movs	r3, r1
 8003b66:	0010      	movs	r0, r2
 8003b68:	0019      	movs	r1, r3
 8003b6a:	f7ff f875 	bl	8002c58 <__aeabi_d2f>
 8003b6e:	1c03      	adds	r3, r0, #0
 8003b70:	e008      	b.n	8003b84 <getNumberFromResponse+0x60>
		++index;
 8003b72:	220f      	movs	r2, #15
 8003b74:	18bb      	adds	r3, r7, r2
 8003b76:	18ba      	adds	r2, r7, r2
 8003b78:	7812      	ldrb	r2, [r2, #0]
 8003b7a:	3201      	adds	r2, #1
 8003b7c:	701a      	strb	r2, [r3, #0]
		if(ResponseStr[index] == 0)
 8003b7e:	e7d9      	b.n	8003b34 <getNumberFromResponse+0x10>
			break;
 8003b80:	46c0      	nop			; (mov r8, r8)
	}

	return 0.0f;
 8003b82:	2300      	movs	r3, #0
}
 8003b84:	1c18      	adds	r0, r3, #0
 8003b86:	46bd      	mov	sp, r7
 8003b88:	b004      	add	sp, #16
 8003b8a:	bd80      	pop	{r7, pc}

08003b8c <lw20GetDistance>:

float lw20GetDistance(void){
 8003b8c:	b580      	push	{r7, lr}
 8003b8e:	af00      	add	r7, sp, #0
	if(lw20SendCommand("?ldl\r\n"))
 8003b90:	4b07      	ldr	r3, [pc, #28]	; (8003bb0 <lw20GetDistance+0x24>)
 8003b92:	0018      	movs	r0, r3
 8003b94:	f7ff ff7e 	bl	8003a94 <lw20SendCommand>
 8003b98:	1e03      	subs	r3, r0, #0
 8003b9a:	d005      	beq.n	8003ba8 <lw20GetDistance+0x1c>
		return getNumberFromResponse((char*)responseData);
 8003b9c:	4b05      	ldr	r3, [pc, #20]	; (8003bb4 <lw20GetDistance+0x28>)
 8003b9e:	0018      	movs	r0, r3
 8003ba0:	f7ff ffc0 	bl	8003b24 <getNumberFromResponse>
 8003ba4:	1c03      	adds	r3, r0, #0
 8003ba6:	e000      	b.n	8003baa <lw20GetDistance+0x1e>
	return 0.0f;
 8003ba8:	2300      	movs	r3, #0
}
 8003baa:	1c18      	adds	r0, r3, #0
 8003bac:	46bd      	mov	sp, r7
 8003bae:	bd80      	pop	{r7, pc}
 8003bb0:	0800a3e0 	.word	0x0800a3e0
 8003bb4:	2000026c 	.word	0x2000026c

08003bb8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003bb8:	b580      	push	{r7, lr}
 8003bba:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003bbc:	b672      	cpsid	i
}
 8003bbe:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003bc0:	e7fe      	b.n	8003bc0 <Error_Handler+0x8>
	...

08003bc4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003bc4:	b580      	push	{r7, lr}
 8003bc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003bc8:	4b07      	ldr	r3, [pc, #28]	; (8003be8 <HAL_MspInit+0x24>)
 8003bca:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003bcc:	4b06      	ldr	r3, [pc, #24]	; (8003be8 <HAL_MspInit+0x24>)
 8003bce:	2101      	movs	r1, #1
 8003bd0:	430a      	orrs	r2, r1
 8003bd2:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8003bd4:	4b04      	ldr	r3, [pc, #16]	; (8003be8 <HAL_MspInit+0x24>)
 8003bd6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003bd8:	4b03      	ldr	r3, [pc, #12]	; (8003be8 <HAL_MspInit+0x24>)
 8003bda:	2180      	movs	r1, #128	; 0x80
 8003bdc:	0549      	lsls	r1, r1, #21
 8003bde:	430a      	orrs	r2, r1
 8003be0:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003be2:	46c0      	nop			; (mov r8, r8)
 8003be4:	46bd      	mov	sp, r7
 8003be6:	bd80      	pop	{r7, pc}
 8003be8:	40021000 	.word	0x40021000

08003bec <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003bec:	b590      	push	{r4, r7, lr}
 8003bee:	b089      	sub	sp, #36	; 0x24
 8003bf0:	af00      	add	r7, sp, #0
 8003bf2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003bf4:	240c      	movs	r4, #12
 8003bf6:	193b      	adds	r3, r7, r4
 8003bf8:	0018      	movs	r0, r3
 8003bfa:	2314      	movs	r3, #20
 8003bfc:	001a      	movs	r2, r3
 8003bfe:	2100      	movs	r1, #0
 8003c00:	f003 fb37 	bl	8007272 <memset>
  if(hadc->Instance==ADC1)
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	4a14      	ldr	r2, [pc, #80]	; (8003c5c <HAL_ADC_MspInit+0x70>)
 8003c0a:	4293      	cmp	r3, r2
 8003c0c:	d122      	bne.n	8003c54 <HAL_ADC_MspInit+0x68>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8003c0e:	4b14      	ldr	r3, [pc, #80]	; (8003c60 <HAL_ADC_MspInit+0x74>)
 8003c10:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003c12:	4b13      	ldr	r3, [pc, #76]	; (8003c60 <HAL_ADC_MspInit+0x74>)
 8003c14:	2180      	movs	r1, #128	; 0x80
 8003c16:	0089      	lsls	r1, r1, #2
 8003c18:	430a      	orrs	r2, r1
 8003c1a:	635a      	str	r2, [r3, #52]	; 0x34

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003c1c:	4b10      	ldr	r3, [pc, #64]	; (8003c60 <HAL_ADC_MspInit+0x74>)
 8003c1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c20:	4b0f      	ldr	r3, [pc, #60]	; (8003c60 <HAL_ADC_MspInit+0x74>)
 8003c22:	2101      	movs	r1, #1
 8003c24:	430a      	orrs	r2, r1
 8003c26:	62da      	str	r2, [r3, #44]	; 0x2c
 8003c28:	4b0d      	ldr	r3, [pc, #52]	; (8003c60 <HAL_ADC_MspInit+0x74>)
 8003c2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c2c:	2201      	movs	r2, #1
 8003c2e:	4013      	ands	r3, r2
 8003c30:	60bb      	str	r3, [r7, #8]
 8003c32:	68bb      	ldr	r3, [r7, #8]
    /**ADC GPIO Configuration
    PA2     ------> ADC_IN2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8003c34:	193b      	adds	r3, r7, r4
 8003c36:	2204      	movs	r2, #4
 8003c38:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003c3a:	193b      	adds	r3, r7, r4
 8003c3c:	2203      	movs	r2, #3
 8003c3e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c40:	193b      	adds	r3, r7, r4
 8003c42:	2200      	movs	r2, #0
 8003c44:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003c46:	193a      	adds	r2, r7, r4
 8003c48:	23a0      	movs	r3, #160	; 0xa0
 8003c4a:	05db      	lsls	r3, r3, #23
 8003c4c:	0011      	movs	r1, r2
 8003c4e:	0018      	movs	r0, r3
 8003c50:	f000 ff50 	bl	8004af4 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8003c54:	46c0      	nop			; (mov r8, r8)
 8003c56:	46bd      	mov	sp, r7
 8003c58:	b009      	add	sp, #36	; 0x24
 8003c5a:	bd90      	pop	{r4, r7, pc}
 8003c5c:	40012400 	.word	0x40012400
 8003c60:	40021000 	.word	0x40021000

08003c64 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003c64:	b590      	push	{r4, r7, lr}
 8003c66:	b089      	sub	sp, #36	; 0x24
 8003c68:	af00      	add	r7, sp, #0
 8003c6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003c6c:	240c      	movs	r4, #12
 8003c6e:	193b      	adds	r3, r7, r4
 8003c70:	0018      	movs	r0, r3
 8003c72:	2314      	movs	r3, #20
 8003c74:	001a      	movs	r2, r3
 8003c76:	2100      	movs	r1, #0
 8003c78:	f003 fafb 	bl	8007272 <memset>
  if(huart->Instance==LPUART1)
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	4a18      	ldr	r2, [pc, #96]	; (8003ce4 <HAL_UART_MspInit+0x80>)
 8003c82:	4293      	cmp	r3, r2
 8003c84:	d129      	bne.n	8003cda <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN LPUART1_MspInit 0 */

  /* USER CODE END LPUART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8003c86:	4b18      	ldr	r3, [pc, #96]	; (8003ce8 <HAL_UART_MspInit+0x84>)
 8003c88:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003c8a:	4b17      	ldr	r3, [pc, #92]	; (8003ce8 <HAL_UART_MspInit+0x84>)
 8003c8c:	2180      	movs	r1, #128	; 0x80
 8003c8e:	02c9      	lsls	r1, r1, #11
 8003c90:	430a      	orrs	r2, r1
 8003c92:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003c94:	4b14      	ldr	r3, [pc, #80]	; (8003ce8 <HAL_UART_MspInit+0x84>)
 8003c96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c98:	4b13      	ldr	r3, [pc, #76]	; (8003ce8 <HAL_UART_MspInit+0x84>)
 8003c9a:	2102      	movs	r1, #2
 8003c9c:	430a      	orrs	r2, r1
 8003c9e:	62da      	str	r2, [r3, #44]	; 0x2c
 8003ca0:	4b11      	ldr	r3, [pc, #68]	; (8003ce8 <HAL_UART_MspInit+0x84>)
 8003ca2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ca4:	2202      	movs	r2, #2
 8003ca6:	4013      	ands	r3, r2
 8003ca8:	60bb      	str	r3, [r7, #8]
 8003caa:	68bb      	ldr	r3, [r7, #8]
    /**LPUART1 GPIO Configuration
    PB10     ------> LPUART1_TX
    PB11     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8003cac:	193b      	adds	r3, r7, r4
 8003cae:	22c0      	movs	r2, #192	; 0xc0
 8003cb0:	0112      	lsls	r2, r2, #4
 8003cb2:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003cb4:	0021      	movs	r1, r4
 8003cb6:	187b      	adds	r3, r7, r1
 8003cb8:	2202      	movs	r2, #2
 8003cba:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003cbc:	187b      	adds	r3, r7, r1
 8003cbe:	2200      	movs	r2, #0
 8003cc0:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003cc2:	187b      	adds	r3, r7, r1
 8003cc4:	2203      	movs	r2, #3
 8003cc6:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_LPUART1;
 8003cc8:	187b      	adds	r3, r7, r1
 8003cca:	2204      	movs	r2, #4
 8003ccc:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003cce:	187b      	adds	r3, r7, r1
 8003cd0:	4a06      	ldr	r2, [pc, #24]	; (8003cec <HAL_UART_MspInit+0x88>)
 8003cd2:	0019      	movs	r1, r3
 8003cd4:	0010      	movs	r0, r2
 8003cd6:	f000 ff0d 	bl	8004af4 <HAL_GPIO_Init>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }

}
 8003cda:	46c0      	nop			; (mov r8, r8)
 8003cdc:	46bd      	mov	sp, r7
 8003cde:	b009      	add	sp, #36	; 0x24
 8003ce0:	bd90      	pop	{r4, r7, pc}
 8003ce2:	46c0      	nop			; (mov r8, r8)
 8003ce4:	40004800 	.word	0x40004800
 8003ce8:	40021000 	.word	0x40021000
 8003cec:	50000400 	.word	0x50000400

08003cf0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003cf0:	b590      	push	{r4, r7, lr}
 8003cf2:	b089      	sub	sp, #36	; 0x24
 8003cf4:	af00      	add	r7, sp, #0
 8003cf6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003cf8:	240c      	movs	r4, #12
 8003cfa:	193b      	adds	r3, r7, r4
 8003cfc:	0018      	movs	r0, r3
 8003cfe:	2314      	movs	r3, #20
 8003d00:	001a      	movs	r2, r3
 8003d02:	2100      	movs	r1, #0
 8003d04:	f003 fab5 	bl	8007272 <memset>
  if(hspi->Instance==SPI2)
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	4a18      	ldr	r2, [pc, #96]	; (8003d70 <HAL_SPI_MspInit+0x80>)
 8003d0e:	4293      	cmp	r3, r2
 8003d10:	d129      	bne.n	8003d66 <HAL_SPI_MspInit+0x76>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8003d12:	4b18      	ldr	r3, [pc, #96]	; (8003d74 <HAL_SPI_MspInit+0x84>)
 8003d14:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003d16:	4b17      	ldr	r3, [pc, #92]	; (8003d74 <HAL_SPI_MspInit+0x84>)
 8003d18:	2180      	movs	r1, #128	; 0x80
 8003d1a:	01c9      	lsls	r1, r1, #7
 8003d1c:	430a      	orrs	r2, r1
 8003d1e:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003d20:	4b14      	ldr	r3, [pc, #80]	; (8003d74 <HAL_SPI_MspInit+0x84>)
 8003d22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d24:	4b13      	ldr	r3, [pc, #76]	; (8003d74 <HAL_SPI_MspInit+0x84>)
 8003d26:	2102      	movs	r1, #2
 8003d28:	430a      	orrs	r2, r1
 8003d2a:	62da      	str	r2, [r3, #44]	; 0x2c
 8003d2c:	4b11      	ldr	r3, [pc, #68]	; (8003d74 <HAL_SPI_MspInit+0x84>)
 8003d2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d30:	2202      	movs	r2, #2
 8003d32:	4013      	ands	r3, r2
 8003d34:	60bb      	str	r3, [r7, #8]
 8003d36:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8003d38:	193b      	adds	r3, r7, r4
 8003d3a:	22e0      	movs	r2, #224	; 0xe0
 8003d3c:	0212      	lsls	r2, r2, #8
 8003d3e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003d40:	0021      	movs	r1, r4
 8003d42:	187b      	adds	r3, r7, r1
 8003d44:	2202      	movs	r2, #2
 8003d46:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d48:	187b      	adds	r3, r7, r1
 8003d4a:	2200      	movs	r2, #0
 8003d4c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003d4e:	187b      	adds	r3, r7, r1
 8003d50:	2203      	movs	r2, #3
 8003d52:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI2;
 8003d54:	187b      	adds	r3, r7, r1
 8003d56:	2200      	movs	r2, #0
 8003d58:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003d5a:	187b      	adds	r3, r7, r1
 8003d5c:	4a06      	ldr	r2, [pc, #24]	; (8003d78 <HAL_SPI_MspInit+0x88>)
 8003d5e:	0019      	movs	r1, r3
 8003d60:	0010      	movs	r0, r2
 8003d62:	f000 fec7 	bl	8004af4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8003d66:	46c0      	nop			; (mov r8, r8)
 8003d68:	46bd      	mov	sp, r7
 8003d6a:	b009      	add	sp, #36	; 0x24
 8003d6c:	bd90      	pop	{r4, r7, pc}
 8003d6e:	46c0      	nop			; (mov r8, r8)
 8003d70:	40003800 	.word	0x40003800
 8003d74:	40021000 	.word	0x40021000
 8003d78:	50000400 	.word	0x50000400

08003d7c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003d7c:	b580      	push	{r7, lr}
 8003d7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003d80:	e7fe      	b.n	8003d80 <NMI_Handler+0x4>

08003d82 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003d82:	b580      	push	{r7, lr}
 8003d84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003d86:	e7fe      	b.n	8003d86 <HardFault_Handler+0x4>

08003d88 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003d88:	b580      	push	{r7, lr}
 8003d8a:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8003d8c:	46c0      	nop			; (mov r8, r8)
 8003d8e:	46bd      	mov	sp, r7
 8003d90:	bd80      	pop	{r7, pc}

08003d92 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003d92:	b580      	push	{r7, lr}
 8003d94:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003d96:	46c0      	nop			; (mov r8, r8)
 8003d98:	46bd      	mov	sp, r7
 8003d9a:	bd80      	pop	{r7, pc}

08003d9c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003d9c:	b580      	push	{r7, lr}
 8003d9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003da0:	f000 f944 	bl	800402c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003da4:	46c0      	nop			; (mov r8, r8)
 8003da6:	46bd      	mov	sp, r7
 8003da8:	bd80      	pop	{r7, pc}

08003daa <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003daa:	b580      	push	{r7, lr}
 8003dac:	af00      	add	r7, sp, #0
	return 1;
 8003dae:	2301      	movs	r3, #1
}
 8003db0:	0018      	movs	r0, r3
 8003db2:	46bd      	mov	sp, r7
 8003db4:	bd80      	pop	{r7, pc}

08003db6 <_kill>:

int _kill(int pid, int sig)
{
 8003db6:	b580      	push	{r7, lr}
 8003db8:	b082      	sub	sp, #8
 8003dba:	af00      	add	r7, sp, #0
 8003dbc:	6078      	str	r0, [r7, #4]
 8003dbe:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8003dc0:	f003 fa24 	bl	800720c <__errno>
 8003dc4:	0003      	movs	r3, r0
 8003dc6:	2216      	movs	r2, #22
 8003dc8:	601a      	str	r2, [r3, #0]
	return -1;
 8003dca:	2301      	movs	r3, #1
 8003dcc:	425b      	negs	r3, r3
}
 8003dce:	0018      	movs	r0, r3
 8003dd0:	46bd      	mov	sp, r7
 8003dd2:	b002      	add	sp, #8
 8003dd4:	bd80      	pop	{r7, pc}

08003dd6 <_exit>:

void _exit (int status)
{
 8003dd6:	b580      	push	{r7, lr}
 8003dd8:	b082      	sub	sp, #8
 8003dda:	af00      	add	r7, sp, #0
 8003ddc:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8003dde:	2301      	movs	r3, #1
 8003de0:	425a      	negs	r2, r3
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	0011      	movs	r1, r2
 8003de6:	0018      	movs	r0, r3
 8003de8:	f7ff ffe5 	bl	8003db6 <_kill>
	while (1) {}		/* Make sure we hang here */
 8003dec:	e7fe      	b.n	8003dec <_exit+0x16>

08003dee <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003dee:	b580      	push	{r7, lr}
 8003df0:	b086      	sub	sp, #24
 8003df2:	af00      	add	r7, sp, #0
 8003df4:	60f8      	str	r0, [r7, #12]
 8003df6:	60b9      	str	r1, [r7, #8]
 8003df8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003dfa:	2300      	movs	r3, #0
 8003dfc:	617b      	str	r3, [r7, #20]
 8003dfe:	e00a      	b.n	8003e16 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8003e00:	e000      	b.n	8003e04 <_read+0x16>
 8003e02:	bf00      	nop
 8003e04:	0001      	movs	r1, r0
 8003e06:	68bb      	ldr	r3, [r7, #8]
 8003e08:	1c5a      	adds	r2, r3, #1
 8003e0a:	60ba      	str	r2, [r7, #8]
 8003e0c:	b2ca      	uxtb	r2, r1
 8003e0e:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003e10:	697b      	ldr	r3, [r7, #20]
 8003e12:	3301      	adds	r3, #1
 8003e14:	617b      	str	r3, [r7, #20]
 8003e16:	697a      	ldr	r2, [r7, #20]
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	429a      	cmp	r2, r3
 8003e1c:	dbf0      	blt.n	8003e00 <_read+0x12>
	}

return len;
 8003e1e:	687b      	ldr	r3, [r7, #4]
}
 8003e20:	0018      	movs	r0, r3
 8003e22:	46bd      	mov	sp, r7
 8003e24:	b006      	add	sp, #24
 8003e26:	bd80      	pop	{r7, pc}

08003e28 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003e28:	b580      	push	{r7, lr}
 8003e2a:	b086      	sub	sp, #24
 8003e2c:	af00      	add	r7, sp, #0
 8003e2e:	60f8      	str	r0, [r7, #12]
 8003e30:	60b9      	str	r1, [r7, #8]
 8003e32:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003e34:	2300      	movs	r3, #0
 8003e36:	617b      	str	r3, [r7, #20]
 8003e38:	e009      	b.n	8003e4e <_write+0x26>
	{
		__io_putchar(*ptr++);
 8003e3a:	68bb      	ldr	r3, [r7, #8]
 8003e3c:	1c5a      	adds	r2, r3, #1
 8003e3e:	60ba      	str	r2, [r7, #8]
 8003e40:	781b      	ldrb	r3, [r3, #0]
 8003e42:	0018      	movs	r0, r3
 8003e44:	e000      	b.n	8003e48 <_write+0x20>
 8003e46:	bf00      	nop
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003e48:	697b      	ldr	r3, [r7, #20]
 8003e4a:	3301      	adds	r3, #1
 8003e4c:	617b      	str	r3, [r7, #20]
 8003e4e:	697a      	ldr	r2, [r7, #20]
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	429a      	cmp	r2, r3
 8003e54:	dbf1      	blt.n	8003e3a <_write+0x12>
	}
	return len;
 8003e56:	687b      	ldr	r3, [r7, #4]
}
 8003e58:	0018      	movs	r0, r3
 8003e5a:	46bd      	mov	sp, r7
 8003e5c:	b006      	add	sp, #24
 8003e5e:	bd80      	pop	{r7, pc}

08003e60 <_close>:

int _close(int file)
{
 8003e60:	b580      	push	{r7, lr}
 8003e62:	b082      	sub	sp, #8
 8003e64:	af00      	add	r7, sp, #0
 8003e66:	6078      	str	r0, [r7, #4]
	return -1;
 8003e68:	2301      	movs	r3, #1
 8003e6a:	425b      	negs	r3, r3
}
 8003e6c:	0018      	movs	r0, r3
 8003e6e:	46bd      	mov	sp, r7
 8003e70:	b002      	add	sp, #8
 8003e72:	bd80      	pop	{r7, pc}

08003e74 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003e74:	b580      	push	{r7, lr}
 8003e76:	b082      	sub	sp, #8
 8003e78:	af00      	add	r7, sp, #0
 8003e7a:	6078      	str	r0, [r7, #4]
 8003e7c:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8003e7e:	683b      	ldr	r3, [r7, #0]
 8003e80:	2280      	movs	r2, #128	; 0x80
 8003e82:	0192      	lsls	r2, r2, #6
 8003e84:	605a      	str	r2, [r3, #4]
	return 0;
 8003e86:	2300      	movs	r3, #0
}
 8003e88:	0018      	movs	r0, r3
 8003e8a:	46bd      	mov	sp, r7
 8003e8c:	b002      	add	sp, #8
 8003e8e:	bd80      	pop	{r7, pc}

08003e90 <_isatty>:

int _isatty(int file)
{
 8003e90:	b580      	push	{r7, lr}
 8003e92:	b082      	sub	sp, #8
 8003e94:	af00      	add	r7, sp, #0
 8003e96:	6078      	str	r0, [r7, #4]
	return 1;
 8003e98:	2301      	movs	r3, #1
}
 8003e9a:	0018      	movs	r0, r3
 8003e9c:	46bd      	mov	sp, r7
 8003e9e:	b002      	add	sp, #8
 8003ea0:	bd80      	pop	{r7, pc}

08003ea2 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003ea2:	b580      	push	{r7, lr}
 8003ea4:	b084      	sub	sp, #16
 8003ea6:	af00      	add	r7, sp, #0
 8003ea8:	60f8      	str	r0, [r7, #12]
 8003eaa:	60b9      	str	r1, [r7, #8]
 8003eac:	607a      	str	r2, [r7, #4]
	return 0;
 8003eae:	2300      	movs	r3, #0
}
 8003eb0:	0018      	movs	r0, r3
 8003eb2:	46bd      	mov	sp, r7
 8003eb4:	b004      	add	sp, #16
 8003eb6:	bd80      	pop	{r7, pc}

08003eb8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003eb8:	b580      	push	{r7, lr}
 8003eba:	b086      	sub	sp, #24
 8003ebc:	af00      	add	r7, sp, #0
 8003ebe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003ec0:	4a14      	ldr	r2, [pc, #80]	; (8003f14 <_sbrk+0x5c>)
 8003ec2:	4b15      	ldr	r3, [pc, #84]	; (8003f18 <_sbrk+0x60>)
 8003ec4:	1ad3      	subs	r3, r2, r3
 8003ec6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003ec8:	697b      	ldr	r3, [r7, #20]
 8003eca:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003ecc:	4b13      	ldr	r3, [pc, #76]	; (8003f1c <_sbrk+0x64>)
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d102      	bne.n	8003eda <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003ed4:	4b11      	ldr	r3, [pc, #68]	; (8003f1c <_sbrk+0x64>)
 8003ed6:	4a12      	ldr	r2, [pc, #72]	; (8003f20 <_sbrk+0x68>)
 8003ed8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003eda:	4b10      	ldr	r3, [pc, #64]	; (8003f1c <_sbrk+0x64>)
 8003edc:	681a      	ldr	r2, [r3, #0]
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	18d3      	adds	r3, r2, r3
 8003ee2:	693a      	ldr	r2, [r7, #16]
 8003ee4:	429a      	cmp	r2, r3
 8003ee6:	d207      	bcs.n	8003ef8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003ee8:	f003 f990 	bl	800720c <__errno>
 8003eec:	0003      	movs	r3, r0
 8003eee:	220c      	movs	r2, #12
 8003ef0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003ef2:	2301      	movs	r3, #1
 8003ef4:	425b      	negs	r3, r3
 8003ef6:	e009      	b.n	8003f0c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003ef8:	4b08      	ldr	r3, [pc, #32]	; (8003f1c <_sbrk+0x64>)
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003efe:	4b07      	ldr	r3, [pc, #28]	; (8003f1c <_sbrk+0x64>)
 8003f00:	681a      	ldr	r2, [r3, #0]
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	18d2      	adds	r2, r2, r3
 8003f06:	4b05      	ldr	r3, [pc, #20]	; (8003f1c <_sbrk+0x64>)
 8003f08:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8003f0a:	68fb      	ldr	r3, [r7, #12]
}
 8003f0c:	0018      	movs	r0, r3
 8003f0e:	46bd      	mov	sp, r7
 8003f10:	b006      	add	sp, #24
 8003f12:	bd80      	pop	{r7, pc}
 8003f14:	20002000 	.word	0x20002000
 8003f18:	00000400 	.word	0x00000400
 8003f1c:	20000200 	.word	0x20000200
 8003f20:	200006d0 	.word	0x200006d0

08003f24 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8003f24:	b580      	push	{r7, lr}
 8003f26:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003f28:	46c0      	nop			; (mov r8, r8)
 8003f2a:	46bd      	mov	sp, r7
 8003f2c:	bd80      	pop	{r7, pc}
	...

08003f30 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   r0, =_estack
 8003f30:	480d      	ldr	r0, [pc, #52]	; (8003f68 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8003f32:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003f34:	480d      	ldr	r0, [pc, #52]	; (8003f6c <LoopForever+0x6>)
  ldr r1, =_edata
 8003f36:	490e      	ldr	r1, [pc, #56]	; (8003f70 <LoopForever+0xa>)
  ldr r2, =_sidata
 8003f38:	4a0e      	ldr	r2, [pc, #56]	; (8003f74 <LoopForever+0xe>)
  movs r3, #0
 8003f3a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003f3c:	e002      	b.n	8003f44 <LoopCopyDataInit>

08003f3e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003f3e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003f40:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003f42:	3304      	adds	r3, #4

08003f44 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003f44:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003f46:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003f48:	d3f9      	bcc.n	8003f3e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003f4a:	4a0b      	ldr	r2, [pc, #44]	; (8003f78 <LoopForever+0x12>)
  ldr r4, =_ebss
 8003f4c:	4c0b      	ldr	r4, [pc, #44]	; (8003f7c <LoopForever+0x16>)
  movs r3, #0
 8003f4e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003f50:	e001      	b.n	8003f56 <LoopFillZerobss>

08003f52 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003f52:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003f54:	3204      	adds	r2, #4

08003f56 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003f56:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003f58:	d3fb      	bcc.n	8003f52 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8003f5a:	f7ff ffe3 	bl	8003f24 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003f5e:	f003 f95b 	bl	8007218 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003f62:	f7ff fae1 	bl	8003528 <main>

08003f66 <LoopForever>:

LoopForever:
    b LoopForever
 8003f66:	e7fe      	b.n	8003f66 <LoopForever>
  ldr   r0, =_estack
 8003f68:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8003f6c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003f70:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 8003f74:	0800a984 	.word	0x0800a984
  ldr r2, =_sbss
 8003f78:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 8003f7c:	200006cc 	.word	0x200006cc

08003f80 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003f80:	e7fe      	b.n	8003f80 <ADC1_COMP_IRQHandler>
	...

08003f84 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003f84:	b580      	push	{r7, lr}
 8003f86:	b082      	sub	sp, #8
 8003f88:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8003f8a:	1dfb      	adds	r3, r7, #7
 8003f8c:	2200      	movs	r2, #0
 8003f8e:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8003f90:	4b0b      	ldr	r3, [pc, #44]	; (8003fc0 <HAL_Init+0x3c>)
 8003f92:	681a      	ldr	r2, [r3, #0]
 8003f94:	4b0a      	ldr	r3, [pc, #40]	; (8003fc0 <HAL_Init+0x3c>)
 8003f96:	2140      	movs	r1, #64	; 0x40
 8003f98:	430a      	orrs	r2, r1
 8003f9a:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003f9c:	2000      	movs	r0, #0
 8003f9e:	f000 f811 	bl	8003fc4 <HAL_InitTick>
 8003fa2:	1e03      	subs	r3, r0, #0
 8003fa4:	d003      	beq.n	8003fae <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 8003fa6:	1dfb      	adds	r3, r7, #7
 8003fa8:	2201      	movs	r2, #1
 8003faa:	701a      	strb	r2, [r3, #0]
 8003fac:	e001      	b.n	8003fb2 <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8003fae:	f7ff fe09 	bl	8003bc4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8003fb2:	1dfb      	adds	r3, r7, #7
 8003fb4:	781b      	ldrb	r3, [r3, #0]
}
 8003fb6:	0018      	movs	r0, r3
 8003fb8:	46bd      	mov	sp, r7
 8003fba:	b002      	add	sp, #8
 8003fbc:	bd80      	pop	{r7, pc}
 8003fbe:	46c0      	nop			; (mov r8, r8)
 8003fc0:	40022000 	.word	0x40022000

08003fc4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003fc4:	b590      	push	{r4, r7, lr}
 8003fc6:	b083      	sub	sp, #12
 8003fc8:	af00      	add	r7, sp, #0
 8003fca:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003fcc:	4b14      	ldr	r3, [pc, #80]	; (8004020 <HAL_InitTick+0x5c>)
 8003fce:	681c      	ldr	r4, [r3, #0]
 8003fd0:	4b14      	ldr	r3, [pc, #80]	; (8004024 <HAL_InitTick+0x60>)
 8003fd2:	781b      	ldrb	r3, [r3, #0]
 8003fd4:	0019      	movs	r1, r3
 8003fd6:	23fa      	movs	r3, #250	; 0xfa
 8003fd8:	0098      	lsls	r0, r3, #2
 8003fda:	f7fc f8b1 	bl	8000140 <__udivsi3>
 8003fde:	0003      	movs	r3, r0
 8003fe0:	0019      	movs	r1, r3
 8003fe2:	0020      	movs	r0, r4
 8003fe4:	f7fc f8ac 	bl	8000140 <__udivsi3>
 8003fe8:	0003      	movs	r3, r0
 8003fea:	0018      	movs	r0, r3
 8003fec:	f000 fd75 	bl	8004ada <HAL_SYSTICK_Config>
 8003ff0:	1e03      	subs	r3, r0, #0
 8003ff2:	d001      	beq.n	8003ff8 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8003ff4:	2301      	movs	r3, #1
 8003ff6:	e00f      	b.n	8004018 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	2b03      	cmp	r3, #3
 8003ffc:	d80b      	bhi.n	8004016 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003ffe:	6879      	ldr	r1, [r7, #4]
 8004000:	2301      	movs	r3, #1
 8004002:	425b      	negs	r3, r3
 8004004:	2200      	movs	r2, #0
 8004006:	0018      	movs	r0, r3
 8004008:	f000 fd52 	bl	8004ab0 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800400c:	4b06      	ldr	r3, [pc, #24]	; (8004028 <HAL_InitTick+0x64>)
 800400e:	687a      	ldr	r2, [r7, #4]
 8004010:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8004012:	2300      	movs	r3, #0
 8004014:	e000      	b.n	8004018 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8004016:	2301      	movs	r3, #1
}
 8004018:	0018      	movs	r0, r3
 800401a:	46bd      	mov	sp, r7
 800401c:	b003      	add	sp, #12
 800401e:	bd90      	pop	{r4, r7, pc}
 8004020:	20000000 	.word	0x20000000
 8004024:	20000008 	.word	0x20000008
 8004028:	20000004 	.word	0x20000004

0800402c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800402c:	b580      	push	{r7, lr}
 800402e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004030:	4b05      	ldr	r3, [pc, #20]	; (8004048 <HAL_IncTick+0x1c>)
 8004032:	781b      	ldrb	r3, [r3, #0]
 8004034:	001a      	movs	r2, r3
 8004036:	4b05      	ldr	r3, [pc, #20]	; (800404c <HAL_IncTick+0x20>)
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	18d2      	adds	r2, r2, r3
 800403c:	4b03      	ldr	r3, [pc, #12]	; (800404c <HAL_IncTick+0x20>)
 800403e:	601a      	str	r2, [r3, #0]
}
 8004040:	46c0      	nop			; (mov r8, r8)
 8004042:	46bd      	mov	sp, r7
 8004044:	bd80      	pop	{r7, pc}
 8004046:	46c0      	nop			; (mov r8, r8)
 8004048:	20000008 	.word	0x20000008
 800404c:	200006b8 	.word	0x200006b8

08004050 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004050:	b580      	push	{r7, lr}
 8004052:	af00      	add	r7, sp, #0
  return uwTick;
 8004054:	4b02      	ldr	r3, [pc, #8]	; (8004060 <HAL_GetTick+0x10>)
 8004056:	681b      	ldr	r3, [r3, #0]
}
 8004058:	0018      	movs	r0, r3
 800405a:	46bd      	mov	sp, r7
 800405c:	bd80      	pop	{r7, pc}
 800405e:	46c0      	nop			; (mov r8, r8)
 8004060:	200006b8 	.word	0x200006b8

08004064 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004064:	b580      	push	{r7, lr}
 8004066:	b084      	sub	sp, #16
 8004068:	af00      	add	r7, sp, #0
 800406a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800406c:	f7ff fff0 	bl	8004050 <HAL_GetTick>
 8004070:	0003      	movs	r3, r0
 8004072:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	3301      	adds	r3, #1
 800407c:	d005      	beq.n	800408a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800407e:	4b0a      	ldr	r3, [pc, #40]	; (80040a8 <HAL_Delay+0x44>)
 8004080:	781b      	ldrb	r3, [r3, #0]
 8004082:	001a      	movs	r2, r3
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	189b      	adds	r3, r3, r2
 8004088:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800408a:	46c0      	nop			; (mov r8, r8)
 800408c:	f7ff ffe0 	bl	8004050 <HAL_GetTick>
 8004090:	0002      	movs	r2, r0
 8004092:	68bb      	ldr	r3, [r7, #8]
 8004094:	1ad3      	subs	r3, r2, r3
 8004096:	68fa      	ldr	r2, [r7, #12]
 8004098:	429a      	cmp	r2, r3
 800409a:	d8f7      	bhi.n	800408c <HAL_Delay+0x28>
  {
  }
}
 800409c:	46c0      	nop			; (mov r8, r8)
 800409e:	46c0      	nop			; (mov r8, r8)
 80040a0:	46bd      	mov	sp, r7
 80040a2:	b004      	add	sp, #16
 80040a4:	bd80      	pop	{r7, pc}
 80040a6:	46c0      	nop			; (mov r8, r8)
 80040a8:	20000008 	.word	0x20000008

080040ac <HAL_ADC_Init>:
  *         function "HAL_ADCEx_EnableVREFINTTempSensor()" must be called similarilly.  
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80040ac:	b580      	push	{r7, lr}
 80040ae:	b082      	sub	sp, #8
 80040b0:	af00      	add	r7, sp, #0
 80040b2:	6078      	str	r0, [r7, #4]
 
  /* Check ADC handle */
  if(hadc == NULL)
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d101      	bne.n	80040be <HAL_ADC_Init+0x12>
  {
    return HAL_ERROR;
 80040ba:	2301      	movs	r3, #1
 80040bc:	e159      	b.n	8004372 <HAL_ADC_Init+0x2c6>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if(hadc->State == HAL_ADC_STATE_RESET)
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d10a      	bne.n	80040dc <HAL_ADC_Init+0x30>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	2200      	movs	r2, #0
 80040ca:	659a      	str	r2, [r3, #88]	; 0x58
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	2250      	movs	r2, #80	; 0x50
 80040d0:	2100      	movs	r1, #0
 80040d2:	5499      	strb	r1, [r3, r2]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	0018      	movs	r0, r3
 80040d8:	f7ff fd88 	bl	8003bec <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040e0:	2210      	movs	r2, #16
 80040e2:	4013      	ands	r3, r2
 80040e4:	2b10      	cmp	r3, #16
 80040e6:	d005      	beq.n	80040f4 <HAL_ADC_Init+0x48>
     (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)  )
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	689b      	ldr	r3, [r3, #8]
 80040ee:	2204      	movs	r2, #4
 80040f0:	4013      	ands	r3, r2
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 80040f2:	d00b      	beq.n	800410c <HAL_ADC_Init+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040f8:	2210      	movs	r2, #16
 80040fa:	431a      	orrs	r2, r3
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	655a      	str	r2, [r3, #84]	; 0x54
        
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	2250      	movs	r2, #80	; 0x50
 8004104:	2100      	movs	r1, #0
 8004106:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 8004108:	2301      	movs	r3, #1
 800410a:	e132      	b.n	8004372 <HAL_ADC_Init+0x2c6>
  }

  /* Set ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004110:	4a9a      	ldr	r2, [pc, #616]	; (800437c <HAL_ADC_Init+0x2d0>)
 8004112:	4013      	ands	r3, r2
 8004114:	2202      	movs	r2, #2
 8004116:	431a      	orrs	r2, r3
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	655a      	str	r2, [r3, #84]	; 0x54
  /* Parameters update conditioned to ADC state:                            */
  /* Parameters that can be updated only when ADC is disabled:              */
  /*  - ADC clock mode                                                      */
  /*  - ADC clock prescaler                                                 */
  /*  - ADC Resolution                                                      */
  if (ADC_IS_ENABLE(hadc) == RESET)
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	689b      	ldr	r3, [r3, #8]
 8004122:	2203      	movs	r2, #3
 8004124:	4013      	ands	r3, r2
 8004126:	2b01      	cmp	r3, #1
 8004128:	d108      	bne.n	800413c <HAL_ADC_Init+0x90>
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	2201      	movs	r2, #1
 8004132:	4013      	ands	r3, r2
 8004134:	2b01      	cmp	r3, #1
 8004136:	d101      	bne.n	800413c <HAL_ADC_Init+0x90>
 8004138:	2301      	movs	r3, #1
 800413a:	e000      	b.n	800413e <HAL_ADC_Init+0x92>
 800413c:	2300      	movs	r3, #0
 800413e:	2b00      	cmp	r3, #0
 8004140:	d149      	bne.n	80041d6 <HAL_ADC_Init+0x12a>
    /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
    /*     (set into HAL_ADC_ConfigChannel() )                              */
   
    /* Configuration of ADC clock: clock source PCLK or asynchronous with 
    selectable prescaler */
    __HAL_ADC_CLOCK_PRESCALER(hadc);
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	685a      	ldr	r2, [r3, #4]
 8004146:	23c0      	movs	r3, #192	; 0xc0
 8004148:	061b      	lsls	r3, r3, #24
 800414a:	429a      	cmp	r2, r3
 800414c:	d00b      	beq.n	8004166 <HAL_ADC_Init+0xba>
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	685a      	ldr	r2, [r3, #4]
 8004152:	2380      	movs	r3, #128	; 0x80
 8004154:	05db      	lsls	r3, r3, #23
 8004156:	429a      	cmp	r2, r3
 8004158:	d005      	beq.n	8004166 <HAL_ADC_Init+0xba>
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	685a      	ldr	r2, [r3, #4]
 800415e:	2380      	movs	r3, #128	; 0x80
 8004160:	061b      	lsls	r3, r3, #24
 8004162:	429a      	cmp	r2, r3
 8004164:	d111      	bne.n	800418a <HAL_ADC_Init+0xde>
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	691a      	ldr	r2, [r3, #16]
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	0092      	lsls	r2, r2, #2
 8004172:	0892      	lsrs	r2, r2, #2
 8004174:	611a      	str	r2, [r3, #16]
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	6919      	ldr	r1, [r3, #16]
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	685a      	ldr	r2, [r3, #4]
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	430a      	orrs	r2, r1
 8004186:	611a      	str	r2, [r3, #16]
 8004188:	e014      	b.n	80041b4 <HAL_ADC_Init+0x108>
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	691a      	ldr	r2, [r3, #16]
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	0092      	lsls	r2, r2, #2
 8004196:	0892      	lsrs	r2, r2, #2
 8004198:	611a      	str	r2, [r3, #16]
 800419a:	4b79      	ldr	r3, [pc, #484]	; (8004380 <HAL_ADC_Init+0x2d4>)
 800419c:	681a      	ldr	r2, [r3, #0]
 800419e:	4b78      	ldr	r3, [pc, #480]	; (8004380 <HAL_ADC_Init+0x2d4>)
 80041a0:	4978      	ldr	r1, [pc, #480]	; (8004384 <HAL_ADC_Init+0x2d8>)
 80041a2:	400a      	ands	r2, r1
 80041a4:	601a      	str	r2, [r3, #0]
 80041a6:	4b76      	ldr	r3, [pc, #472]	; (8004380 <HAL_ADC_Init+0x2d4>)
 80041a8:	6819      	ldr	r1, [r3, #0]
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	685a      	ldr	r2, [r3, #4]
 80041ae:	4b74      	ldr	r3, [pc, #464]	; (8004380 <HAL_ADC_Init+0x2d4>)
 80041b0:	430a      	orrs	r2, r1
 80041b2:	601a      	str	r2, [r3, #0]
    
    /* Configuration of ADC:                                                */
    /*  - Resolution                                                        */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_RES);
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	68da      	ldr	r2, [r3, #12]
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	2118      	movs	r1, #24
 80041c0:	438a      	bics	r2, r1
 80041c2:	60da      	str	r2, [r3, #12]
    hadc->Instance->CFGR1 |= hadc->Init.Resolution;    
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	68d9      	ldr	r1, [r3, #12]
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	689a      	ldr	r2, [r3, #8]
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	430a      	orrs	r2, r1
 80041d4:	60da      	str	r2, [r3, #12]
  }
  
  /* Set the Low Frequency mode */
  ADC->CCR &= (uint32_t)~ADC_CCR_LFMEN;
 80041d6:	4b6a      	ldr	r3, [pc, #424]	; (8004380 <HAL_ADC_Init+0x2d4>)
 80041d8:	681a      	ldr	r2, [r3, #0]
 80041da:	4b69      	ldr	r3, [pc, #420]	; (8004380 <HAL_ADC_Init+0x2d4>)
 80041dc:	496a      	ldr	r1, [pc, #424]	; (8004388 <HAL_ADC_Init+0x2dc>)
 80041de:	400a      	ands	r2, r1
 80041e0:	601a      	str	r2, [r3, #0]
  ADC->CCR |=__HAL_ADC_CCR_LOWFREQUENCY(hadc->Init.LowPowerFrequencyMode);  
 80041e2:	4b67      	ldr	r3, [pc, #412]	; (8004380 <HAL_ADC_Init+0x2d4>)
 80041e4:	6819      	ldr	r1, [r3, #0]
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80041ea:	065a      	lsls	r2, r3, #25
 80041ec:	4b64      	ldr	r3, [pc, #400]	; (8004380 <HAL_ADC_Init+0x2d4>)
 80041ee:	430a      	orrs	r2, r1
 80041f0:	601a      	str	r2, [r3, #0]
   
  /* Enable voltage regulator (if disabled at this step) */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN))
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	689a      	ldr	r2, [r3, #8]
 80041f8:	2380      	movs	r3, #128	; 0x80
 80041fa:	055b      	lsls	r3, r3, #21
 80041fc:	4013      	ands	r3, r2
 80041fe:	d108      	bne.n	8004212 <HAL_ADC_Init+0x166>
  {
    /* Set ADVREGEN bit */
    hadc->Instance->CR |= ADC_CR_ADVREGEN;
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	689a      	ldr	r2, [r3, #8]
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	2180      	movs	r1, #128	; 0x80
 800420c:	0549      	lsls	r1, r1, #21
 800420e:	430a      	orrs	r2, r1
 8004210:	609a      	str	r2, [r3, #8]
  /*  - Continuous conversion mode                                            */
  /*  - DMA continuous request                                                */
  /*  - Overrun                                                               */
  /*  - AutoDelay feature                                                     */
  /*  - Discontinuous mode                                                    */
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_ALIGN   |
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	68da      	ldr	r2, [r3, #12]
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	495b      	ldr	r1, [pc, #364]	; (800438c <HAL_ADC_Init+0x2e0>)
 800421e:	400a      	ands	r2, r1
 8004220:	60da      	str	r2, [r3, #12]
                             ADC_CFGR1_OVRMOD  |
                             ADC_CFGR1_AUTDLY  |
                             ADC_CFGR1_AUTOFF  |
                             ADC_CFGR1_DISCEN   );
  
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	68d9      	ldr	r1, [r3, #12]
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	68da      	ldr	r2, [r3, #12]
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	691b      	ldr	r3, [r3, #16]
 8004230:	2b02      	cmp	r3, #2
 8004232:	d101      	bne.n	8004238 <HAL_ADC_Init+0x18c>
 8004234:	2304      	movs	r3, #4
 8004236:	e000      	b.n	800423a <HAL_ADC_Init+0x18e>
 8004238:	2300      	movs	r3, #0
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 800423a:	431a      	orrs	r2, r3
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	2020      	movs	r0, #32
 8004240:	5c1b      	ldrb	r3, [r3, r0]
 8004242:	035b      	lsls	r3, r3, #13
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 8004244:	431a      	orrs	r2, r3
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	202c      	movs	r0, #44	; 0x2c
 800424a:	5c1b      	ldrb	r3, [r3, r0]
 800424c:	005b      	lsls	r3, r3, #1
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 800424e:	431a      	orrs	r2, r3
                            hadc->Init.Overrun                               |
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8004254:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	699b      	ldr	r3, [r3, #24]
 800425a:	039b      	lsls	r3, r3, #14
                            hadc->Init.Overrun                               |
 800425c:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AUTOFF(hadc->Init.LowPowerAutoPowerOff));
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	69db      	ldr	r3, [r3, #28]
 8004262:	03db      	lsls	r3, r3, #15
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 8004264:	431a      	orrs	r2, r3
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	430a      	orrs	r2, r1
 800426c:	60da      	str	r2, [r3, #12]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004272:	23c2      	movs	r3, #194	; 0xc2
 8004274:	33ff      	adds	r3, #255	; 0xff
 8004276:	429a      	cmp	r2, r3
 8004278:	d00b      	beq.n	8004292 <HAL_ADC_Init+0x1e6>
  {
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	68d9      	ldr	r1, [r3, #12]
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                             hadc->Init.ExternalTrigConvEdge;
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 8004288:	431a      	orrs	r2, r3
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	430a      	orrs	r2, r1
 8004290:	60da      	str	r2, [r3, #12]
  }
  
  /* Enable discontinuous mode only if continuous mode is disabled */
  if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	2221      	movs	r2, #33	; 0x21
 8004296:	5c9b      	ldrb	r3, [r3, r2]
 8004298:	2b01      	cmp	r3, #1
 800429a:	d11a      	bne.n	80042d2 <HAL_ADC_Init+0x226>
  {
    if (hadc->Init.ContinuousConvMode == DISABLE)
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	2220      	movs	r2, #32
 80042a0:	5c9b      	ldrb	r3, [r3, r2]
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d109      	bne.n	80042ba <HAL_ADC_Init+0x20e>
    {
      /* Enable the selected ADC group regular discontinuous mode */
      hadc->Instance->CFGR1 |= (ADC_CFGR1_DISCEN);
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	68da      	ldr	r2, [r3, #12]
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	2180      	movs	r1, #128	; 0x80
 80042b2:	0249      	lsls	r1, r1, #9
 80042b4:	430a      	orrs	r2, r1
 80042b6:	60da      	str	r2, [r3, #12]
 80042b8:	e00b      	b.n	80042d2 <HAL_ADC_Init+0x226>
      /* ADC regular group discontinuous was intended to be enabled,        */
      /* but ADC regular group modes continuous and sequencer discontinuous */
      /* cannot be enabled simultaneously.                                  */
      
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042be:	2220      	movs	r2, #32
 80042c0:	431a      	orrs	r2, r3
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80042ca:	2201      	movs	r2, #1
 80042cc:	431a      	orrs	r2, r3
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	659a      	str	r2, [r3, #88]	; 0x58
    }
  }
  
  if (hadc->Init.OversamplingMode == ENABLE)
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80042d6:	2b01      	cmp	r3, #1
 80042d8:	d11f      	bne.n	800431a <HAL_ADC_Init+0x26e>
    /* Configuration of Oversampler:                                          */
    /*  - Oversampling Ratio                                                  */
    /*  - Right bit shift                                                     */
    /*  - Triggered mode                                                      */
    
    hadc->Instance->CFGR2 &= ~( ADC_CFGR2_OVSR |
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	691a      	ldr	r2, [r3, #16]
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	492a      	ldr	r1, [pc, #168]	; (8004390 <HAL_ADC_Init+0x2e4>)
 80042e6:	400a      	ands	r2, r1
 80042e8:	611a      	str	r2, [r3, #16]
                                ADC_CFGR2_OVSS |
                                ADC_CFGR2_TOVS );
    
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	6919      	ldr	r1, [r3, #16]
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
                               hadc->Init.Oversample.RightBitShift             |
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 80042f8:	431a      	orrs	r2, r3
                               hadc->Init.Oversample.TriggeredMode );
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                               hadc->Init.Oversample.RightBitShift             |
 80042fe:	431a      	orrs	r2, r3
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	430a      	orrs	r2, r1
 8004306:	611a      	str	r2, [r3, #16]
    
    /* Enable OverSampling mode */
     hadc->Instance->CFGR2 |= ADC_CFGR2_OVSE;
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	691a      	ldr	r2, [r3, #16]
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	2101      	movs	r1, #1
 8004314:	430a      	orrs	r2, r1
 8004316:	611a      	str	r2, [r3, #16]
 8004318:	e00e      	b.n	8004338 <HAL_ADC_Init+0x28c>
  }
  else
  {
    if(HAL_IS_BIT_SET(hadc->Instance->CFGR2, ADC_CFGR2_OVSE))
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	691b      	ldr	r3, [r3, #16]
 8004320:	2201      	movs	r2, #1
 8004322:	4013      	ands	r3, r2
 8004324:	2b01      	cmp	r3, #1
 8004326:	d107      	bne.n	8004338 <HAL_ADC_Init+0x28c>
    {
      /* Disable OverSampling mode if needed */
      hadc->Instance->CFGR2 &= ~ADC_CFGR2_OVSE;
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	691a      	ldr	r2, [r3, #16]
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	2101      	movs	r1, #1
 8004334:	438a      	bics	r2, r1
 8004336:	611a      	str	r2, [r3, #16]
    }
  }    
  
  /* Clear the old sampling time */
  hadc->Instance->SMPR &= (uint32_t)(~ADC_SMPR_SMPR);
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	695a      	ldr	r2, [r3, #20]
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	2107      	movs	r1, #7
 8004344:	438a      	bics	r2, r1
 8004346:	615a      	str	r2, [r3, #20]
  
  /* Set the new sample time */
  hadc->Instance->SMPR |= hadc->Init.SamplingTime;
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	6959      	ldr	r1, [r3, #20]
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	430a      	orrs	r2, r1
 8004358:	615a      	str	r2, [r3, #20]
  
  /* Clear ADC error code */
  ADC_CLEAR_ERRORCODE(hadc);
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	2200      	movs	r2, #0
 800435e:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set the ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004364:	2203      	movs	r2, #3
 8004366:	4393      	bics	r3, r2
 8004368:	2201      	movs	r2, #1
 800436a:	431a      	orrs	r2, r3
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	655a      	str	r2, [r3, #84]	; 0x54
                    HAL_ADC_STATE_BUSY_INTERNAL,
                    HAL_ADC_STATE_READY);


  /* Return function status */
  return HAL_OK;
 8004370:	2300      	movs	r3, #0
}
 8004372:	0018      	movs	r0, r3
 8004374:	46bd      	mov	sp, r7
 8004376:	b002      	add	sp, #8
 8004378:	bd80      	pop	{r7, pc}
 800437a:	46c0      	nop			; (mov r8, r8)
 800437c:	fffffefd 	.word	0xfffffefd
 8004380:	40012708 	.word	0x40012708
 8004384:	ffc3ffff 	.word	0xffc3ffff
 8004388:	fdffffff 	.word	0xfdffffff
 800438c:	fffe0219 	.word	0xfffe0219
 8004390:	fffffc03 	.word	0xfffffc03

08004394 <HAL_ADC_Start>:
  * @note   Interruptions enabled in this function: None.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8004394:	b590      	push	{r4, r7, lr}
 8004396:	b085      	sub	sp, #20
 8004398:	af00      	add	r7, sp, #0
 800439a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800439c:	230f      	movs	r3, #15
 800439e:	18fb      	adds	r3, r7, r3
 80043a0:	2200      	movs	r2, #0
 80043a2:	701a      	strb	r2, [r3, #0]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	689b      	ldr	r3, [r3, #8]
 80043aa:	2204      	movs	r2, #4
 80043ac:	4013      	ands	r3, r2
 80043ae:	d138      	bne.n	8004422 <HAL_ADC_Start+0x8e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	2250      	movs	r2, #80	; 0x50
 80043b4:	5c9b      	ldrb	r3, [r3, r2]
 80043b6:	2b01      	cmp	r3, #1
 80043b8:	d101      	bne.n	80043be <HAL_ADC_Start+0x2a>
 80043ba:	2302      	movs	r3, #2
 80043bc:	e038      	b.n	8004430 <HAL_ADC_Start+0x9c>
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	2250      	movs	r2, #80	; 0x50
 80043c2:	2101      	movs	r1, #1
 80043c4:	5499      	strb	r1, [r3, r2]
    
    /* Enable the ADC peripheral */
    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware.                                   */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	69db      	ldr	r3, [r3, #28]
 80043ca:	2b01      	cmp	r3, #1
 80043cc:	d007      	beq.n	80043de <HAL_ADC_Start+0x4a>
    {
      tmp_hal_status = ADC_Enable(hadc);
 80043ce:	230f      	movs	r3, #15
 80043d0:	18fc      	adds	r4, r7, r3
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	0018      	movs	r0, r3
 80043d6:	f000 f9b3 	bl	8004740 <ADC_Enable>
 80043da:	0003      	movs	r3, r0
 80043dc:	7023      	strb	r3, [r4, #0]
    }
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80043de:	230f      	movs	r3, #15
 80043e0:	18fb      	adds	r3, r7, r3
 80043e2:	781b      	ldrb	r3, [r3, #0]
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d120      	bne.n	800442a <HAL_ADC_Start+0x96>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043ec:	4a12      	ldr	r2, [pc, #72]	; (8004438 <HAL_ADC_Start+0xa4>)
 80043ee:	4013      	ands	r3, r2
 80043f0:	2280      	movs	r2, #128	; 0x80
 80043f2:	0052      	lsls	r2, r2, #1
 80043f4:	431a      	orrs	r2, r3
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	655a      	str	r2, [r3, #84]	; 0x54
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	2200      	movs	r2, #0
 80043fe:	659a      	str	r2, [r3, #88]	; 0x58
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	2250      	movs	r2, #80	; 0x50
 8004404:	2100      	movs	r1, #0
 8004406:	5499      	strb	r1, [r3, r2]
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	221c      	movs	r2, #28
 800440e:	601a      	str	r2, [r3, #0]
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      hadc->Instance->CR |= ADC_CR_ADSTART;
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	689a      	ldr	r2, [r3, #8]
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	2104      	movs	r1, #4
 800441c:	430a      	orrs	r2, r1
 800441e:	609a      	str	r2, [r3, #8]
 8004420:	e003      	b.n	800442a <HAL_ADC_Start+0x96>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8004422:	230f      	movs	r3, #15
 8004424:	18fb      	adds	r3, r7, r3
 8004426:	2202      	movs	r2, #2
 8004428:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 800442a:	230f      	movs	r3, #15
 800442c:	18fb      	adds	r3, r7, r3
 800442e:	781b      	ldrb	r3, [r3, #0]
}
 8004430:	0018      	movs	r0, r3
 8004432:	46bd      	mov	sp, r7
 8004434:	b005      	add	sp, #20
 8004436:	bd90      	pop	{r4, r7, pc}
 8004438:	fffff0fe 	.word	0xfffff0fe

0800443c <HAL_ADC_Stop>:
  *         case of auto_injection mode), disable ADC peripheral.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 800443c:	b5b0      	push	{r4, r5, r7, lr}
 800443e:	b084      	sub	sp, #16
 8004440:	af00      	add	r7, sp, #0
 8004442:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004444:	230f      	movs	r3, #15
 8004446:	18fb      	adds	r3, r7, r3
 8004448:	2200      	movs	r2, #0
 800444a:	701a      	strb	r2, [r3, #0]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	2250      	movs	r2, #80	; 0x50
 8004450:	5c9b      	ldrb	r3, [r3, r2]
 8004452:	2b01      	cmp	r3, #1
 8004454:	d101      	bne.n	800445a <HAL_ADC_Stop+0x1e>
 8004456:	2302      	movs	r3, #2
 8004458:	e029      	b.n	80044ae <HAL_ADC_Stop+0x72>
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	2250      	movs	r2, #80	; 0x50
 800445e:	2101      	movs	r1, #1
 8004460:	5499      	strb	r1, [r3, r2]
  
  /* 1. Stop potential conversion on going, on ADC group regular */
  tmp_hal_status = ADC_ConversionStop(hadc);
 8004462:	250f      	movs	r5, #15
 8004464:	197c      	adds	r4, r7, r5
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	0018      	movs	r0, r3
 800446a:	f000 fa29 	bl	80048c0 <ADC_ConversionStop>
 800446e:	0003      	movs	r3, r0
 8004470:	7023      	strb	r3, [r4, #0]
  
  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8004472:	197b      	adds	r3, r7, r5
 8004474:	781b      	ldrb	r3, [r3, #0]
 8004476:	2b00      	cmp	r3, #0
 8004478:	d112      	bne.n	80044a0 <HAL_ADC_Stop+0x64>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 800447a:	197c      	adds	r4, r7, r5
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	0018      	movs	r0, r3
 8004480:	f000 f9be 	bl	8004800 <ADC_Disable>
 8004484:	0003      	movs	r3, r0
 8004486:	7023      	strb	r3, [r4, #0]
    
    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8004488:	197b      	adds	r3, r7, r5
 800448a:	781b      	ldrb	r3, [r3, #0]
 800448c:	2b00      	cmp	r3, #0
 800448e:	d107      	bne.n	80044a0 <HAL_ADC_Stop+0x64>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004494:	4a08      	ldr	r2, [pc, #32]	; (80044b8 <HAL_ADC_Stop+0x7c>)
 8004496:	4013      	ands	r3, r2
 8004498:	2201      	movs	r2, #1
 800449a:	431a      	orrs	r2, r3
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	655a      	str	r2, [r3, #84]	; 0x54
                        HAL_ADC_STATE_READY);
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	2250      	movs	r2, #80	; 0x50
 80044a4:	2100      	movs	r1, #0
 80044a6:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 80044a8:	230f      	movs	r3, #15
 80044aa:	18fb      	adds	r3, r7, r3
 80044ac:	781b      	ldrb	r3, [r3, #0]
}
 80044ae:	0018      	movs	r0, r3
 80044b0:	46bd      	mov	sp, r7
 80044b2:	b004      	add	sp, #16
 80044b4:	bdb0      	pop	{r4, r5, r7, pc}
 80044b6:	46c0      	nop			; (mov r8, r8)
 80044b8:	fffffefe 	.word	0xfffffefe

080044bc <HAL_ADC_PollForConversion>:
  * @param  hadc ADC handle
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 80044bc:	b580      	push	{r7, lr}
 80044be:	b084      	sub	sp, #16
 80044c0:	af00      	add	r7, sp, #0
 80044c2:	6078      	str	r0, [r7, #4]
 80044c4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80044c6:	2300      	movs	r3, #0
 80044c8:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_Flag_EOC   = 0x00;
 80044ca:	2300      	movs	r3, #0
 80044cc:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	695b      	ldr	r3, [r3, #20]
 80044d2:	2b08      	cmp	r3, #8
 80044d4:	d102      	bne.n	80044dc <HAL_ADC_PollForConversion+0x20>
  {
    tmp_Flag_EOC = ADC_FLAG_EOS;
 80044d6:	2308      	movs	r3, #8
 80044d8:	60fb      	str	r3, [r7, #12]
 80044da:	e014      	b.n	8004506 <HAL_ADC_PollForConversion+0x4a>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN))
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	68db      	ldr	r3, [r3, #12]
 80044e2:	2201      	movs	r2, #1
 80044e4:	4013      	ands	r3, r2
 80044e6:	2b01      	cmp	r3, #1
 80044e8:	d10b      	bne.n	8004502 <HAL_ADC_PollForConversion+0x46>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80044ee:	2220      	movs	r2, #32
 80044f0:	431a      	orrs	r2, r3
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	2250      	movs	r2, #80	; 0x50
 80044fa:	2100      	movs	r1, #0
 80044fc:	5499      	strb	r1, [r3, r2]
      
      return HAL_ERROR;
 80044fe:	2301      	movs	r3, #1
 8004500:	e06c      	b.n	80045dc <HAL_ADC_PollForConversion+0x120>
    }
    else
    {
      tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 8004502:	230c      	movs	r3, #12
 8004504:	60fb      	str	r3, [r7, #12]
    }
  }
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 8004506:	f7ff fda3 	bl	8004050 <HAL_GetTick>
 800450a:	0003      	movs	r3, r0
 800450c:	60bb      	str	r3, [r7, #8]
  
  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 800450e:	e019      	b.n	8004544 <HAL_ADC_PollForConversion+0x88>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8004510:	683b      	ldr	r3, [r7, #0]
 8004512:	3301      	adds	r3, #1
 8004514:	d016      	beq.n	8004544 <HAL_ADC_PollForConversion+0x88>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 8004516:	683b      	ldr	r3, [r7, #0]
 8004518:	2b00      	cmp	r3, #0
 800451a:	d007      	beq.n	800452c <HAL_ADC_PollForConversion+0x70>
 800451c:	f7ff fd98 	bl	8004050 <HAL_GetTick>
 8004520:	0002      	movs	r2, r0
 8004522:	68bb      	ldr	r3, [r7, #8]
 8004524:	1ad3      	subs	r3, r2, r3
 8004526:	683a      	ldr	r2, [r7, #0]
 8004528:	429a      	cmp	r2, r3
 800452a:	d20b      	bcs.n	8004544 <HAL_ADC_PollForConversion+0x88>
      {
        /* Update ADC state machine to timeout */
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004530:	2204      	movs	r2, #4
 8004532:	431a      	orrs	r2, r3
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	2250      	movs	r2, #80	; 0x50
 800453c:	2100      	movs	r1, #0
 800453e:	5499      	strb	r1, [r3, r2]
        
        return HAL_TIMEOUT;
 8004540:	2303      	movs	r3, #3
 8004542:	e04b      	b.n	80045dc <HAL_ADC_PollForConversion+0x120>
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	68fa      	ldr	r2, [r7, #12]
 800454c:	4013      	ands	r3, r2
 800454e:	d0df      	beq.n	8004510 <HAL_ADC_PollForConversion+0x54>
      }
    }
  }
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004554:	2280      	movs	r2, #128	; 0x80
 8004556:	0092      	lsls	r2, r2, #2
 8004558:	431a      	orrs	r2, r3
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	655a      	str	r2, [r3, #84]	; 0x54
  
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	68da      	ldr	r2, [r3, #12]
 8004564:	23c0      	movs	r3, #192	; 0xc0
 8004566:	011b      	lsls	r3, r3, #4
 8004568:	4013      	ands	r3, r2
 800456a:	d12e      	bne.n	80045ca <HAL_ADC_PollForConversion+0x10e>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	2220      	movs	r2, #32
 8004570:	5c9b      	ldrb	r3, [r3, r2]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8004572:	2b00      	cmp	r3, #0
 8004574:	d129      	bne.n	80045ca <HAL_ADC_PollForConversion+0x10e>
  {
    /* If End of Sequence is reached, disable interrupts */
    if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	2208      	movs	r2, #8
 800457e:	4013      	ands	r3, r2
 8004580:	2b08      	cmp	r3, #8
 8004582:	d122      	bne.n	80045ca <HAL_ADC_PollForConversion+0x10e>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	689b      	ldr	r3, [r3, #8]
 800458a:	2204      	movs	r2, #4
 800458c:	4013      	ands	r3, r2
 800458e:	d110      	bne.n	80045b2 <HAL_ADC_PollForConversion+0xf6>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_Start_IT(), but is not disabled here because can be used       */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	685a      	ldr	r2, [r3, #4]
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	210c      	movs	r1, #12
 800459c:	438a      	bics	r2, r1
 800459e:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80045a4:	4a0f      	ldr	r2, [pc, #60]	; (80045e4 <HAL_ADC_PollForConversion+0x128>)
 80045a6:	4013      	ands	r3, r2
 80045a8:	2201      	movs	r2, #1
 80045aa:	431a      	orrs	r2, r3
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	655a      	str	r2, [r3, #84]	; 0x54
 80045b0:	e00b      	b.n	80045ca <HAL_ADC_PollForConversion+0x10e>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80045b6:	2220      	movs	r2, #32
 80045b8:	431a      	orrs	r2, r3
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80045c2:	2201      	movs	r2, #1
 80045c4:	431a      	orrs	r2, r3
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	659a      	str	r2, [r3, #88]	; 0x58
  }
  
  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	699b      	ldr	r3, [r3, #24]
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d103      	bne.n	80045da <HAL_ADC_PollForConversion+0x11e>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	220c      	movs	r2, #12
 80045d8:	601a      	str	r2, [r3, #0]
  }
  
  /* Return function status */
  return HAL_OK;
 80045da:	2300      	movs	r3, #0
}
 80045dc:	0018      	movs	r0, r3
 80045de:	46bd      	mov	sp, r7
 80045e0:	b004      	add	sp, #16
 80045e2:	bd80      	pop	{r7, pc}
 80045e4:	fffffefe 	.word	0xfffffefe

080045e8 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 80045e8:	b580      	push	{r7, lr}
 80045ea:	b082      	sub	sp, #8
 80045ec:	af00      	add	r7, sp, #0
 80045ee:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 80045f6:	0018      	movs	r0, r3
 80045f8:	46bd      	mov	sp, r7
 80045fa:	b002      	add	sp, #8
 80045fc:	bd80      	pop	{r7, pc}
	...

08004600 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8004600:	b580      	push	{r7, lr}
 8004602:	b082      	sub	sp, #8
 8004604:	af00      	add	r7, sp, #0
 8004606:	6078      	str	r0, [r7, #4]
 8004608:	6039      	str	r1, [r7, #0]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	2250      	movs	r2, #80	; 0x50
 800460e:	5c9b      	ldrb	r3, [r3, r2]
 8004610:	2b01      	cmp	r3, #1
 8004612:	d101      	bne.n	8004618 <HAL_ADC_ConfigChannel+0x18>
 8004614:	2302      	movs	r3, #2
 8004616:	e085      	b.n	8004724 <HAL_ADC_ConfigChannel+0x124>
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	2250      	movs	r2, #80	; 0x50
 800461c:	2101      	movs	r1, #1
 800461e:	5499      	strb	r1, [r3, r2]
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Management of internal measurement channels: Vbat/VrefInt/TempSensor  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	689b      	ldr	r3, [r3, #8]
 8004626:	2204      	movs	r2, #4
 8004628:	4013      	ands	r3, r2
 800462a:	d00b      	beq.n	8004644 <HAL_ADC_ConfigChannel+0x44>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004630:	2220      	movs	r2, #32
 8004632:	431a      	orrs	r2, r3
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	655a      	str	r2, [r3, #84]	; 0x54
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	2250      	movs	r2, #80	; 0x50
 800463c:	2100      	movs	r1, #0
 800463e:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 8004640:	2301      	movs	r3, #1
 8004642:	e06f      	b.n	8004724 <HAL_ADC_ConfigChannel+0x124>
  }
  
  if (sConfig->Rank != ADC_RANK_NONE)
 8004644:	683b      	ldr	r3, [r7, #0]
 8004646:	685b      	ldr	r3, [r3, #4]
 8004648:	4a38      	ldr	r2, [pc, #224]	; (800472c <HAL_ADC_ConfigChannel+0x12c>)
 800464a:	4293      	cmp	r3, r2
 800464c:	d035      	beq.n	80046ba <HAL_ADC_ConfigChannel+0xba>
  {
    /* Enable selected channels */
    hadc->Instance->CHSELR |= (uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK);
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8004654:	683b      	ldr	r3, [r7, #0]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	035b      	lsls	r3, r3, #13
 800465a:	0b5a      	lsrs	r2, r3, #13
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	430a      	orrs	r2, r1
 8004662:	629a      	str	r2, [r3, #40]	; 0x28
    /* dedicated internal buffers and path.                                     */
    
    #if defined(ADC_CCR_TSEN)
    /* If Temperature sensor channel is selected, then enable the internal      */
    /* buffers and path  */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR ) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 8004664:	683b      	ldr	r3, [r7, #0]
 8004666:	681a      	ldr	r2, [r3, #0]
 8004668:	2380      	movs	r3, #128	; 0x80
 800466a:	02db      	lsls	r3, r3, #11
 800466c:	4013      	ands	r3, r2
 800466e:	d009      	beq.n	8004684 <HAL_ADC_ConfigChannel+0x84>
    {
      ADC->CCR |= ADC_CCR_TSEN;   
 8004670:	4b2f      	ldr	r3, [pc, #188]	; (8004730 <HAL_ADC_ConfigChannel+0x130>)
 8004672:	681a      	ldr	r2, [r3, #0]
 8004674:	4b2e      	ldr	r3, [pc, #184]	; (8004730 <HAL_ADC_ConfigChannel+0x130>)
 8004676:	2180      	movs	r1, #128	; 0x80
 8004678:	0409      	lsls	r1, r1, #16
 800467a:	430a      	orrs	r2, r1
 800467c:	601a      	str	r2, [r3, #0]
      
      /* Delay for temperature sensor stabilization time */
      ADC_DelayMicroSecond(ADC_TEMPSENSOR_DELAY_US);
 800467e:	200a      	movs	r0, #10
 8004680:	f000 f964 	bl	800494c <ADC_DelayMicroSecond>
    }
    #endif
    
    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 8004684:	683b      	ldr	r3, [r7, #0]
 8004686:	681a      	ldr	r2, [r3, #0]
 8004688:	2380      	movs	r3, #128	; 0x80
 800468a:	029b      	lsls	r3, r3, #10
 800468c:	4013      	ands	r3, r2
 800468e:	d006      	beq.n	800469e <HAL_ADC_ConfigChannel+0x9e>
    {
      ADC->CCR |= ADC_CCR_VREFEN;   
 8004690:	4b27      	ldr	r3, [pc, #156]	; (8004730 <HAL_ADC_ConfigChannel+0x130>)
 8004692:	681a      	ldr	r2, [r3, #0]
 8004694:	4b26      	ldr	r3, [pc, #152]	; (8004730 <HAL_ADC_ConfigChannel+0x130>)
 8004696:	2180      	movs	r1, #128	; 0x80
 8004698:	03c9      	lsls	r1, r1, #15
 800469a:	430a      	orrs	r2, r1
 800469c:	601a      	str	r2, [r3, #0]
    }
    
#if defined (STM32L053xx) || defined (STM32L063xx) || defined (STM32L073xx) || defined (STM32L083xx)
    /* If Vlcd channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VLCD) == (ADC_CHANNEL_VLCD & ADC_CHANNEL_MASK))
 800469e:	683b      	ldr	r3, [r7, #0]
 80046a0:	681a      	ldr	r2, [r3, #0]
 80046a2:	2380      	movs	r3, #128	; 0x80
 80046a4:	025b      	lsls	r3, r3, #9
 80046a6:	4013      	ands	r3, r2
 80046a8:	d037      	beq.n	800471a <HAL_ADC_ConfigChannel+0x11a>
    {
      ADC->CCR |= ADC_CCR_VLCDEN;   
 80046aa:	4b21      	ldr	r3, [pc, #132]	; (8004730 <HAL_ADC_ConfigChannel+0x130>)
 80046ac:	681a      	ldr	r2, [r3, #0]
 80046ae:	4b20      	ldr	r3, [pc, #128]	; (8004730 <HAL_ADC_ConfigChannel+0x130>)
 80046b0:	2180      	movs	r1, #128	; 0x80
 80046b2:	0449      	lsls	r1, r1, #17
 80046b4:	430a      	orrs	r2, r1
 80046b6:	601a      	str	r2, [r3, #0]
 80046b8:	e02f      	b.n	800471a <HAL_ADC_ConfigChannel+0x11a>
  }
  else
  {
    /* Regular sequence configuration */
    /* Reset the channel selection register from the selected channel */
    hadc->Instance->CHSELR &= ~((uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK));
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80046c0:	683b      	ldr	r3, [r7, #0]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	035b      	lsls	r3, r3, #13
 80046c6:	0b5b      	lsrs	r3, r3, #13
 80046c8:	43d9      	mvns	r1, r3
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	400a      	ands	r2, r1
 80046d0:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
    /* internal measurement paths disable: If internal channel selected,    */
    /* disable dedicated internal buffers and path.                         */
    #if defined(ADC_CCR_TSEN)
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR ) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 80046d2:	683b      	ldr	r3, [r7, #0]
 80046d4:	681a      	ldr	r2, [r3, #0]
 80046d6:	2380      	movs	r3, #128	; 0x80
 80046d8:	02db      	lsls	r3, r3, #11
 80046da:	4013      	ands	r3, r2
 80046dc:	d005      	beq.n	80046ea <HAL_ADC_ConfigChannel+0xea>
    {
      ADC->CCR &= ~ADC_CCR_TSEN;   
 80046de:	4b14      	ldr	r3, [pc, #80]	; (8004730 <HAL_ADC_ConfigChannel+0x130>)
 80046e0:	681a      	ldr	r2, [r3, #0]
 80046e2:	4b13      	ldr	r3, [pc, #76]	; (8004730 <HAL_ADC_ConfigChannel+0x130>)
 80046e4:	4913      	ldr	r1, [pc, #76]	; (8004734 <HAL_ADC_ConfigChannel+0x134>)
 80046e6:	400a      	ands	r2, r1
 80046e8:	601a      	str	r2, [r3, #0]
    }
    #endif
    
    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 80046ea:	683b      	ldr	r3, [r7, #0]
 80046ec:	681a      	ldr	r2, [r3, #0]
 80046ee:	2380      	movs	r3, #128	; 0x80
 80046f0:	029b      	lsls	r3, r3, #10
 80046f2:	4013      	ands	r3, r2
 80046f4:	d005      	beq.n	8004702 <HAL_ADC_ConfigChannel+0x102>
    {
      ADC->CCR &= ~ADC_CCR_VREFEN;   
 80046f6:	4b0e      	ldr	r3, [pc, #56]	; (8004730 <HAL_ADC_ConfigChannel+0x130>)
 80046f8:	681a      	ldr	r2, [r3, #0]
 80046fa:	4b0d      	ldr	r3, [pc, #52]	; (8004730 <HAL_ADC_ConfigChannel+0x130>)
 80046fc:	490e      	ldr	r1, [pc, #56]	; (8004738 <HAL_ADC_ConfigChannel+0x138>)
 80046fe:	400a      	ands	r2, r1
 8004700:	601a      	str	r2, [r3, #0]
    }
    
#if defined (STM32L053xx) || defined (STM32L063xx) || defined (STM32L073xx) || defined (STM32L083xx)
    /* If Vlcd channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VLCD) == (ADC_CHANNEL_VLCD & ADC_CHANNEL_MASK))
 8004702:	683b      	ldr	r3, [r7, #0]
 8004704:	681a      	ldr	r2, [r3, #0]
 8004706:	2380      	movs	r3, #128	; 0x80
 8004708:	025b      	lsls	r3, r3, #9
 800470a:	4013      	ands	r3, r2
 800470c:	d005      	beq.n	800471a <HAL_ADC_ConfigChannel+0x11a>
    {
      ADC->CCR &= ~ADC_CCR_VLCDEN;   
 800470e:	4b08      	ldr	r3, [pc, #32]	; (8004730 <HAL_ADC_ConfigChannel+0x130>)
 8004710:	681a      	ldr	r2, [r3, #0]
 8004712:	4b07      	ldr	r3, [pc, #28]	; (8004730 <HAL_ADC_ConfigChannel+0x130>)
 8004714:	4909      	ldr	r1, [pc, #36]	; (800473c <HAL_ADC_ConfigChannel+0x13c>)
 8004716:	400a      	ands	r2, r1
 8004718:	601a      	str	r2, [r3, #0]
    }
#endif
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	2250      	movs	r2, #80	; 0x50
 800471e:	2100      	movs	r1, #0
 8004720:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return HAL_OK;
 8004722:	2300      	movs	r3, #0
}
 8004724:	0018      	movs	r0, r3
 8004726:	46bd      	mov	sp, r7
 8004728:	b002      	add	sp, #8
 800472a:	bd80      	pop	{r7, pc}
 800472c:	00001001 	.word	0x00001001
 8004730:	40012708 	.word	0x40012708
 8004734:	ff7fffff 	.word	0xff7fffff
 8004738:	ffbfffff 	.word	0xffbfffff
 800473c:	feffffff 	.word	0xfeffffff

08004740 <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8004740:	b580      	push	{r7, lr}
 8004742:	b084      	sub	sp, #16
 8004744:	af00      	add	r7, sp, #0
 8004746:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004748:	2300      	movs	r3, #0
 800474a:	60fb      	str	r3, [r7, #12]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	689b      	ldr	r3, [r3, #8]
 8004752:	2203      	movs	r2, #3
 8004754:	4013      	ands	r3, r2
 8004756:	2b01      	cmp	r3, #1
 8004758:	d108      	bne.n	800476c <ADC_Enable+0x2c>
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	2201      	movs	r2, #1
 8004762:	4013      	ands	r3, r2
 8004764:	2b01      	cmp	r3, #1
 8004766:	d101      	bne.n	800476c <ADC_Enable+0x2c>
 8004768:	2301      	movs	r3, #1
 800476a:	e000      	b.n	800476e <ADC_Enable+0x2e>
 800476c:	2300      	movs	r3, #0
 800476e:	2b00      	cmp	r3, #0
 8004770:	d13f      	bne.n	80047f2 <ADC_Enable+0xb2>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	689b      	ldr	r3, [r3, #8]
 8004778:	4a20      	ldr	r2, [pc, #128]	; (80047fc <ADC_Enable+0xbc>)
 800477a:	4013      	ands	r3, r2
 800477c:	d00d      	beq.n	800479a <ADC_Enable+0x5a>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004782:	2210      	movs	r2, #16
 8004784:	431a      	orrs	r2, r3
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800478e:	2201      	movs	r2, #1
 8004790:	431a      	orrs	r2, r3
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	659a      	str	r2, [r3, #88]	; 0x58
      
      return HAL_ERROR;
 8004796:	2301      	movs	r3, #1
 8004798:	e02c      	b.n	80047f4 <ADC_Enable+0xb4>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	689a      	ldr	r2, [r3, #8]
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	2101      	movs	r1, #1
 80047a6:	430a      	orrs	r2, r1
 80047a8:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time. */
    ADC_DelayMicroSecond(ADC_STAB_DELAY_US);
 80047aa:	2001      	movs	r0, #1
 80047ac:	f000 f8ce 	bl	800494c <ADC_DelayMicroSecond>

    /* Get tick count */
    tickstart = HAL_GetTick();
 80047b0:	f7ff fc4e 	bl	8004050 <HAL_GetTick>
 80047b4:	0003      	movs	r3, r0
 80047b6:	60fb      	str	r3, [r7, #12]
    
    /* Wait for ADC effectively enabled */
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80047b8:	e014      	b.n	80047e4 <ADC_Enable+0xa4>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80047ba:	f7ff fc49 	bl	8004050 <HAL_GetTick>
 80047be:	0002      	movs	r2, r0
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	1ad3      	subs	r3, r2, r3
 80047c4:	2b0a      	cmp	r3, #10
 80047c6:	d90d      	bls.n	80047e4 <ADC_Enable+0xa4>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80047cc:	2210      	movs	r2, #16
 80047ce:	431a      	orrs	r2, r3
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80047d8:	2201      	movs	r2, #1
 80047da:	431a      	orrs	r2, r3
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	659a      	str	r2, [r3, #88]	; 0x58
        
        return HAL_ERROR;
 80047e0:	2301      	movs	r3, #1
 80047e2:	e007      	b.n	80047f4 <ADC_Enable+0xb4>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	2201      	movs	r2, #1
 80047ec:	4013      	ands	r3, r2
 80047ee:	2b01      	cmp	r3, #1
 80047f0:	d1e3      	bne.n	80047ba <ADC_Enable+0x7a>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 80047f2:	2300      	movs	r3, #0
}
 80047f4:	0018      	movs	r0, r3
 80047f6:	46bd      	mov	sp, r7
 80047f8:	b004      	add	sp, #16
 80047fa:	bd80      	pop	{r7, pc}
 80047fc:	80000017 	.word	0x80000017

08004800 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 8004800:	b580      	push	{r7, lr}
 8004802:	b084      	sub	sp, #16
 8004804:	af00      	add	r7, sp, #0
 8004806:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004808:	2300      	movs	r3, #0
 800480a:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if (ADC_IS_ENABLE(hadc) != RESET)
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	689b      	ldr	r3, [r3, #8]
 8004812:	2203      	movs	r2, #3
 8004814:	4013      	ands	r3, r2
 8004816:	2b01      	cmp	r3, #1
 8004818:	d108      	bne.n	800482c <ADC_Disable+0x2c>
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	2201      	movs	r2, #1
 8004822:	4013      	ands	r3, r2
 8004824:	2b01      	cmp	r3, #1
 8004826:	d101      	bne.n	800482c <ADC_Disable+0x2c>
 8004828:	2301      	movs	r3, #1
 800482a:	e000      	b.n	800482e <ADC_Disable+0x2e>
 800482c:	2300      	movs	r3, #0
 800482e:	2b00      	cmp	r3, #0
 8004830:	d041      	beq.n	80048b6 <ADC_Disable+0xb6>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	689b      	ldr	r3, [r3, #8]
 8004838:	2205      	movs	r2, #5
 800483a:	4013      	ands	r3, r2
 800483c:	2b01      	cmp	r3, #1
 800483e:	d110      	bne.n	8004862 <ADC_Disable+0x62>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	689a      	ldr	r2, [r3, #8]
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	2102      	movs	r1, #2
 800484c:	430a      	orrs	r2, r1
 800484e:	609a      	str	r2, [r3, #8]
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	2203      	movs	r2, #3
 8004856:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8004858:	f7ff fbfa 	bl	8004050 <HAL_GetTick>
 800485c:	0003      	movs	r3, r0
 800485e:	60fb      	str	r3, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8004860:	e022      	b.n	80048a8 <ADC_Disable+0xa8>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004866:	2210      	movs	r2, #16
 8004868:	431a      	orrs	r2, r3
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	655a      	str	r2, [r3, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004872:	2201      	movs	r2, #1
 8004874:	431a      	orrs	r2, r3
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 800487a:	2301      	movs	r3, #1
 800487c:	e01c      	b.n	80048b8 <ADC_Disable+0xb8>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800487e:	f7ff fbe7 	bl	8004050 <HAL_GetTick>
 8004882:	0002      	movs	r2, r0
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	1ad3      	subs	r3, r2, r3
 8004888:	2b0a      	cmp	r3, #10
 800488a:	d90d      	bls.n	80048a8 <ADC_Disable+0xa8>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004890:	2210      	movs	r2, #16
 8004892:	431a      	orrs	r2, r3
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800489c:	2201      	movs	r2, #1
 800489e:	431a      	orrs	r2, r3
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	659a      	str	r2, [r3, #88]	; 0x58
        
        return HAL_ERROR;
 80048a4:	2301      	movs	r3, #1
 80048a6:	e007      	b.n	80048b8 <ADC_Disable+0xb8>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	689b      	ldr	r3, [r3, #8]
 80048ae:	2201      	movs	r2, #1
 80048b0:	4013      	ands	r3, r2
 80048b2:	2b01      	cmp	r3, #1
 80048b4:	d0e3      	beq.n	800487e <ADC_Disable+0x7e>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80048b6:	2300      	movs	r3, #0
}
 80048b8:	0018      	movs	r0, r3
 80048ba:	46bd      	mov	sp, r7
 80048bc:	b004      	add	sp, #16
 80048be:	bd80      	pop	{r7, pc}

080048c0 <ADC_ConversionStop>:
  *         stopped to disable the ADC.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef* hadc)
{
 80048c0:	b580      	push	{r7, lr}
 80048c2:	b084      	sub	sp, #16
 80048c4:	af00      	add	r7, sp, #0
 80048c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80048c8:	2300      	movs	r3, #0
 80048ca:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
    
  /* Verification if ADC is not already stopped on regular group to bypass    */
  /* this function if not needed.                                             */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc))
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	689b      	ldr	r3, [r3, #8]
 80048d2:	2204      	movs	r2, #4
 80048d4:	4013      	ands	r3, r2
 80048d6:	d034      	beq.n	8004942 <ADC_ConversionStop+0x82>
  {
    
    /* Stop potential conversion on going on regular group */
    /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
    if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	689b      	ldr	r3, [r3, #8]
 80048de:	2204      	movs	r2, #4
 80048e0:	4013      	ands	r3, r2
 80048e2:	2b04      	cmp	r3, #4
 80048e4:	d10d      	bne.n	8004902 <ADC_ConversionStop+0x42>
        HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)                  )
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	689b      	ldr	r3, [r3, #8]
 80048ec:	2202      	movs	r2, #2
 80048ee:	4013      	ands	r3, r2
    if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 80048f0:	d107      	bne.n	8004902 <ADC_ConversionStop+0x42>
    {
      /* Stop conversions on regular group */
      hadc->Instance->CR |= ADC_CR_ADSTP;
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	689a      	ldr	r2, [r3, #8]
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	2110      	movs	r1, #16
 80048fe:	430a      	orrs	r2, r1
 8004900:	609a      	str	r2, [r3, #8]
    }
    
    /* Wait for conversion effectively stopped */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8004902:	f7ff fba5 	bl	8004050 <HAL_GetTick>
 8004906:	0003      	movs	r3, r0
 8004908:	60fb      	str	r3, [r7, #12]
      
    while((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 800490a:	e014      	b.n	8004936 <ADC_ConversionStop+0x76>
    {
      if((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 800490c:	f7ff fba0 	bl	8004050 <HAL_GetTick>
 8004910:	0002      	movs	r2, r0
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	1ad3      	subs	r3, r2, r3
 8004916:	2b0a      	cmp	r3, #10
 8004918:	d90d      	bls.n	8004936 <ADC_ConversionStop+0x76>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800491e:	2210      	movs	r2, #16
 8004920:	431a      	orrs	r2, r3
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	655a      	str	r2, [r3, #84]	; 0x54
      
        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800492a:	2201      	movs	r2, #1
 800492c:	431a      	orrs	r2, r3
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	659a      	str	r2, [r3, #88]	; 0x58
        
        return HAL_ERROR;
 8004932:	2301      	movs	r3, #1
 8004934:	e006      	b.n	8004944 <ADC_ConversionStop+0x84>
    while((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	689b      	ldr	r3, [r3, #8]
 800493c:	2204      	movs	r2, #4
 800493e:	4013      	ands	r3, r2
 8004940:	d1e4      	bne.n	800490c <ADC_ConversionStop+0x4c>
    }
    
  }
   
  /* Return HAL status */
  return HAL_OK;
 8004942:	2300      	movs	r3, #0
}
 8004944:	0018      	movs	r0, r3
 8004946:	46bd      	mov	sp, r7
 8004948:	b004      	add	sp, #16
 800494a:	bd80      	pop	{r7, pc}

0800494c <ADC_DelayMicroSecond>:
  * @brief  Delay micro seconds 
  * @param  microSecond  delay
  * @retval None
  */
static void ADC_DelayMicroSecond(uint32_t microSecond)
{
 800494c:	b580      	push	{r7, lr}
 800494e:	b084      	sub	sp, #16
 8004950:	af00      	add	r7, sp, #0
 8004952:	6078      	str	r0, [r7, #4]
  /* Compute number of CPU cycles to wait for */
  __IO uint32_t waitLoopIndex = (microSecond * (SystemCoreClock / 1000000U));
 8004954:	4b0b      	ldr	r3, [pc, #44]	; (8004984 <ADC_DelayMicroSecond+0x38>)
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	490b      	ldr	r1, [pc, #44]	; (8004988 <ADC_DelayMicroSecond+0x3c>)
 800495a:	0018      	movs	r0, r3
 800495c:	f7fb fbf0 	bl	8000140 <__udivsi3>
 8004960:	0003      	movs	r3, r0
 8004962:	001a      	movs	r2, r3
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	4353      	muls	r3, r2
 8004968:	60fb      	str	r3, [r7, #12]

  while(waitLoopIndex != 0U)
 800496a:	e002      	b.n	8004972 <ADC_DelayMicroSecond+0x26>
  {
    waitLoopIndex--;
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	3b01      	subs	r3, #1
 8004970:	60fb      	str	r3, [r7, #12]
  while(waitLoopIndex != 0U)
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	2b00      	cmp	r3, #0
 8004976:	d1f9      	bne.n	800496c <ADC_DelayMicroSecond+0x20>
  } 
}
 8004978:	46c0      	nop			; (mov r8, r8)
 800497a:	46c0      	nop			; (mov r8, r8)
 800497c:	46bd      	mov	sp, r7
 800497e:	b004      	add	sp, #16
 8004980:	bd80      	pop	{r7, pc}
 8004982:	46c0      	nop			; (mov r8, r8)
 8004984:	20000000 	.word	0x20000000
 8004988:	000f4240 	.word	0x000f4240

0800498c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800498c:	b590      	push	{r4, r7, lr}
 800498e:	b083      	sub	sp, #12
 8004990:	af00      	add	r7, sp, #0
 8004992:	0002      	movs	r2, r0
 8004994:	6039      	str	r1, [r7, #0]
 8004996:	1dfb      	adds	r3, r7, #7
 8004998:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800499a:	1dfb      	adds	r3, r7, #7
 800499c:	781b      	ldrb	r3, [r3, #0]
 800499e:	2b7f      	cmp	r3, #127	; 0x7f
 80049a0:	d828      	bhi.n	80049f4 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80049a2:	4a2f      	ldr	r2, [pc, #188]	; (8004a60 <__NVIC_SetPriority+0xd4>)
 80049a4:	1dfb      	adds	r3, r7, #7
 80049a6:	781b      	ldrb	r3, [r3, #0]
 80049a8:	b25b      	sxtb	r3, r3
 80049aa:	089b      	lsrs	r3, r3, #2
 80049ac:	33c0      	adds	r3, #192	; 0xc0
 80049ae:	009b      	lsls	r3, r3, #2
 80049b0:	589b      	ldr	r3, [r3, r2]
 80049b2:	1dfa      	adds	r2, r7, #7
 80049b4:	7812      	ldrb	r2, [r2, #0]
 80049b6:	0011      	movs	r1, r2
 80049b8:	2203      	movs	r2, #3
 80049ba:	400a      	ands	r2, r1
 80049bc:	00d2      	lsls	r2, r2, #3
 80049be:	21ff      	movs	r1, #255	; 0xff
 80049c0:	4091      	lsls	r1, r2
 80049c2:	000a      	movs	r2, r1
 80049c4:	43d2      	mvns	r2, r2
 80049c6:	401a      	ands	r2, r3
 80049c8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80049ca:	683b      	ldr	r3, [r7, #0]
 80049cc:	019b      	lsls	r3, r3, #6
 80049ce:	22ff      	movs	r2, #255	; 0xff
 80049d0:	401a      	ands	r2, r3
 80049d2:	1dfb      	adds	r3, r7, #7
 80049d4:	781b      	ldrb	r3, [r3, #0]
 80049d6:	0018      	movs	r0, r3
 80049d8:	2303      	movs	r3, #3
 80049da:	4003      	ands	r3, r0
 80049dc:	00db      	lsls	r3, r3, #3
 80049de:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80049e0:	481f      	ldr	r0, [pc, #124]	; (8004a60 <__NVIC_SetPriority+0xd4>)
 80049e2:	1dfb      	adds	r3, r7, #7
 80049e4:	781b      	ldrb	r3, [r3, #0]
 80049e6:	b25b      	sxtb	r3, r3
 80049e8:	089b      	lsrs	r3, r3, #2
 80049ea:	430a      	orrs	r2, r1
 80049ec:	33c0      	adds	r3, #192	; 0xc0
 80049ee:	009b      	lsls	r3, r3, #2
 80049f0:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80049f2:	e031      	b.n	8004a58 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80049f4:	4a1b      	ldr	r2, [pc, #108]	; (8004a64 <__NVIC_SetPriority+0xd8>)
 80049f6:	1dfb      	adds	r3, r7, #7
 80049f8:	781b      	ldrb	r3, [r3, #0]
 80049fa:	0019      	movs	r1, r3
 80049fc:	230f      	movs	r3, #15
 80049fe:	400b      	ands	r3, r1
 8004a00:	3b08      	subs	r3, #8
 8004a02:	089b      	lsrs	r3, r3, #2
 8004a04:	3306      	adds	r3, #6
 8004a06:	009b      	lsls	r3, r3, #2
 8004a08:	18d3      	adds	r3, r2, r3
 8004a0a:	3304      	adds	r3, #4
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	1dfa      	adds	r2, r7, #7
 8004a10:	7812      	ldrb	r2, [r2, #0]
 8004a12:	0011      	movs	r1, r2
 8004a14:	2203      	movs	r2, #3
 8004a16:	400a      	ands	r2, r1
 8004a18:	00d2      	lsls	r2, r2, #3
 8004a1a:	21ff      	movs	r1, #255	; 0xff
 8004a1c:	4091      	lsls	r1, r2
 8004a1e:	000a      	movs	r2, r1
 8004a20:	43d2      	mvns	r2, r2
 8004a22:	401a      	ands	r2, r3
 8004a24:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8004a26:	683b      	ldr	r3, [r7, #0]
 8004a28:	019b      	lsls	r3, r3, #6
 8004a2a:	22ff      	movs	r2, #255	; 0xff
 8004a2c:	401a      	ands	r2, r3
 8004a2e:	1dfb      	adds	r3, r7, #7
 8004a30:	781b      	ldrb	r3, [r3, #0]
 8004a32:	0018      	movs	r0, r3
 8004a34:	2303      	movs	r3, #3
 8004a36:	4003      	ands	r3, r0
 8004a38:	00db      	lsls	r3, r3, #3
 8004a3a:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004a3c:	4809      	ldr	r0, [pc, #36]	; (8004a64 <__NVIC_SetPriority+0xd8>)
 8004a3e:	1dfb      	adds	r3, r7, #7
 8004a40:	781b      	ldrb	r3, [r3, #0]
 8004a42:	001c      	movs	r4, r3
 8004a44:	230f      	movs	r3, #15
 8004a46:	4023      	ands	r3, r4
 8004a48:	3b08      	subs	r3, #8
 8004a4a:	089b      	lsrs	r3, r3, #2
 8004a4c:	430a      	orrs	r2, r1
 8004a4e:	3306      	adds	r3, #6
 8004a50:	009b      	lsls	r3, r3, #2
 8004a52:	18c3      	adds	r3, r0, r3
 8004a54:	3304      	adds	r3, #4
 8004a56:	601a      	str	r2, [r3, #0]
}
 8004a58:	46c0      	nop			; (mov r8, r8)
 8004a5a:	46bd      	mov	sp, r7
 8004a5c:	b003      	add	sp, #12
 8004a5e:	bd90      	pop	{r4, r7, pc}
 8004a60:	e000e100 	.word	0xe000e100
 8004a64:	e000ed00 	.word	0xe000ed00

08004a68 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004a68:	b580      	push	{r7, lr}
 8004a6a:	b082      	sub	sp, #8
 8004a6c:	af00      	add	r7, sp, #0
 8004a6e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	1e5a      	subs	r2, r3, #1
 8004a74:	2380      	movs	r3, #128	; 0x80
 8004a76:	045b      	lsls	r3, r3, #17
 8004a78:	429a      	cmp	r2, r3
 8004a7a:	d301      	bcc.n	8004a80 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004a7c:	2301      	movs	r3, #1
 8004a7e:	e010      	b.n	8004aa2 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004a80:	4b0a      	ldr	r3, [pc, #40]	; (8004aac <SysTick_Config+0x44>)
 8004a82:	687a      	ldr	r2, [r7, #4]
 8004a84:	3a01      	subs	r2, #1
 8004a86:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004a88:	2301      	movs	r3, #1
 8004a8a:	425b      	negs	r3, r3
 8004a8c:	2103      	movs	r1, #3
 8004a8e:	0018      	movs	r0, r3
 8004a90:	f7ff ff7c 	bl	800498c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004a94:	4b05      	ldr	r3, [pc, #20]	; (8004aac <SysTick_Config+0x44>)
 8004a96:	2200      	movs	r2, #0
 8004a98:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004a9a:	4b04      	ldr	r3, [pc, #16]	; (8004aac <SysTick_Config+0x44>)
 8004a9c:	2207      	movs	r2, #7
 8004a9e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004aa0:	2300      	movs	r3, #0
}
 8004aa2:	0018      	movs	r0, r3
 8004aa4:	46bd      	mov	sp, r7
 8004aa6:	b002      	add	sp, #8
 8004aa8:	bd80      	pop	{r7, pc}
 8004aaa:	46c0      	nop			; (mov r8, r8)
 8004aac:	e000e010 	.word	0xe000e010

08004ab0 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004ab0:	b580      	push	{r7, lr}
 8004ab2:	b084      	sub	sp, #16
 8004ab4:	af00      	add	r7, sp, #0
 8004ab6:	60b9      	str	r1, [r7, #8]
 8004ab8:	607a      	str	r2, [r7, #4]
 8004aba:	210f      	movs	r1, #15
 8004abc:	187b      	adds	r3, r7, r1
 8004abe:	1c02      	adds	r2, r0, #0
 8004ac0:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8004ac2:	68ba      	ldr	r2, [r7, #8]
 8004ac4:	187b      	adds	r3, r7, r1
 8004ac6:	781b      	ldrb	r3, [r3, #0]
 8004ac8:	b25b      	sxtb	r3, r3
 8004aca:	0011      	movs	r1, r2
 8004acc:	0018      	movs	r0, r3
 8004ace:	f7ff ff5d 	bl	800498c <__NVIC_SetPriority>
}
 8004ad2:	46c0      	nop			; (mov r8, r8)
 8004ad4:	46bd      	mov	sp, r7
 8004ad6:	b004      	add	sp, #16
 8004ad8:	bd80      	pop	{r7, pc}

08004ada <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004ada:	b580      	push	{r7, lr}
 8004adc:	b082      	sub	sp, #8
 8004ade:	af00      	add	r7, sp, #0
 8004ae0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	0018      	movs	r0, r3
 8004ae6:	f7ff ffbf 	bl	8004a68 <SysTick_Config>
 8004aea:	0003      	movs	r3, r0
}
 8004aec:	0018      	movs	r0, r3
 8004aee:	46bd      	mov	sp, r7
 8004af0:	b002      	add	sp, #8
 8004af2:	bd80      	pop	{r7, pc}

08004af4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004af4:	b580      	push	{r7, lr}
 8004af6:	b086      	sub	sp, #24
 8004af8:	af00      	add	r7, sp, #0
 8004afa:	6078      	str	r0, [r7, #4]
 8004afc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8004afe:	2300      	movs	r3, #0
 8004b00:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004b02:	2300      	movs	r3, #0
 8004b04:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 8004b06:	2300      	movs	r3, #0
 8004b08:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8004b0a:	e14f      	b.n	8004dac <HAL_GPIO_Init+0x2b8>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8004b0c:	683b      	ldr	r3, [r7, #0]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	2101      	movs	r1, #1
 8004b12:	697a      	ldr	r2, [r7, #20]
 8004b14:	4091      	lsls	r1, r2
 8004b16:	000a      	movs	r2, r1
 8004b18:	4013      	ands	r3, r2
 8004b1a:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d100      	bne.n	8004b24 <HAL_GPIO_Init+0x30>
 8004b22:	e140      	b.n	8004da6 <HAL_GPIO_Init+0x2b2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004b24:	683b      	ldr	r3, [r7, #0]
 8004b26:	685b      	ldr	r3, [r3, #4]
 8004b28:	2b01      	cmp	r3, #1
 8004b2a:	d00b      	beq.n	8004b44 <HAL_GPIO_Init+0x50>
 8004b2c:	683b      	ldr	r3, [r7, #0]
 8004b2e:	685b      	ldr	r3, [r3, #4]
 8004b30:	2b02      	cmp	r3, #2
 8004b32:	d007      	beq.n	8004b44 <HAL_GPIO_Init+0x50>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004b34:	683b      	ldr	r3, [r7, #0]
 8004b36:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004b38:	2b11      	cmp	r3, #17
 8004b3a:	d003      	beq.n	8004b44 <HAL_GPIO_Init+0x50>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004b3c:	683b      	ldr	r3, [r7, #0]
 8004b3e:	685b      	ldr	r3, [r3, #4]
 8004b40:	2b12      	cmp	r3, #18
 8004b42:	d130      	bne.n	8004ba6 <HAL_GPIO_Init+0xb2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	689b      	ldr	r3, [r3, #8]
 8004b48:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8004b4a:	697b      	ldr	r3, [r7, #20]
 8004b4c:	005b      	lsls	r3, r3, #1
 8004b4e:	2203      	movs	r2, #3
 8004b50:	409a      	lsls	r2, r3
 8004b52:	0013      	movs	r3, r2
 8004b54:	43da      	mvns	r2, r3
 8004b56:	693b      	ldr	r3, [r7, #16]
 8004b58:	4013      	ands	r3, r2
 8004b5a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004b5c:	683b      	ldr	r3, [r7, #0]
 8004b5e:	68da      	ldr	r2, [r3, #12]
 8004b60:	697b      	ldr	r3, [r7, #20]
 8004b62:	005b      	lsls	r3, r3, #1
 8004b64:	409a      	lsls	r2, r3
 8004b66:	0013      	movs	r3, r2
 8004b68:	693a      	ldr	r2, [r7, #16]
 8004b6a:	4313      	orrs	r3, r2
 8004b6c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	693a      	ldr	r2, [r7, #16]
 8004b72:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	685b      	ldr	r3, [r3, #4]
 8004b78:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004b7a:	2201      	movs	r2, #1
 8004b7c:	697b      	ldr	r3, [r7, #20]
 8004b7e:	409a      	lsls	r2, r3
 8004b80:	0013      	movs	r3, r2
 8004b82:	43da      	mvns	r2, r3
 8004b84:	693b      	ldr	r3, [r7, #16]
 8004b86:	4013      	ands	r3, r2
 8004b88:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8004b8a:	683b      	ldr	r3, [r7, #0]
 8004b8c:	685b      	ldr	r3, [r3, #4]
 8004b8e:	091b      	lsrs	r3, r3, #4
 8004b90:	2201      	movs	r2, #1
 8004b92:	401a      	ands	r2, r3
 8004b94:	697b      	ldr	r3, [r7, #20]
 8004b96:	409a      	lsls	r2, r3
 8004b98:	0013      	movs	r3, r2
 8004b9a:	693a      	ldr	r2, [r7, #16]
 8004b9c:	4313      	orrs	r3, r2
 8004b9e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	693a      	ldr	r2, [r7, #16]
 8004ba4:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	68db      	ldr	r3, [r3, #12]
 8004baa:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004bac:	697b      	ldr	r3, [r7, #20]
 8004bae:	005b      	lsls	r3, r3, #1
 8004bb0:	2203      	movs	r2, #3
 8004bb2:	409a      	lsls	r2, r3
 8004bb4:	0013      	movs	r3, r2
 8004bb6:	43da      	mvns	r2, r3
 8004bb8:	693b      	ldr	r3, [r7, #16]
 8004bba:	4013      	ands	r3, r2
 8004bbc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004bbe:	683b      	ldr	r3, [r7, #0]
 8004bc0:	689a      	ldr	r2, [r3, #8]
 8004bc2:	697b      	ldr	r3, [r7, #20]
 8004bc4:	005b      	lsls	r3, r3, #1
 8004bc6:	409a      	lsls	r2, r3
 8004bc8:	0013      	movs	r3, r2
 8004bca:	693a      	ldr	r2, [r7, #16]
 8004bcc:	4313      	orrs	r3, r2
 8004bce:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	693a      	ldr	r2, [r7, #16]
 8004bd4:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004bd6:	683b      	ldr	r3, [r7, #0]
 8004bd8:	685b      	ldr	r3, [r3, #4]
 8004bda:	2b02      	cmp	r3, #2
 8004bdc:	d003      	beq.n	8004be6 <HAL_GPIO_Init+0xf2>
 8004bde:	683b      	ldr	r3, [r7, #0]
 8004be0:	685b      	ldr	r3, [r3, #4]
 8004be2:	2b12      	cmp	r3, #18
 8004be4:	d123      	bne.n	8004c2e <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004be6:	697b      	ldr	r3, [r7, #20]
 8004be8:	08da      	lsrs	r2, r3, #3
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	3208      	adds	r2, #8
 8004bee:	0092      	lsls	r2, r2, #2
 8004bf0:	58d3      	ldr	r3, [r2, r3]
 8004bf2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8004bf4:	697b      	ldr	r3, [r7, #20]
 8004bf6:	2207      	movs	r2, #7
 8004bf8:	4013      	ands	r3, r2
 8004bfa:	009b      	lsls	r3, r3, #2
 8004bfc:	220f      	movs	r2, #15
 8004bfe:	409a      	lsls	r2, r3
 8004c00:	0013      	movs	r3, r2
 8004c02:	43da      	mvns	r2, r3
 8004c04:	693b      	ldr	r3, [r7, #16]
 8004c06:	4013      	ands	r3, r2
 8004c08:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 8004c0a:	683b      	ldr	r3, [r7, #0]
 8004c0c:	691a      	ldr	r2, [r3, #16]
 8004c0e:	697b      	ldr	r3, [r7, #20]
 8004c10:	2107      	movs	r1, #7
 8004c12:	400b      	ands	r3, r1
 8004c14:	009b      	lsls	r3, r3, #2
 8004c16:	409a      	lsls	r2, r3
 8004c18:	0013      	movs	r3, r2
 8004c1a:	693a      	ldr	r2, [r7, #16]
 8004c1c:	4313      	orrs	r3, r2
 8004c1e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8004c20:	697b      	ldr	r3, [r7, #20]
 8004c22:	08da      	lsrs	r2, r3, #3
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	3208      	adds	r2, #8
 8004c28:	0092      	lsls	r2, r2, #2
 8004c2a:	6939      	ldr	r1, [r7, #16]
 8004c2c:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004c34:	697b      	ldr	r3, [r7, #20]
 8004c36:	005b      	lsls	r3, r3, #1
 8004c38:	2203      	movs	r2, #3
 8004c3a:	409a      	lsls	r2, r3
 8004c3c:	0013      	movs	r3, r2
 8004c3e:	43da      	mvns	r2, r3
 8004c40:	693b      	ldr	r3, [r7, #16]
 8004c42:	4013      	ands	r3, r2
 8004c44:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004c46:	683b      	ldr	r3, [r7, #0]
 8004c48:	685b      	ldr	r3, [r3, #4]
 8004c4a:	2203      	movs	r2, #3
 8004c4c:	401a      	ands	r2, r3
 8004c4e:	697b      	ldr	r3, [r7, #20]
 8004c50:	005b      	lsls	r3, r3, #1
 8004c52:	409a      	lsls	r2, r3
 8004c54:	0013      	movs	r3, r2
 8004c56:	693a      	ldr	r2, [r7, #16]
 8004c58:	4313      	orrs	r3, r2
 8004c5a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	693a      	ldr	r2, [r7, #16]
 8004c60:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004c62:	683b      	ldr	r3, [r7, #0]
 8004c64:	685a      	ldr	r2, [r3, #4]
 8004c66:	2380      	movs	r3, #128	; 0x80
 8004c68:	055b      	lsls	r3, r3, #21
 8004c6a:	4013      	ands	r3, r2
 8004c6c:	d100      	bne.n	8004c70 <HAL_GPIO_Init+0x17c>
 8004c6e:	e09a      	b.n	8004da6 <HAL_GPIO_Init+0x2b2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004c70:	4b54      	ldr	r3, [pc, #336]	; (8004dc4 <HAL_GPIO_Init+0x2d0>)
 8004c72:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004c74:	4b53      	ldr	r3, [pc, #332]	; (8004dc4 <HAL_GPIO_Init+0x2d0>)
 8004c76:	2101      	movs	r1, #1
 8004c78:	430a      	orrs	r2, r1
 8004c7a:	635a      	str	r2, [r3, #52]	; 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 8004c7c:	4a52      	ldr	r2, [pc, #328]	; (8004dc8 <HAL_GPIO_Init+0x2d4>)
 8004c7e:	697b      	ldr	r3, [r7, #20]
 8004c80:	089b      	lsrs	r3, r3, #2
 8004c82:	3302      	adds	r3, #2
 8004c84:	009b      	lsls	r3, r3, #2
 8004c86:	589b      	ldr	r3, [r3, r2]
 8004c88:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 8004c8a:	697b      	ldr	r3, [r7, #20]
 8004c8c:	2203      	movs	r2, #3
 8004c8e:	4013      	ands	r3, r2
 8004c90:	009b      	lsls	r3, r3, #2
 8004c92:	220f      	movs	r2, #15
 8004c94:	409a      	lsls	r2, r3
 8004c96:	0013      	movs	r3, r2
 8004c98:	43da      	mvns	r2, r3
 8004c9a:	693b      	ldr	r3, [r7, #16]
 8004c9c:	4013      	ands	r3, r2
 8004c9e:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8004ca0:	687a      	ldr	r2, [r7, #4]
 8004ca2:	23a0      	movs	r3, #160	; 0xa0
 8004ca4:	05db      	lsls	r3, r3, #23
 8004ca6:	429a      	cmp	r2, r3
 8004ca8:	d019      	beq.n	8004cde <HAL_GPIO_Init+0x1ea>
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	4a47      	ldr	r2, [pc, #284]	; (8004dcc <HAL_GPIO_Init+0x2d8>)
 8004cae:	4293      	cmp	r3, r2
 8004cb0:	d013      	beq.n	8004cda <HAL_GPIO_Init+0x1e6>
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	4a46      	ldr	r2, [pc, #280]	; (8004dd0 <HAL_GPIO_Init+0x2dc>)
 8004cb6:	4293      	cmp	r3, r2
 8004cb8:	d00d      	beq.n	8004cd6 <HAL_GPIO_Init+0x1e2>
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	4a45      	ldr	r2, [pc, #276]	; (8004dd4 <HAL_GPIO_Init+0x2e0>)
 8004cbe:	4293      	cmp	r3, r2
 8004cc0:	d007      	beq.n	8004cd2 <HAL_GPIO_Init+0x1de>
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	4a44      	ldr	r2, [pc, #272]	; (8004dd8 <HAL_GPIO_Init+0x2e4>)
 8004cc6:	4293      	cmp	r3, r2
 8004cc8:	d101      	bne.n	8004cce <HAL_GPIO_Init+0x1da>
 8004cca:	2305      	movs	r3, #5
 8004ccc:	e008      	b.n	8004ce0 <HAL_GPIO_Init+0x1ec>
 8004cce:	2306      	movs	r3, #6
 8004cd0:	e006      	b.n	8004ce0 <HAL_GPIO_Init+0x1ec>
 8004cd2:	2303      	movs	r3, #3
 8004cd4:	e004      	b.n	8004ce0 <HAL_GPIO_Init+0x1ec>
 8004cd6:	2302      	movs	r3, #2
 8004cd8:	e002      	b.n	8004ce0 <HAL_GPIO_Init+0x1ec>
 8004cda:	2301      	movs	r3, #1
 8004cdc:	e000      	b.n	8004ce0 <HAL_GPIO_Init+0x1ec>
 8004cde:	2300      	movs	r3, #0
 8004ce0:	697a      	ldr	r2, [r7, #20]
 8004ce2:	2103      	movs	r1, #3
 8004ce4:	400a      	ands	r2, r1
 8004ce6:	0092      	lsls	r2, r2, #2
 8004ce8:	4093      	lsls	r3, r2
 8004cea:	693a      	ldr	r2, [r7, #16]
 8004cec:	4313      	orrs	r3, r2
 8004cee:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004cf0:	4935      	ldr	r1, [pc, #212]	; (8004dc8 <HAL_GPIO_Init+0x2d4>)
 8004cf2:	697b      	ldr	r3, [r7, #20]
 8004cf4:	089b      	lsrs	r3, r3, #2
 8004cf6:	3302      	adds	r3, #2
 8004cf8:	009b      	lsls	r3, r3, #2
 8004cfa:	693a      	ldr	r2, [r7, #16]
 8004cfc:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004cfe:	4b37      	ldr	r3, [pc, #220]	; (8004ddc <HAL_GPIO_Init+0x2e8>)
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	43da      	mvns	r2, r3
 8004d08:	693b      	ldr	r3, [r7, #16]
 8004d0a:	4013      	ands	r3, r2
 8004d0c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004d0e:	683b      	ldr	r3, [r7, #0]
 8004d10:	685a      	ldr	r2, [r3, #4]
 8004d12:	2380      	movs	r3, #128	; 0x80
 8004d14:	025b      	lsls	r3, r3, #9
 8004d16:	4013      	ands	r3, r2
 8004d18:	d003      	beq.n	8004d22 <HAL_GPIO_Init+0x22e>
        {
          temp |= iocurrent;
 8004d1a:	693a      	ldr	r2, [r7, #16]
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	4313      	orrs	r3, r2
 8004d20:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8004d22:	4b2e      	ldr	r3, [pc, #184]	; (8004ddc <HAL_GPIO_Init+0x2e8>)
 8004d24:	693a      	ldr	r2, [r7, #16]
 8004d26:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8004d28:	4b2c      	ldr	r3, [pc, #176]	; (8004ddc <HAL_GPIO_Init+0x2e8>)
 8004d2a:	685b      	ldr	r3, [r3, #4]
 8004d2c:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	43da      	mvns	r2, r3
 8004d32:	693b      	ldr	r3, [r7, #16]
 8004d34:	4013      	ands	r3, r2
 8004d36:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004d38:	683b      	ldr	r3, [r7, #0]
 8004d3a:	685a      	ldr	r2, [r3, #4]
 8004d3c:	2380      	movs	r3, #128	; 0x80
 8004d3e:	029b      	lsls	r3, r3, #10
 8004d40:	4013      	ands	r3, r2
 8004d42:	d003      	beq.n	8004d4c <HAL_GPIO_Init+0x258>
        {
          temp |= iocurrent;
 8004d44:	693a      	ldr	r2, [r7, #16]
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	4313      	orrs	r3, r2
 8004d4a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8004d4c:	4b23      	ldr	r3, [pc, #140]	; (8004ddc <HAL_GPIO_Init+0x2e8>)
 8004d4e:	693a      	ldr	r2, [r7, #16]
 8004d50:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004d52:	4b22      	ldr	r3, [pc, #136]	; (8004ddc <HAL_GPIO_Init+0x2e8>)
 8004d54:	689b      	ldr	r3, [r3, #8]
 8004d56:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	43da      	mvns	r2, r3
 8004d5c:	693b      	ldr	r3, [r7, #16]
 8004d5e:	4013      	ands	r3, r2
 8004d60:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004d62:	683b      	ldr	r3, [r7, #0]
 8004d64:	685a      	ldr	r2, [r3, #4]
 8004d66:	2380      	movs	r3, #128	; 0x80
 8004d68:	035b      	lsls	r3, r3, #13
 8004d6a:	4013      	ands	r3, r2
 8004d6c:	d003      	beq.n	8004d76 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8004d6e:	693a      	ldr	r2, [r7, #16]
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	4313      	orrs	r3, r2
 8004d74:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8004d76:	4b19      	ldr	r3, [pc, #100]	; (8004ddc <HAL_GPIO_Init+0x2e8>)
 8004d78:	693a      	ldr	r2, [r7, #16]
 8004d7a:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8004d7c:	4b17      	ldr	r3, [pc, #92]	; (8004ddc <HAL_GPIO_Init+0x2e8>)
 8004d7e:	68db      	ldr	r3, [r3, #12]
 8004d80:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	43da      	mvns	r2, r3
 8004d86:	693b      	ldr	r3, [r7, #16]
 8004d88:	4013      	ands	r3, r2
 8004d8a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004d8c:	683b      	ldr	r3, [r7, #0]
 8004d8e:	685a      	ldr	r2, [r3, #4]
 8004d90:	2380      	movs	r3, #128	; 0x80
 8004d92:	039b      	lsls	r3, r3, #14
 8004d94:	4013      	ands	r3, r2
 8004d96:	d003      	beq.n	8004da0 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8004d98:	693a      	ldr	r2, [r7, #16]
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	4313      	orrs	r3, r2
 8004d9e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8004da0:	4b0e      	ldr	r3, [pc, #56]	; (8004ddc <HAL_GPIO_Init+0x2e8>)
 8004da2:	693a      	ldr	r2, [r7, #16]
 8004da4:	60da      	str	r2, [r3, #12]
      }
    }
    position++;
 8004da6:	697b      	ldr	r3, [r7, #20]
 8004da8:	3301      	adds	r3, #1
 8004daa:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8004dac:	683b      	ldr	r3, [r7, #0]
 8004dae:	681a      	ldr	r2, [r3, #0]
 8004db0:	697b      	ldr	r3, [r7, #20]
 8004db2:	40da      	lsrs	r2, r3
 8004db4:	1e13      	subs	r3, r2, #0
 8004db6:	d000      	beq.n	8004dba <HAL_GPIO_Init+0x2c6>
 8004db8:	e6a8      	b.n	8004b0c <HAL_GPIO_Init+0x18>
  }
}
 8004dba:	46c0      	nop			; (mov r8, r8)
 8004dbc:	46c0      	nop			; (mov r8, r8)
 8004dbe:	46bd      	mov	sp, r7
 8004dc0:	b006      	add	sp, #24
 8004dc2:	bd80      	pop	{r7, pc}
 8004dc4:	40021000 	.word	0x40021000
 8004dc8:	40010000 	.word	0x40010000
 8004dcc:	50000400 	.word	0x50000400
 8004dd0:	50000800 	.word	0x50000800
 8004dd4:	50000c00 	.word	0x50000c00
 8004dd8:	50001c00 	.word	0x50001c00
 8004ddc:	40010400 	.word	0x40010400

08004de0 <HAL_GPIO_ReadPin>:
  *                   This parameter can be GPIO_PIN_x where x can be (0..15).
  *                   All port bits are not necessarily available on all GPIOs.
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004de0:	b580      	push	{r7, lr}
 8004de2:	b084      	sub	sp, #16
 8004de4:	af00      	add	r7, sp, #0
 8004de6:	6078      	str	r0, [r7, #4]
 8004de8:	000a      	movs	r2, r1
 8004dea:	1cbb      	adds	r3, r7, #2
 8004dec:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	691b      	ldr	r3, [r3, #16]
 8004df2:	1cba      	adds	r2, r7, #2
 8004df4:	8812      	ldrh	r2, [r2, #0]
 8004df6:	4013      	ands	r3, r2
 8004df8:	d004      	beq.n	8004e04 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8004dfa:	230f      	movs	r3, #15
 8004dfc:	18fb      	adds	r3, r7, r3
 8004dfe:	2201      	movs	r2, #1
 8004e00:	701a      	strb	r2, [r3, #0]
 8004e02:	e003      	b.n	8004e0c <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004e04:	230f      	movs	r3, #15
 8004e06:	18fb      	adds	r3, r7, r3
 8004e08:	2200      	movs	r2, #0
 8004e0a:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8004e0c:	230f      	movs	r3, #15
 8004e0e:	18fb      	adds	r3, r7, r3
 8004e10:	781b      	ldrb	r3, [r3, #0]
}
 8004e12:	0018      	movs	r0, r3
 8004e14:	46bd      	mov	sp, r7
 8004e16:	b004      	add	sp, #16
 8004e18:	bd80      	pop	{r7, pc}

08004e1a <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004e1a:	b580      	push	{r7, lr}
 8004e1c:	b082      	sub	sp, #8
 8004e1e:	af00      	add	r7, sp, #0
 8004e20:	6078      	str	r0, [r7, #4]
 8004e22:	0008      	movs	r0, r1
 8004e24:	0011      	movs	r1, r2
 8004e26:	1cbb      	adds	r3, r7, #2
 8004e28:	1c02      	adds	r2, r0, #0
 8004e2a:	801a      	strh	r2, [r3, #0]
 8004e2c:	1c7b      	adds	r3, r7, #1
 8004e2e:	1c0a      	adds	r2, r1, #0
 8004e30:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004e32:	1c7b      	adds	r3, r7, #1
 8004e34:	781b      	ldrb	r3, [r3, #0]
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d004      	beq.n	8004e44 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004e3a:	1cbb      	adds	r3, r7, #2
 8004e3c:	881a      	ldrh	r2, [r3, #0]
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 8004e42:	e003      	b.n	8004e4c <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 8004e44:	1cbb      	adds	r3, r7, #2
 8004e46:	881a      	ldrh	r2, [r3, #0]
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004e4c:	46c0      	nop			; (mov r8, r8)
 8004e4e:	46bd      	mov	sp, r7
 8004e50:	b002      	add	sp, #8
 8004e52:	bd80      	pop	{r7, pc}

08004e54 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004e54:	b5b0      	push	{r4, r5, r7, lr}
 8004e56:	b08a      	sub	sp, #40	; 0x28
 8004e58:	af00      	add	r7, sp, #0
 8004e5a:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d102      	bne.n	8004e68 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8004e62:	2301      	movs	r3, #1
 8004e64:	f000 fbaf 	bl	80055c6 <HAL_RCC_OscConfig+0x772>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004e68:	4bcf      	ldr	r3, [pc, #828]	; (80051a8 <HAL_RCC_OscConfig+0x354>)
 8004e6a:	68db      	ldr	r3, [r3, #12]
 8004e6c:	220c      	movs	r2, #12
 8004e6e:	4013      	ands	r3, r2
 8004e70:	623b      	str	r3, [r7, #32]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004e72:	4bcd      	ldr	r3, [pc, #820]	; (80051a8 <HAL_RCC_OscConfig+0x354>)
 8004e74:	68da      	ldr	r2, [r3, #12]
 8004e76:	2380      	movs	r3, #128	; 0x80
 8004e78:	025b      	lsls	r3, r3, #9
 8004e7a:	4013      	ands	r3, r2
 8004e7c:	61fb      	str	r3, [r7, #28]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	2201      	movs	r2, #1
 8004e84:	4013      	ands	r3, r2
 8004e86:	d100      	bne.n	8004e8a <HAL_RCC_OscConfig+0x36>
 8004e88:	e07e      	b.n	8004f88 <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004e8a:	6a3b      	ldr	r3, [r7, #32]
 8004e8c:	2b08      	cmp	r3, #8
 8004e8e:	d007      	beq.n	8004ea0 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8004e90:	6a3b      	ldr	r3, [r7, #32]
 8004e92:	2b0c      	cmp	r3, #12
 8004e94:	d112      	bne.n	8004ebc <HAL_RCC_OscConfig+0x68>
 8004e96:	69fa      	ldr	r2, [r7, #28]
 8004e98:	2380      	movs	r3, #128	; 0x80
 8004e9a:	025b      	lsls	r3, r3, #9
 8004e9c:	429a      	cmp	r2, r3
 8004e9e:	d10d      	bne.n	8004ebc <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004ea0:	4bc1      	ldr	r3, [pc, #772]	; (80051a8 <HAL_RCC_OscConfig+0x354>)
 8004ea2:	681a      	ldr	r2, [r3, #0]
 8004ea4:	2380      	movs	r3, #128	; 0x80
 8004ea6:	029b      	lsls	r3, r3, #10
 8004ea8:	4013      	ands	r3, r2
 8004eaa:	d100      	bne.n	8004eae <HAL_RCC_OscConfig+0x5a>
 8004eac:	e06b      	b.n	8004f86 <HAL_RCC_OscConfig+0x132>
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	685b      	ldr	r3, [r3, #4]
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d167      	bne.n	8004f86 <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 8004eb6:	2301      	movs	r3, #1
 8004eb8:	f000 fb85 	bl	80055c6 <HAL_RCC_OscConfig+0x772>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	685a      	ldr	r2, [r3, #4]
 8004ec0:	2380      	movs	r3, #128	; 0x80
 8004ec2:	025b      	lsls	r3, r3, #9
 8004ec4:	429a      	cmp	r2, r3
 8004ec6:	d107      	bne.n	8004ed8 <HAL_RCC_OscConfig+0x84>
 8004ec8:	4bb7      	ldr	r3, [pc, #732]	; (80051a8 <HAL_RCC_OscConfig+0x354>)
 8004eca:	681a      	ldr	r2, [r3, #0]
 8004ecc:	4bb6      	ldr	r3, [pc, #728]	; (80051a8 <HAL_RCC_OscConfig+0x354>)
 8004ece:	2180      	movs	r1, #128	; 0x80
 8004ed0:	0249      	lsls	r1, r1, #9
 8004ed2:	430a      	orrs	r2, r1
 8004ed4:	601a      	str	r2, [r3, #0]
 8004ed6:	e027      	b.n	8004f28 <HAL_RCC_OscConfig+0xd4>
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	685a      	ldr	r2, [r3, #4]
 8004edc:	23a0      	movs	r3, #160	; 0xa0
 8004ede:	02db      	lsls	r3, r3, #11
 8004ee0:	429a      	cmp	r2, r3
 8004ee2:	d10e      	bne.n	8004f02 <HAL_RCC_OscConfig+0xae>
 8004ee4:	4bb0      	ldr	r3, [pc, #704]	; (80051a8 <HAL_RCC_OscConfig+0x354>)
 8004ee6:	681a      	ldr	r2, [r3, #0]
 8004ee8:	4baf      	ldr	r3, [pc, #700]	; (80051a8 <HAL_RCC_OscConfig+0x354>)
 8004eea:	2180      	movs	r1, #128	; 0x80
 8004eec:	02c9      	lsls	r1, r1, #11
 8004eee:	430a      	orrs	r2, r1
 8004ef0:	601a      	str	r2, [r3, #0]
 8004ef2:	4bad      	ldr	r3, [pc, #692]	; (80051a8 <HAL_RCC_OscConfig+0x354>)
 8004ef4:	681a      	ldr	r2, [r3, #0]
 8004ef6:	4bac      	ldr	r3, [pc, #688]	; (80051a8 <HAL_RCC_OscConfig+0x354>)
 8004ef8:	2180      	movs	r1, #128	; 0x80
 8004efa:	0249      	lsls	r1, r1, #9
 8004efc:	430a      	orrs	r2, r1
 8004efe:	601a      	str	r2, [r3, #0]
 8004f00:	e012      	b.n	8004f28 <HAL_RCC_OscConfig+0xd4>
 8004f02:	4ba9      	ldr	r3, [pc, #676]	; (80051a8 <HAL_RCC_OscConfig+0x354>)
 8004f04:	681a      	ldr	r2, [r3, #0]
 8004f06:	4ba8      	ldr	r3, [pc, #672]	; (80051a8 <HAL_RCC_OscConfig+0x354>)
 8004f08:	49a8      	ldr	r1, [pc, #672]	; (80051ac <HAL_RCC_OscConfig+0x358>)
 8004f0a:	400a      	ands	r2, r1
 8004f0c:	601a      	str	r2, [r3, #0]
 8004f0e:	4ba6      	ldr	r3, [pc, #664]	; (80051a8 <HAL_RCC_OscConfig+0x354>)
 8004f10:	681a      	ldr	r2, [r3, #0]
 8004f12:	2380      	movs	r3, #128	; 0x80
 8004f14:	025b      	lsls	r3, r3, #9
 8004f16:	4013      	ands	r3, r2
 8004f18:	60fb      	str	r3, [r7, #12]
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	4ba2      	ldr	r3, [pc, #648]	; (80051a8 <HAL_RCC_OscConfig+0x354>)
 8004f1e:	681a      	ldr	r2, [r3, #0]
 8004f20:	4ba1      	ldr	r3, [pc, #644]	; (80051a8 <HAL_RCC_OscConfig+0x354>)
 8004f22:	49a3      	ldr	r1, [pc, #652]	; (80051b0 <HAL_RCC_OscConfig+0x35c>)
 8004f24:	400a      	ands	r2, r1
 8004f26:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	685b      	ldr	r3, [r3, #4]
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d015      	beq.n	8004f5c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f30:	f7ff f88e 	bl	8004050 <HAL_GetTick>
 8004f34:	0003      	movs	r3, r0
 8004f36:	61bb      	str	r3, [r7, #24]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004f38:	e009      	b.n	8004f4e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004f3a:	f7ff f889 	bl	8004050 <HAL_GetTick>
 8004f3e:	0002      	movs	r2, r0
 8004f40:	69bb      	ldr	r3, [r7, #24]
 8004f42:	1ad3      	subs	r3, r2, r3
 8004f44:	2b64      	cmp	r3, #100	; 0x64
 8004f46:	d902      	bls.n	8004f4e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004f48:	2303      	movs	r3, #3
 8004f4a:	f000 fb3c 	bl	80055c6 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004f4e:	4b96      	ldr	r3, [pc, #600]	; (80051a8 <HAL_RCC_OscConfig+0x354>)
 8004f50:	681a      	ldr	r2, [r3, #0]
 8004f52:	2380      	movs	r3, #128	; 0x80
 8004f54:	029b      	lsls	r3, r3, #10
 8004f56:	4013      	ands	r3, r2
 8004f58:	d0ef      	beq.n	8004f3a <HAL_RCC_OscConfig+0xe6>
 8004f5a:	e015      	b.n	8004f88 <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f5c:	f7ff f878 	bl	8004050 <HAL_GetTick>
 8004f60:	0003      	movs	r3, r0
 8004f62:	61bb      	str	r3, [r7, #24]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004f64:	e008      	b.n	8004f78 <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004f66:	f7ff f873 	bl	8004050 <HAL_GetTick>
 8004f6a:	0002      	movs	r2, r0
 8004f6c:	69bb      	ldr	r3, [r7, #24]
 8004f6e:	1ad3      	subs	r3, r2, r3
 8004f70:	2b64      	cmp	r3, #100	; 0x64
 8004f72:	d901      	bls.n	8004f78 <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 8004f74:	2303      	movs	r3, #3
 8004f76:	e326      	b.n	80055c6 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004f78:	4b8b      	ldr	r3, [pc, #556]	; (80051a8 <HAL_RCC_OscConfig+0x354>)
 8004f7a:	681a      	ldr	r2, [r3, #0]
 8004f7c:	2380      	movs	r3, #128	; 0x80
 8004f7e:	029b      	lsls	r3, r3, #10
 8004f80:	4013      	ands	r3, r2
 8004f82:	d1f0      	bne.n	8004f66 <HAL_RCC_OscConfig+0x112>
 8004f84:	e000      	b.n	8004f88 <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004f86:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	2202      	movs	r2, #2
 8004f8e:	4013      	ands	r3, r2
 8004f90:	d100      	bne.n	8004f94 <HAL_RCC_OscConfig+0x140>
 8004f92:	e08b      	b.n	80050ac <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	68db      	ldr	r3, [r3, #12]
 8004f98:	617b      	str	r3, [r7, #20]
      hsi_state &= ~RCC_CR_HSIOUTEN;
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004f9a:	6a3b      	ldr	r3, [r7, #32]
 8004f9c:	2b04      	cmp	r3, #4
 8004f9e:	d005      	beq.n	8004fac <HAL_RCC_OscConfig+0x158>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8004fa0:	6a3b      	ldr	r3, [r7, #32]
 8004fa2:	2b0c      	cmp	r3, #12
 8004fa4:	d13e      	bne.n	8005024 <HAL_RCC_OscConfig+0x1d0>
 8004fa6:	69fb      	ldr	r3, [r7, #28]
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d13b      	bne.n	8005024 <HAL_RCC_OscConfig+0x1d0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8004fac:	4b7e      	ldr	r3, [pc, #504]	; (80051a8 <HAL_RCC_OscConfig+0x354>)
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	2204      	movs	r2, #4
 8004fb2:	4013      	ands	r3, r2
 8004fb4:	d004      	beq.n	8004fc0 <HAL_RCC_OscConfig+0x16c>
 8004fb6:	697b      	ldr	r3, [r7, #20]
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d101      	bne.n	8004fc0 <HAL_RCC_OscConfig+0x16c>
      {
        return HAL_ERROR;
 8004fbc:	2301      	movs	r3, #1
 8004fbe:	e302      	b.n	80055c6 <HAL_RCC_OscConfig+0x772>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004fc0:	4b79      	ldr	r3, [pc, #484]	; (80051a8 <HAL_RCC_OscConfig+0x354>)
 8004fc2:	685b      	ldr	r3, [r3, #4]
 8004fc4:	4a7b      	ldr	r2, [pc, #492]	; (80051b4 <HAL_RCC_OscConfig+0x360>)
 8004fc6:	4013      	ands	r3, r2
 8004fc8:	0019      	movs	r1, r3
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	691b      	ldr	r3, [r3, #16]
 8004fce:	021a      	lsls	r2, r3, #8
 8004fd0:	4b75      	ldr	r3, [pc, #468]	; (80051a8 <HAL_RCC_OscConfig+0x354>)
 8004fd2:	430a      	orrs	r2, r1
 8004fd4:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8004fd6:	4b74      	ldr	r3, [pc, #464]	; (80051a8 <HAL_RCC_OscConfig+0x354>)
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	2209      	movs	r2, #9
 8004fdc:	4393      	bics	r3, r2
 8004fde:	0019      	movs	r1, r3
 8004fe0:	4b71      	ldr	r3, [pc, #452]	; (80051a8 <HAL_RCC_OscConfig+0x354>)
 8004fe2:	697a      	ldr	r2, [r7, #20]
 8004fe4:	430a      	orrs	r2, r1
 8004fe6:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004fe8:	f000 fc40 	bl	800586c <HAL_RCC_GetSysClockFreq>
 8004fec:	0001      	movs	r1, r0
 8004fee:	4b6e      	ldr	r3, [pc, #440]	; (80051a8 <HAL_RCC_OscConfig+0x354>)
 8004ff0:	68db      	ldr	r3, [r3, #12]
 8004ff2:	091b      	lsrs	r3, r3, #4
 8004ff4:	220f      	movs	r2, #15
 8004ff6:	4013      	ands	r3, r2
 8004ff8:	4a6f      	ldr	r2, [pc, #444]	; (80051b8 <HAL_RCC_OscConfig+0x364>)
 8004ffa:	5cd3      	ldrb	r3, [r2, r3]
 8004ffc:	000a      	movs	r2, r1
 8004ffe:	40da      	lsrs	r2, r3
 8005000:	4b6e      	ldr	r3, [pc, #440]	; (80051bc <HAL_RCC_OscConfig+0x368>)
 8005002:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 8005004:	4b6e      	ldr	r3, [pc, #440]	; (80051c0 <HAL_RCC_OscConfig+0x36c>)
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	2513      	movs	r5, #19
 800500a:	197c      	adds	r4, r7, r5
 800500c:	0018      	movs	r0, r3
 800500e:	f7fe ffd9 	bl	8003fc4 <HAL_InitTick>
 8005012:	0003      	movs	r3, r0
 8005014:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 8005016:	197b      	adds	r3, r7, r5
 8005018:	781b      	ldrb	r3, [r3, #0]
 800501a:	2b00      	cmp	r3, #0
 800501c:	d046      	beq.n	80050ac <HAL_RCC_OscConfig+0x258>
      {
        return status;
 800501e:	197b      	adds	r3, r7, r5
 8005020:	781b      	ldrb	r3, [r3, #0]
 8005022:	e2d0      	b.n	80055c6 <HAL_RCC_OscConfig+0x772>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 8005024:	697b      	ldr	r3, [r7, #20]
 8005026:	2b00      	cmp	r3, #0
 8005028:	d027      	beq.n	800507a <HAL_RCC_OscConfig+0x226>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 800502a:	4b5f      	ldr	r3, [pc, #380]	; (80051a8 <HAL_RCC_OscConfig+0x354>)
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	2209      	movs	r2, #9
 8005030:	4393      	bics	r3, r2
 8005032:	0019      	movs	r1, r3
 8005034:	4b5c      	ldr	r3, [pc, #368]	; (80051a8 <HAL_RCC_OscConfig+0x354>)
 8005036:	697a      	ldr	r2, [r7, #20]
 8005038:	430a      	orrs	r2, r1
 800503a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800503c:	f7ff f808 	bl	8004050 <HAL_GetTick>
 8005040:	0003      	movs	r3, r0
 8005042:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005044:	e008      	b.n	8005058 <HAL_RCC_OscConfig+0x204>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005046:	f7ff f803 	bl	8004050 <HAL_GetTick>
 800504a:	0002      	movs	r2, r0
 800504c:	69bb      	ldr	r3, [r7, #24]
 800504e:	1ad3      	subs	r3, r2, r3
 8005050:	2b02      	cmp	r3, #2
 8005052:	d901      	bls.n	8005058 <HAL_RCC_OscConfig+0x204>
          {
            return HAL_TIMEOUT;
 8005054:	2303      	movs	r3, #3
 8005056:	e2b6      	b.n	80055c6 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005058:	4b53      	ldr	r3, [pc, #332]	; (80051a8 <HAL_RCC_OscConfig+0x354>)
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	2204      	movs	r2, #4
 800505e:	4013      	ands	r3, r2
 8005060:	d0f1      	beq.n	8005046 <HAL_RCC_OscConfig+0x1f2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005062:	4b51      	ldr	r3, [pc, #324]	; (80051a8 <HAL_RCC_OscConfig+0x354>)
 8005064:	685b      	ldr	r3, [r3, #4]
 8005066:	4a53      	ldr	r2, [pc, #332]	; (80051b4 <HAL_RCC_OscConfig+0x360>)
 8005068:	4013      	ands	r3, r2
 800506a:	0019      	movs	r1, r3
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	691b      	ldr	r3, [r3, #16]
 8005070:	021a      	lsls	r2, r3, #8
 8005072:	4b4d      	ldr	r3, [pc, #308]	; (80051a8 <HAL_RCC_OscConfig+0x354>)
 8005074:	430a      	orrs	r2, r1
 8005076:	605a      	str	r2, [r3, #4]
 8005078:	e018      	b.n	80050ac <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800507a:	4b4b      	ldr	r3, [pc, #300]	; (80051a8 <HAL_RCC_OscConfig+0x354>)
 800507c:	681a      	ldr	r2, [r3, #0]
 800507e:	4b4a      	ldr	r3, [pc, #296]	; (80051a8 <HAL_RCC_OscConfig+0x354>)
 8005080:	2101      	movs	r1, #1
 8005082:	438a      	bics	r2, r1
 8005084:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005086:	f7fe ffe3 	bl	8004050 <HAL_GetTick>
 800508a:	0003      	movs	r3, r0
 800508c:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800508e:	e008      	b.n	80050a2 <HAL_RCC_OscConfig+0x24e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005090:	f7fe ffde 	bl	8004050 <HAL_GetTick>
 8005094:	0002      	movs	r2, r0
 8005096:	69bb      	ldr	r3, [r7, #24]
 8005098:	1ad3      	subs	r3, r2, r3
 800509a:	2b02      	cmp	r3, #2
 800509c:	d901      	bls.n	80050a2 <HAL_RCC_OscConfig+0x24e>
          {
            return HAL_TIMEOUT;
 800509e:	2303      	movs	r3, #3
 80050a0:	e291      	b.n	80055c6 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80050a2:	4b41      	ldr	r3, [pc, #260]	; (80051a8 <HAL_RCC_OscConfig+0x354>)
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	2204      	movs	r2, #4
 80050a8:	4013      	ands	r3, r2
 80050aa:	d1f1      	bne.n	8005090 <HAL_RCC_OscConfig+0x23c>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	2210      	movs	r2, #16
 80050b2:	4013      	ands	r3, r2
 80050b4:	d100      	bne.n	80050b8 <HAL_RCC_OscConfig+0x264>
 80050b6:	e0a1      	b.n	80051fc <HAL_RCC_OscConfig+0x3a8>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80050b8:	6a3b      	ldr	r3, [r7, #32]
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d140      	bne.n	8005140 <HAL_RCC_OscConfig+0x2ec>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80050be:	4b3a      	ldr	r3, [pc, #232]	; (80051a8 <HAL_RCC_OscConfig+0x354>)
 80050c0:	681a      	ldr	r2, [r3, #0]
 80050c2:	2380      	movs	r3, #128	; 0x80
 80050c4:	009b      	lsls	r3, r3, #2
 80050c6:	4013      	ands	r3, r2
 80050c8:	d005      	beq.n	80050d6 <HAL_RCC_OscConfig+0x282>
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	69db      	ldr	r3, [r3, #28]
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d101      	bne.n	80050d6 <HAL_RCC_OscConfig+0x282>
      {
        return HAL_ERROR;
 80050d2:	2301      	movs	r3, #1
 80050d4:	e277      	b.n	80055c6 <HAL_RCC_OscConfig+0x772>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80050d6:	4b34      	ldr	r3, [pc, #208]	; (80051a8 <HAL_RCC_OscConfig+0x354>)
 80050d8:	685b      	ldr	r3, [r3, #4]
 80050da:	4a3a      	ldr	r2, [pc, #232]	; (80051c4 <HAL_RCC_OscConfig+0x370>)
 80050dc:	4013      	ands	r3, r2
 80050de:	0019      	movs	r1, r3
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80050e4:	4b30      	ldr	r3, [pc, #192]	; (80051a8 <HAL_RCC_OscConfig+0x354>)
 80050e6:	430a      	orrs	r2, r1
 80050e8:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80050ea:	4b2f      	ldr	r3, [pc, #188]	; (80051a8 <HAL_RCC_OscConfig+0x354>)
 80050ec:	685b      	ldr	r3, [r3, #4]
 80050ee:	021b      	lsls	r3, r3, #8
 80050f0:	0a19      	lsrs	r1, r3, #8
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	6a1b      	ldr	r3, [r3, #32]
 80050f6:	061a      	lsls	r2, r3, #24
 80050f8:	4b2b      	ldr	r3, [pc, #172]	; (80051a8 <HAL_RCC_OscConfig+0x354>)
 80050fa:	430a      	orrs	r2, r1
 80050fc:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005102:	0b5b      	lsrs	r3, r3, #13
 8005104:	3301      	adds	r3, #1
 8005106:	2280      	movs	r2, #128	; 0x80
 8005108:	0212      	lsls	r2, r2, #8
 800510a:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 800510c:	4b26      	ldr	r3, [pc, #152]	; (80051a8 <HAL_RCC_OscConfig+0x354>)
 800510e:	68db      	ldr	r3, [r3, #12]
 8005110:	091b      	lsrs	r3, r3, #4
 8005112:	210f      	movs	r1, #15
 8005114:	400b      	ands	r3, r1
 8005116:	4928      	ldr	r1, [pc, #160]	; (80051b8 <HAL_RCC_OscConfig+0x364>)
 8005118:	5ccb      	ldrb	r3, [r1, r3]
 800511a:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 800511c:	4b27      	ldr	r3, [pc, #156]	; (80051bc <HAL_RCC_OscConfig+0x368>)
 800511e:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 8005120:	4b27      	ldr	r3, [pc, #156]	; (80051c0 <HAL_RCC_OscConfig+0x36c>)
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	2513      	movs	r5, #19
 8005126:	197c      	adds	r4, r7, r5
 8005128:	0018      	movs	r0, r3
 800512a:	f7fe ff4b 	bl	8003fc4 <HAL_InitTick>
 800512e:	0003      	movs	r3, r0
 8005130:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 8005132:	197b      	adds	r3, r7, r5
 8005134:	781b      	ldrb	r3, [r3, #0]
 8005136:	2b00      	cmp	r3, #0
 8005138:	d060      	beq.n	80051fc <HAL_RCC_OscConfig+0x3a8>
        {
          return status;
 800513a:	197b      	adds	r3, r7, r5
 800513c:	781b      	ldrb	r3, [r3, #0]
 800513e:	e242      	b.n	80055c6 <HAL_RCC_OscConfig+0x772>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	69db      	ldr	r3, [r3, #28]
 8005144:	2b00      	cmp	r3, #0
 8005146:	d03f      	beq.n	80051c8 <HAL_RCC_OscConfig+0x374>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8005148:	4b17      	ldr	r3, [pc, #92]	; (80051a8 <HAL_RCC_OscConfig+0x354>)
 800514a:	681a      	ldr	r2, [r3, #0]
 800514c:	4b16      	ldr	r3, [pc, #88]	; (80051a8 <HAL_RCC_OscConfig+0x354>)
 800514e:	2180      	movs	r1, #128	; 0x80
 8005150:	0049      	lsls	r1, r1, #1
 8005152:	430a      	orrs	r2, r1
 8005154:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005156:	f7fe ff7b 	bl	8004050 <HAL_GetTick>
 800515a:	0003      	movs	r3, r0
 800515c:	61bb      	str	r3, [r7, #24]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800515e:	e008      	b.n	8005172 <HAL_RCC_OscConfig+0x31e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005160:	f7fe ff76 	bl	8004050 <HAL_GetTick>
 8005164:	0002      	movs	r2, r0
 8005166:	69bb      	ldr	r3, [r7, #24]
 8005168:	1ad3      	subs	r3, r2, r3
 800516a:	2b02      	cmp	r3, #2
 800516c:	d901      	bls.n	8005172 <HAL_RCC_OscConfig+0x31e>
          {
            return HAL_TIMEOUT;
 800516e:	2303      	movs	r3, #3
 8005170:	e229      	b.n	80055c6 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8005172:	4b0d      	ldr	r3, [pc, #52]	; (80051a8 <HAL_RCC_OscConfig+0x354>)
 8005174:	681a      	ldr	r2, [r3, #0]
 8005176:	2380      	movs	r3, #128	; 0x80
 8005178:	009b      	lsls	r3, r3, #2
 800517a:	4013      	ands	r3, r2
 800517c:	d0f0      	beq.n	8005160 <HAL_RCC_OscConfig+0x30c>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800517e:	4b0a      	ldr	r3, [pc, #40]	; (80051a8 <HAL_RCC_OscConfig+0x354>)
 8005180:	685b      	ldr	r3, [r3, #4]
 8005182:	4a10      	ldr	r2, [pc, #64]	; (80051c4 <HAL_RCC_OscConfig+0x370>)
 8005184:	4013      	ands	r3, r2
 8005186:	0019      	movs	r1, r3
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800518c:	4b06      	ldr	r3, [pc, #24]	; (80051a8 <HAL_RCC_OscConfig+0x354>)
 800518e:	430a      	orrs	r2, r1
 8005190:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005192:	4b05      	ldr	r3, [pc, #20]	; (80051a8 <HAL_RCC_OscConfig+0x354>)
 8005194:	685b      	ldr	r3, [r3, #4]
 8005196:	021b      	lsls	r3, r3, #8
 8005198:	0a19      	lsrs	r1, r3, #8
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	6a1b      	ldr	r3, [r3, #32]
 800519e:	061a      	lsls	r2, r3, #24
 80051a0:	4b01      	ldr	r3, [pc, #4]	; (80051a8 <HAL_RCC_OscConfig+0x354>)
 80051a2:	430a      	orrs	r2, r1
 80051a4:	605a      	str	r2, [r3, #4]
 80051a6:	e029      	b.n	80051fc <HAL_RCC_OscConfig+0x3a8>
 80051a8:	40021000 	.word	0x40021000
 80051ac:	fffeffff 	.word	0xfffeffff
 80051b0:	fffbffff 	.word	0xfffbffff
 80051b4:	ffffe0ff 	.word	0xffffe0ff
 80051b8:	0800a4d0 	.word	0x0800a4d0
 80051bc:	20000000 	.word	0x20000000
 80051c0:	20000004 	.word	0x20000004
 80051c4:	ffff1fff 	.word	0xffff1fff
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80051c8:	4bbd      	ldr	r3, [pc, #756]	; (80054c0 <HAL_RCC_OscConfig+0x66c>)
 80051ca:	681a      	ldr	r2, [r3, #0]
 80051cc:	4bbc      	ldr	r3, [pc, #752]	; (80054c0 <HAL_RCC_OscConfig+0x66c>)
 80051ce:	49bd      	ldr	r1, [pc, #756]	; (80054c4 <HAL_RCC_OscConfig+0x670>)
 80051d0:	400a      	ands	r2, r1
 80051d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80051d4:	f7fe ff3c 	bl	8004050 <HAL_GetTick>
 80051d8:	0003      	movs	r3, r0
 80051da:	61bb      	str	r3, [r7, #24]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80051dc:	e008      	b.n	80051f0 <HAL_RCC_OscConfig+0x39c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80051de:	f7fe ff37 	bl	8004050 <HAL_GetTick>
 80051e2:	0002      	movs	r2, r0
 80051e4:	69bb      	ldr	r3, [r7, #24]
 80051e6:	1ad3      	subs	r3, r2, r3
 80051e8:	2b02      	cmp	r3, #2
 80051ea:	d901      	bls.n	80051f0 <HAL_RCC_OscConfig+0x39c>
          {
            return HAL_TIMEOUT;
 80051ec:	2303      	movs	r3, #3
 80051ee:	e1ea      	b.n	80055c6 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80051f0:	4bb3      	ldr	r3, [pc, #716]	; (80054c0 <HAL_RCC_OscConfig+0x66c>)
 80051f2:	681a      	ldr	r2, [r3, #0]
 80051f4:	2380      	movs	r3, #128	; 0x80
 80051f6:	009b      	lsls	r3, r3, #2
 80051f8:	4013      	ands	r3, r2
 80051fa:	d1f0      	bne.n	80051de <HAL_RCC_OscConfig+0x38a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	2208      	movs	r2, #8
 8005202:	4013      	ands	r3, r2
 8005204:	d036      	beq.n	8005274 <HAL_RCC_OscConfig+0x420>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	695b      	ldr	r3, [r3, #20]
 800520a:	2b00      	cmp	r3, #0
 800520c:	d019      	beq.n	8005242 <HAL_RCC_OscConfig+0x3ee>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800520e:	4bac      	ldr	r3, [pc, #688]	; (80054c0 <HAL_RCC_OscConfig+0x66c>)
 8005210:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005212:	4bab      	ldr	r3, [pc, #684]	; (80054c0 <HAL_RCC_OscConfig+0x66c>)
 8005214:	2101      	movs	r1, #1
 8005216:	430a      	orrs	r2, r1
 8005218:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800521a:	f7fe ff19 	bl	8004050 <HAL_GetTick>
 800521e:	0003      	movs	r3, r0
 8005220:	61bb      	str	r3, [r7, #24]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8005222:	e008      	b.n	8005236 <HAL_RCC_OscConfig+0x3e2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005224:	f7fe ff14 	bl	8004050 <HAL_GetTick>
 8005228:	0002      	movs	r2, r0
 800522a:	69bb      	ldr	r3, [r7, #24]
 800522c:	1ad3      	subs	r3, r2, r3
 800522e:	2b02      	cmp	r3, #2
 8005230:	d901      	bls.n	8005236 <HAL_RCC_OscConfig+0x3e2>
        {
          return HAL_TIMEOUT;
 8005232:	2303      	movs	r3, #3
 8005234:	e1c7      	b.n	80055c6 <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8005236:	4ba2      	ldr	r3, [pc, #648]	; (80054c0 <HAL_RCC_OscConfig+0x66c>)
 8005238:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800523a:	2202      	movs	r2, #2
 800523c:	4013      	ands	r3, r2
 800523e:	d0f1      	beq.n	8005224 <HAL_RCC_OscConfig+0x3d0>
 8005240:	e018      	b.n	8005274 <HAL_RCC_OscConfig+0x420>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005242:	4b9f      	ldr	r3, [pc, #636]	; (80054c0 <HAL_RCC_OscConfig+0x66c>)
 8005244:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005246:	4b9e      	ldr	r3, [pc, #632]	; (80054c0 <HAL_RCC_OscConfig+0x66c>)
 8005248:	2101      	movs	r1, #1
 800524a:	438a      	bics	r2, r1
 800524c:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800524e:	f7fe feff 	bl	8004050 <HAL_GetTick>
 8005252:	0003      	movs	r3, r0
 8005254:	61bb      	str	r3, [r7, #24]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8005256:	e008      	b.n	800526a <HAL_RCC_OscConfig+0x416>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005258:	f7fe fefa 	bl	8004050 <HAL_GetTick>
 800525c:	0002      	movs	r2, r0
 800525e:	69bb      	ldr	r3, [r7, #24]
 8005260:	1ad3      	subs	r3, r2, r3
 8005262:	2b02      	cmp	r3, #2
 8005264:	d901      	bls.n	800526a <HAL_RCC_OscConfig+0x416>
        {
          return HAL_TIMEOUT;
 8005266:	2303      	movs	r3, #3
 8005268:	e1ad      	b.n	80055c6 <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800526a:	4b95      	ldr	r3, [pc, #596]	; (80054c0 <HAL_RCC_OscConfig+0x66c>)
 800526c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800526e:	2202      	movs	r2, #2
 8005270:	4013      	ands	r3, r2
 8005272:	d1f1      	bne.n	8005258 <HAL_RCC_OscConfig+0x404>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	2204      	movs	r2, #4
 800527a:	4013      	ands	r3, r2
 800527c:	d100      	bne.n	8005280 <HAL_RCC_OscConfig+0x42c>
 800527e:	e0ae      	b.n	80053de <HAL_RCC_OscConfig+0x58a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005280:	2027      	movs	r0, #39	; 0x27
 8005282:	183b      	adds	r3, r7, r0
 8005284:	2200      	movs	r2, #0
 8005286:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005288:	4b8d      	ldr	r3, [pc, #564]	; (80054c0 <HAL_RCC_OscConfig+0x66c>)
 800528a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800528c:	2380      	movs	r3, #128	; 0x80
 800528e:	055b      	lsls	r3, r3, #21
 8005290:	4013      	ands	r3, r2
 8005292:	d109      	bne.n	80052a8 <HAL_RCC_OscConfig+0x454>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005294:	4b8a      	ldr	r3, [pc, #552]	; (80054c0 <HAL_RCC_OscConfig+0x66c>)
 8005296:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005298:	4b89      	ldr	r3, [pc, #548]	; (80054c0 <HAL_RCC_OscConfig+0x66c>)
 800529a:	2180      	movs	r1, #128	; 0x80
 800529c:	0549      	lsls	r1, r1, #21
 800529e:	430a      	orrs	r2, r1
 80052a0:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 80052a2:	183b      	adds	r3, r7, r0
 80052a4:	2201      	movs	r2, #1
 80052a6:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80052a8:	4b87      	ldr	r3, [pc, #540]	; (80054c8 <HAL_RCC_OscConfig+0x674>)
 80052aa:	681a      	ldr	r2, [r3, #0]
 80052ac:	2380      	movs	r3, #128	; 0x80
 80052ae:	005b      	lsls	r3, r3, #1
 80052b0:	4013      	ands	r3, r2
 80052b2:	d11a      	bne.n	80052ea <HAL_RCC_OscConfig+0x496>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80052b4:	4b84      	ldr	r3, [pc, #528]	; (80054c8 <HAL_RCC_OscConfig+0x674>)
 80052b6:	681a      	ldr	r2, [r3, #0]
 80052b8:	4b83      	ldr	r3, [pc, #524]	; (80054c8 <HAL_RCC_OscConfig+0x674>)
 80052ba:	2180      	movs	r1, #128	; 0x80
 80052bc:	0049      	lsls	r1, r1, #1
 80052be:	430a      	orrs	r2, r1
 80052c0:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80052c2:	f7fe fec5 	bl	8004050 <HAL_GetTick>
 80052c6:	0003      	movs	r3, r0
 80052c8:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80052ca:	e008      	b.n	80052de <HAL_RCC_OscConfig+0x48a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80052cc:	f7fe fec0 	bl	8004050 <HAL_GetTick>
 80052d0:	0002      	movs	r2, r0
 80052d2:	69bb      	ldr	r3, [r7, #24]
 80052d4:	1ad3      	subs	r3, r2, r3
 80052d6:	2b64      	cmp	r3, #100	; 0x64
 80052d8:	d901      	bls.n	80052de <HAL_RCC_OscConfig+0x48a>
        {
          return HAL_TIMEOUT;
 80052da:	2303      	movs	r3, #3
 80052dc:	e173      	b.n	80055c6 <HAL_RCC_OscConfig+0x772>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80052de:	4b7a      	ldr	r3, [pc, #488]	; (80054c8 <HAL_RCC_OscConfig+0x674>)
 80052e0:	681a      	ldr	r2, [r3, #0]
 80052e2:	2380      	movs	r3, #128	; 0x80
 80052e4:	005b      	lsls	r3, r3, #1
 80052e6:	4013      	ands	r3, r2
 80052e8:	d0f0      	beq.n	80052cc <HAL_RCC_OscConfig+0x478>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	689a      	ldr	r2, [r3, #8]
 80052ee:	2380      	movs	r3, #128	; 0x80
 80052f0:	005b      	lsls	r3, r3, #1
 80052f2:	429a      	cmp	r2, r3
 80052f4:	d107      	bne.n	8005306 <HAL_RCC_OscConfig+0x4b2>
 80052f6:	4b72      	ldr	r3, [pc, #456]	; (80054c0 <HAL_RCC_OscConfig+0x66c>)
 80052f8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80052fa:	4b71      	ldr	r3, [pc, #452]	; (80054c0 <HAL_RCC_OscConfig+0x66c>)
 80052fc:	2180      	movs	r1, #128	; 0x80
 80052fe:	0049      	lsls	r1, r1, #1
 8005300:	430a      	orrs	r2, r1
 8005302:	651a      	str	r2, [r3, #80]	; 0x50
 8005304:	e031      	b.n	800536a <HAL_RCC_OscConfig+0x516>
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	689b      	ldr	r3, [r3, #8]
 800530a:	2b00      	cmp	r3, #0
 800530c:	d10c      	bne.n	8005328 <HAL_RCC_OscConfig+0x4d4>
 800530e:	4b6c      	ldr	r3, [pc, #432]	; (80054c0 <HAL_RCC_OscConfig+0x66c>)
 8005310:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005312:	4b6b      	ldr	r3, [pc, #428]	; (80054c0 <HAL_RCC_OscConfig+0x66c>)
 8005314:	496b      	ldr	r1, [pc, #428]	; (80054c4 <HAL_RCC_OscConfig+0x670>)
 8005316:	400a      	ands	r2, r1
 8005318:	651a      	str	r2, [r3, #80]	; 0x50
 800531a:	4b69      	ldr	r3, [pc, #420]	; (80054c0 <HAL_RCC_OscConfig+0x66c>)
 800531c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800531e:	4b68      	ldr	r3, [pc, #416]	; (80054c0 <HAL_RCC_OscConfig+0x66c>)
 8005320:	496a      	ldr	r1, [pc, #424]	; (80054cc <HAL_RCC_OscConfig+0x678>)
 8005322:	400a      	ands	r2, r1
 8005324:	651a      	str	r2, [r3, #80]	; 0x50
 8005326:	e020      	b.n	800536a <HAL_RCC_OscConfig+0x516>
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	689a      	ldr	r2, [r3, #8]
 800532c:	23a0      	movs	r3, #160	; 0xa0
 800532e:	00db      	lsls	r3, r3, #3
 8005330:	429a      	cmp	r2, r3
 8005332:	d10e      	bne.n	8005352 <HAL_RCC_OscConfig+0x4fe>
 8005334:	4b62      	ldr	r3, [pc, #392]	; (80054c0 <HAL_RCC_OscConfig+0x66c>)
 8005336:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005338:	4b61      	ldr	r3, [pc, #388]	; (80054c0 <HAL_RCC_OscConfig+0x66c>)
 800533a:	2180      	movs	r1, #128	; 0x80
 800533c:	00c9      	lsls	r1, r1, #3
 800533e:	430a      	orrs	r2, r1
 8005340:	651a      	str	r2, [r3, #80]	; 0x50
 8005342:	4b5f      	ldr	r3, [pc, #380]	; (80054c0 <HAL_RCC_OscConfig+0x66c>)
 8005344:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005346:	4b5e      	ldr	r3, [pc, #376]	; (80054c0 <HAL_RCC_OscConfig+0x66c>)
 8005348:	2180      	movs	r1, #128	; 0x80
 800534a:	0049      	lsls	r1, r1, #1
 800534c:	430a      	orrs	r2, r1
 800534e:	651a      	str	r2, [r3, #80]	; 0x50
 8005350:	e00b      	b.n	800536a <HAL_RCC_OscConfig+0x516>
 8005352:	4b5b      	ldr	r3, [pc, #364]	; (80054c0 <HAL_RCC_OscConfig+0x66c>)
 8005354:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005356:	4b5a      	ldr	r3, [pc, #360]	; (80054c0 <HAL_RCC_OscConfig+0x66c>)
 8005358:	495a      	ldr	r1, [pc, #360]	; (80054c4 <HAL_RCC_OscConfig+0x670>)
 800535a:	400a      	ands	r2, r1
 800535c:	651a      	str	r2, [r3, #80]	; 0x50
 800535e:	4b58      	ldr	r3, [pc, #352]	; (80054c0 <HAL_RCC_OscConfig+0x66c>)
 8005360:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005362:	4b57      	ldr	r3, [pc, #348]	; (80054c0 <HAL_RCC_OscConfig+0x66c>)
 8005364:	4959      	ldr	r1, [pc, #356]	; (80054cc <HAL_RCC_OscConfig+0x678>)
 8005366:	400a      	ands	r2, r1
 8005368:	651a      	str	r2, [r3, #80]	; 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	689b      	ldr	r3, [r3, #8]
 800536e:	2b00      	cmp	r3, #0
 8005370:	d015      	beq.n	800539e <HAL_RCC_OscConfig+0x54a>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005372:	f7fe fe6d 	bl	8004050 <HAL_GetTick>
 8005376:	0003      	movs	r3, r0
 8005378:	61bb      	str	r3, [r7, #24]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800537a:	e009      	b.n	8005390 <HAL_RCC_OscConfig+0x53c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800537c:	f7fe fe68 	bl	8004050 <HAL_GetTick>
 8005380:	0002      	movs	r2, r0
 8005382:	69bb      	ldr	r3, [r7, #24]
 8005384:	1ad3      	subs	r3, r2, r3
 8005386:	4a52      	ldr	r2, [pc, #328]	; (80054d0 <HAL_RCC_OscConfig+0x67c>)
 8005388:	4293      	cmp	r3, r2
 800538a:	d901      	bls.n	8005390 <HAL_RCC_OscConfig+0x53c>
        {
          return HAL_TIMEOUT;
 800538c:	2303      	movs	r3, #3
 800538e:	e11a      	b.n	80055c6 <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005390:	4b4b      	ldr	r3, [pc, #300]	; (80054c0 <HAL_RCC_OscConfig+0x66c>)
 8005392:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005394:	2380      	movs	r3, #128	; 0x80
 8005396:	009b      	lsls	r3, r3, #2
 8005398:	4013      	ands	r3, r2
 800539a:	d0ef      	beq.n	800537c <HAL_RCC_OscConfig+0x528>
 800539c:	e014      	b.n	80053c8 <HAL_RCC_OscConfig+0x574>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800539e:	f7fe fe57 	bl	8004050 <HAL_GetTick>
 80053a2:	0003      	movs	r3, r0
 80053a4:	61bb      	str	r3, [r7, #24]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80053a6:	e009      	b.n	80053bc <HAL_RCC_OscConfig+0x568>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80053a8:	f7fe fe52 	bl	8004050 <HAL_GetTick>
 80053ac:	0002      	movs	r2, r0
 80053ae:	69bb      	ldr	r3, [r7, #24]
 80053b0:	1ad3      	subs	r3, r2, r3
 80053b2:	4a47      	ldr	r2, [pc, #284]	; (80054d0 <HAL_RCC_OscConfig+0x67c>)
 80053b4:	4293      	cmp	r3, r2
 80053b6:	d901      	bls.n	80053bc <HAL_RCC_OscConfig+0x568>
        {
          return HAL_TIMEOUT;
 80053b8:	2303      	movs	r3, #3
 80053ba:	e104      	b.n	80055c6 <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80053bc:	4b40      	ldr	r3, [pc, #256]	; (80054c0 <HAL_RCC_OscConfig+0x66c>)
 80053be:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80053c0:	2380      	movs	r3, #128	; 0x80
 80053c2:	009b      	lsls	r3, r3, #2
 80053c4:	4013      	ands	r3, r2
 80053c6:	d1ef      	bne.n	80053a8 <HAL_RCC_OscConfig+0x554>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80053c8:	2327      	movs	r3, #39	; 0x27
 80053ca:	18fb      	adds	r3, r7, r3
 80053cc:	781b      	ldrb	r3, [r3, #0]
 80053ce:	2b01      	cmp	r3, #1
 80053d0:	d105      	bne.n	80053de <HAL_RCC_OscConfig+0x58a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80053d2:	4b3b      	ldr	r3, [pc, #236]	; (80054c0 <HAL_RCC_OscConfig+0x66c>)
 80053d4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80053d6:	4b3a      	ldr	r3, [pc, #232]	; (80054c0 <HAL_RCC_OscConfig+0x66c>)
 80053d8:	493e      	ldr	r1, [pc, #248]	; (80054d4 <HAL_RCC_OscConfig+0x680>)
 80053da:	400a      	ands	r2, r1
 80053dc:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	2220      	movs	r2, #32
 80053e4:	4013      	ands	r3, r2
 80053e6:	d049      	beq.n	800547c <HAL_RCC_OscConfig+0x628>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	699b      	ldr	r3, [r3, #24]
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	d026      	beq.n	800543e <HAL_RCC_OscConfig+0x5ea>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 80053f0:	4b33      	ldr	r3, [pc, #204]	; (80054c0 <HAL_RCC_OscConfig+0x66c>)
 80053f2:	689a      	ldr	r2, [r3, #8]
 80053f4:	4b32      	ldr	r3, [pc, #200]	; (80054c0 <HAL_RCC_OscConfig+0x66c>)
 80053f6:	2101      	movs	r1, #1
 80053f8:	430a      	orrs	r2, r1
 80053fa:	609a      	str	r2, [r3, #8]
 80053fc:	4b30      	ldr	r3, [pc, #192]	; (80054c0 <HAL_RCC_OscConfig+0x66c>)
 80053fe:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005400:	4b2f      	ldr	r3, [pc, #188]	; (80054c0 <HAL_RCC_OscConfig+0x66c>)
 8005402:	2101      	movs	r1, #1
 8005404:	430a      	orrs	r2, r1
 8005406:	635a      	str	r2, [r3, #52]	; 0x34
 8005408:	4b33      	ldr	r3, [pc, #204]	; (80054d8 <HAL_RCC_OscConfig+0x684>)
 800540a:	6a1a      	ldr	r2, [r3, #32]
 800540c:	4b32      	ldr	r3, [pc, #200]	; (80054d8 <HAL_RCC_OscConfig+0x684>)
 800540e:	2180      	movs	r1, #128	; 0x80
 8005410:	0189      	lsls	r1, r1, #6
 8005412:	430a      	orrs	r2, r1
 8005414:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005416:	f7fe fe1b 	bl	8004050 <HAL_GetTick>
 800541a:	0003      	movs	r3, r0
 800541c:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800541e:	e008      	b.n	8005432 <HAL_RCC_OscConfig+0x5de>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005420:	f7fe fe16 	bl	8004050 <HAL_GetTick>
 8005424:	0002      	movs	r2, r0
 8005426:	69bb      	ldr	r3, [r7, #24]
 8005428:	1ad3      	subs	r3, r2, r3
 800542a:	2b02      	cmp	r3, #2
 800542c:	d901      	bls.n	8005432 <HAL_RCC_OscConfig+0x5de>
          {
            return HAL_TIMEOUT;
 800542e:	2303      	movs	r3, #3
 8005430:	e0c9      	b.n	80055c6 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8005432:	4b23      	ldr	r3, [pc, #140]	; (80054c0 <HAL_RCC_OscConfig+0x66c>)
 8005434:	689b      	ldr	r3, [r3, #8]
 8005436:	2202      	movs	r2, #2
 8005438:	4013      	ands	r3, r2
 800543a:	d0f1      	beq.n	8005420 <HAL_RCC_OscConfig+0x5cc>
 800543c:	e01e      	b.n	800547c <HAL_RCC_OscConfig+0x628>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 800543e:	4b20      	ldr	r3, [pc, #128]	; (80054c0 <HAL_RCC_OscConfig+0x66c>)
 8005440:	689a      	ldr	r2, [r3, #8]
 8005442:	4b1f      	ldr	r3, [pc, #124]	; (80054c0 <HAL_RCC_OscConfig+0x66c>)
 8005444:	2101      	movs	r1, #1
 8005446:	438a      	bics	r2, r1
 8005448:	609a      	str	r2, [r3, #8]
 800544a:	4b23      	ldr	r3, [pc, #140]	; (80054d8 <HAL_RCC_OscConfig+0x684>)
 800544c:	6a1a      	ldr	r2, [r3, #32]
 800544e:	4b22      	ldr	r3, [pc, #136]	; (80054d8 <HAL_RCC_OscConfig+0x684>)
 8005450:	4922      	ldr	r1, [pc, #136]	; (80054dc <HAL_RCC_OscConfig+0x688>)
 8005452:	400a      	ands	r2, r1
 8005454:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005456:	f7fe fdfb 	bl	8004050 <HAL_GetTick>
 800545a:	0003      	movs	r3, r0
 800545c:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800545e:	e008      	b.n	8005472 <HAL_RCC_OscConfig+0x61e>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005460:	f7fe fdf6 	bl	8004050 <HAL_GetTick>
 8005464:	0002      	movs	r2, r0
 8005466:	69bb      	ldr	r3, [r7, #24]
 8005468:	1ad3      	subs	r3, r2, r3
 800546a:	2b02      	cmp	r3, #2
 800546c:	d901      	bls.n	8005472 <HAL_RCC_OscConfig+0x61e>
          {
            return HAL_TIMEOUT;
 800546e:	2303      	movs	r3, #3
 8005470:	e0a9      	b.n	80055c6 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8005472:	4b13      	ldr	r3, [pc, #76]	; (80054c0 <HAL_RCC_OscConfig+0x66c>)
 8005474:	689b      	ldr	r3, [r3, #8]
 8005476:	2202      	movs	r2, #2
 8005478:	4013      	ands	r3, r2
 800547a:	d1f1      	bne.n	8005460 <HAL_RCC_OscConfig+0x60c>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005480:	2b00      	cmp	r3, #0
 8005482:	d100      	bne.n	8005486 <HAL_RCC_OscConfig+0x632>
 8005484:	e09e      	b.n	80055c4 <HAL_RCC_OscConfig+0x770>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005486:	6a3b      	ldr	r3, [r7, #32]
 8005488:	2b0c      	cmp	r3, #12
 800548a:	d100      	bne.n	800548e <HAL_RCC_OscConfig+0x63a>
 800548c:	e077      	b.n	800557e <HAL_RCC_OscConfig+0x72a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005492:	2b02      	cmp	r3, #2
 8005494:	d158      	bne.n	8005548 <HAL_RCC_OscConfig+0x6f4>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005496:	4b0a      	ldr	r3, [pc, #40]	; (80054c0 <HAL_RCC_OscConfig+0x66c>)
 8005498:	681a      	ldr	r2, [r3, #0]
 800549a:	4b09      	ldr	r3, [pc, #36]	; (80054c0 <HAL_RCC_OscConfig+0x66c>)
 800549c:	4910      	ldr	r1, [pc, #64]	; (80054e0 <HAL_RCC_OscConfig+0x68c>)
 800549e:	400a      	ands	r2, r1
 80054a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80054a2:	f7fe fdd5 	bl	8004050 <HAL_GetTick>
 80054a6:	0003      	movs	r3, r0
 80054a8:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80054aa:	e01b      	b.n	80054e4 <HAL_RCC_OscConfig+0x690>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80054ac:	f7fe fdd0 	bl	8004050 <HAL_GetTick>
 80054b0:	0002      	movs	r2, r0
 80054b2:	69bb      	ldr	r3, [r7, #24]
 80054b4:	1ad3      	subs	r3, r2, r3
 80054b6:	2b02      	cmp	r3, #2
 80054b8:	d914      	bls.n	80054e4 <HAL_RCC_OscConfig+0x690>
          {
            return HAL_TIMEOUT;
 80054ba:	2303      	movs	r3, #3
 80054bc:	e083      	b.n	80055c6 <HAL_RCC_OscConfig+0x772>
 80054be:	46c0      	nop			; (mov r8, r8)
 80054c0:	40021000 	.word	0x40021000
 80054c4:	fffffeff 	.word	0xfffffeff
 80054c8:	40007000 	.word	0x40007000
 80054cc:	fffffbff 	.word	0xfffffbff
 80054d0:	00001388 	.word	0x00001388
 80054d4:	efffffff 	.word	0xefffffff
 80054d8:	40010000 	.word	0x40010000
 80054dc:	ffffdfff 	.word	0xffffdfff
 80054e0:	feffffff 	.word	0xfeffffff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80054e4:	4b3a      	ldr	r3, [pc, #232]	; (80055d0 <HAL_RCC_OscConfig+0x77c>)
 80054e6:	681a      	ldr	r2, [r3, #0]
 80054e8:	2380      	movs	r3, #128	; 0x80
 80054ea:	049b      	lsls	r3, r3, #18
 80054ec:	4013      	ands	r3, r2
 80054ee:	d1dd      	bne.n	80054ac <HAL_RCC_OscConfig+0x658>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80054f0:	4b37      	ldr	r3, [pc, #220]	; (80055d0 <HAL_RCC_OscConfig+0x77c>)
 80054f2:	68db      	ldr	r3, [r3, #12]
 80054f4:	4a37      	ldr	r2, [pc, #220]	; (80055d4 <HAL_RCC_OscConfig+0x780>)
 80054f6:	4013      	ands	r3, r2
 80054f8:	0019      	movs	r1, r3
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005502:	431a      	orrs	r2, r3
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005508:	431a      	orrs	r2, r3
 800550a:	4b31      	ldr	r3, [pc, #196]	; (80055d0 <HAL_RCC_OscConfig+0x77c>)
 800550c:	430a      	orrs	r2, r1
 800550e:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005510:	4b2f      	ldr	r3, [pc, #188]	; (80055d0 <HAL_RCC_OscConfig+0x77c>)
 8005512:	681a      	ldr	r2, [r3, #0]
 8005514:	4b2e      	ldr	r3, [pc, #184]	; (80055d0 <HAL_RCC_OscConfig+0x77c>)
 8005516:	2180      	movs	r1, #128	; 0x80
 8005518:	0449      	lsls	r1, r1, #17
 800551a:	430a      	orrs	r2, r1
 800551c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800551e:	f7fe fd97 	bl	8004050 <HAL_GetTick>
 8005522:	0003      	movs	r3, r0
 8005524:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8005526:	e008      	b.n	800553a <HAL_RCC_OscConfig+0x6e6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005528:	f7fe fd92 	bl	8004050 <HAL_GetTick>
 800552c:	0002      	movs	r2, r0
 800552e:	69bb      	ldr	r3, [r7, #24]
 8005530:	1ad3      	subs	r3, r2, r3
 8005532:	2b02      	cmp	r3, #2
 8005534:	d901      	bls.n	800553a <HAL_RCC_OscConfig+0x6e6>
          {
            return HAL_TIMEOUT;
 8005536:	2303      	movs	r3, #3
 8005538:	e045      	b.n	80055c6 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 800553a:	4b25      	ldr	r3, [pc, #148]	; (80055d0 <HAL_RCC_OscConfig+0x77c>)
 800553c:	681a      	ldr	r2, [r3, #0]
 800553e:	2380      	movs	r3, #128	; 0x80
 8005540:	049b      	lsls	r3, r3, #18
 8005542:	4013      	ands	r3, r2
 8005544:	d0f0      	beq.n	8005528 <HAL_RCC_OscConfig+0x6d4>
 8005546:	e03d      	b.n	80055c4 <HAL_RCC_OscConfig+0x770>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005548:	4b21      	ldr	r3, [pc, #132]	; (80055d0 <HAL_RCC_OscConfig+0x77c>)
 800554a:	681a      	ldr	r2, [r3, #0]
 800554c:	4b20      	ldr	r3, [pc, #128]	; (80055d0 <HAL_RCC_OscConfig+0x77c>)
 800554e:	4922      	ldr	r1, [pc, #136]	; (80055d8 <HAL_RCC_OscConfig+0x784>)
 8005550:	400a      	ands	r2, r1
 8005552:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005554:	f7fe fd7c 	bl	8004050 <HAL_GetTick>
 8005558:	0003      	movs	r3, r0
 800555a:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800555c:	e008      	b.n	8005570 <HAL_RCC_OscConfig+0x71c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800555e:	f7fe fd77 	bl	8004050 <HAL_GetTick>
 8005562:	0002      	movs	r2, r0
 8005564:	69bb      	ldr	r3, [r7, #24]
 8005566:	1ad3      	subs	r3, r2, r3
 8005568:	2b02      	cmp	r3, #2
 800556a:	d901      	bls.n	8005570 <HAL_RCC_OscConfig+0x71c>
          {
            return HAL_TIMEOUT;
 800556c:	2303      	movs	r3, #3
 800556e:	e02a      	b.n	80055c6 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8005570:	4b17      	ldr	r3, [pc, #92]	; (80055d0 <HAL_RCC_OscConfig+0x77c>)
 8005572:	681a      	ldr	r2, [r3, #0]
 8005574:	2380      	movs	r3, #128	; 0x80
 8005576:	049b      	lsls	r3, r3, #18
 8005578:	4013      	ands	r3, r2
 800557a:	d1f0      	bne.n	800555e <HAL_RCC_OscConfig+0x70a>
 800557c:	e022      	b.n	80055c4 <HAL_RCC_OscConfig+0x770>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005582:	2b01      	cmp	r3, #1
 8005584:	d101      	bne.n	800558a <HAL_RCC_OscConfig+0x736>
      {
        return HAL_ERROR;
 8005586:	2301      	movs	r3, #1
 8005588:	e01d      	b.n	80055c6 <HAL_RCC_OscConfig+0x772>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800558a:	4b11      	ldr	r3, [pc, #68]	; (80055d0 <HAL_RCC_OscConfig+0x77c>)
 800558c:	68db      	ldr	r3, [r3, #12]
 800558e:	61fb      	str	r3, [r7, #28]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005590:	69fa      	ldr	r2, [r7, #28]
 8005592:	2380      	movs	r3, #128	; 0x80
 8005594:	025b      	lsls	r3, r3, #9
 8005596:	401a      	ands	r2, r3
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800559c:	429a      	cmp	r2, r3
 800559e:	d10f      	bne.n	80055c0 <HAL_RCC_OscConfig+0x76c>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80055a0:	69fa      	ldr	r2, [r7, #28]
 80055a2:	23f0      	movs	r3, #240	; 0xf0
 80055a4:	039b      	lsls	r3, r3, #14
 80055a6:	401a      	ands	r2, r3
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80055ac:	429a      	cmp	r2, r3
 80055ae:	d107      	bne.n	80055c0 <HAL_RCC_OscConfig+0x76c>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 80055b0:	69fa      	ldr	r2, [r7, #28]
 80055b2:	23c0      	movs	r3, #192	; 0xc0
 80055b4:	041b      	lsls	r3, r3, #16
 80055b6:	401a      	ands	r2, r3
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80055bc:	429a      	cmp	r2, r3
 80055be:	d001      	beq.n	80055c4 <HAL_RCC_OscConfig+0x770>
        {
          return HAL_ERROR;
 80055c0:	2301      	movs	r3, #1
 80055c2:	e000      	b.n	80055c6 <HAL_RCC_OscConfig+0x772>
        }
      }
    }
  }
  return HAL_OK;
 80055c4:	2300      	movs	r3, #0
}
 80055c6:	0018      	movs	r0, r3
 80055c8:	46bd      	mov	sp, r7
 80055ca:	b00a      	add	sp, #40	; 0x28
 80055cc:	bdb0      	pop	{r4, r5, r7, pc}
 80055ce:	46c0      	nop			; (mov r8, r8)
 80055d0:	40021000 	.word	0x40021000
 80055d4:	ff02ffff 	.word	0xff02ffff
 80055d8:	feffffff 	.word	0xfeffffff

080055dc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80055dc:	b5b0      	push	{r4, r5, r7, lr}
 80055de:	b084      	sub	sp, #16
 80055e0:	af00      	add	r7, sp, #0
 80055e2:	6078      	str	r0, [r7, #4]
 80055e4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	d101      	bne.n	80055f0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80055ec:	2301      	movs	r3, #1
 80055ee:	e128      	b.n	8005842 <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80055f0:	4b96      	ldr	r3, [pc, #600]	; (800584c <HAL_RCC_ClockConfig+0x270>)
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	2201      	movs	r2, #1
 80055f6:	4013      	ands	r3, r2
 80055f8:	683a      	ldr	r2, [r7, #0]
 80055fa:	429a      	cmp	r2, r3
 80055fc:	d91e      	bls.n	800563c <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80055fe:	4b93      	ldr	r3, [pc, #588]	; (800584c <HAL_RCC_ClockConfig+0x270>)
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	2201      	movs	r2, #1
 8005604:	4393      	bics	r3, r2
 8005606:	0019      	movs	r1, r3
 8005608:	4b90      	ldr	r3, [pc, #576]	; (800584c <HAL_RCC_ClockConfig+0x270>)
 800560a:	683a      	ldr	r2, [r7, #0]
 800560c:	430a      	orrs	r2, r1
 800560e:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8005610:	f7fe fd1e 	bl	8004050 <HAL_GetTick>
 8005614:	0003      	movs	r3, r0
 8005616:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005618:	e009      	b.n	800562e <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800561a:	f7fe fd19 	bl	8004050 <HAL_GetTick>
 800561e:	0002      	movs	r2, r0
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	1ad3      	subs	r3, r2, r3
 8005624:	4a8a      	ldr	r2, [pc, #552]	; (8005850 <HAL_RCC_ClockConfig+0x274>)
 8005626:	4293      	cmp	r3, r2
 8005628:	d901      	bls.n	800562e <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 800562a:	2303      	movs	r3, #3
 800562c:	e109      	b.n	8005842 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800562e:	4b87      	ldr	r3, [pc, #540]	; (800584c <HAL_RCC_ClockConfig+0x270>)
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	2201      	movs	r2, #1
 8005634:	4013      	ands	r3, r2
 8005636:	683a      	ldr	r2, [r7, #0]
 8005638:	429a      	cmp	r2, r3
 800563a:	d1ee      	bne.n	800561a <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	2202      	movs	r2, #2
 8005642:	4013      	ands	r3, r2
 8005644:	d009      	beq.n	800565a <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005646:	4b83      	ldr	r3, [pc, #524]	; (8005854 <HAL_RCC_ClockConfig+0x278>)
 8005648:	68db      	ldr	r3, [r3, #12]
 800564a:	22f0      	movs	r2, #240	; 0xf0
 800564c:	4393      	bics	r3, r2
 800564e:	0019      	movs	r1, r3
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	689a      	ldr	r2, [r3, #8]
 8005654:	4b7f      	ldr	r3, [pc, #508]	; (8005854 <HAL_RCC_ClockConfig+0x278>)
 8005656:	430a      	orrs	r2, r1
 8005658:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	2201      	movs	r2, #1
 8005660:	4013      	ands	r3, r2
 8005662:	d100      	bne.n	8005666 <HAL_RCC_ClockConfig+0x8a>
 8005664:	e089      	b.n	800577a <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	685b      	ldr	r3, [r3, #4]
 800566a:	2b02      	cmp	r3, #2
 800566c:	d107      	bne.n	800567e <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800566e:	4b79      	ldr	r3, [pc, #484]	; (8005854 <HAL_RCC_ClockConfig+0x278>)
 8005670:	681a      	ldr	r2, [r3, #0]
 8005672:	2380      	movs	r3, #128	; 0x80
 8005674:	029b      	lsls	r3, r3, #10
 8005676:	4013      	ands	r3, r2
 8005678:	d120      	bne.n	80056bc <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 800567a:	2301      	movs	r3, #1
 800567c:	e0e1      	b.n	8005842 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	685b      	ldr	r3, [r3, #4]
 8005682:	2b03      	cmp	r3, #3
 8005684:	d107      	bne.n	8005696 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005686:	4b73      	ldr	r3, [pc, #460]	; (8005854 <HAL_RCC_ClockConfig+0x278>)
 8005688:	681a      	ldr	r2, [r3, #0]
 800568a:	2380      	movs	r3, #128	; 0x80
 800568c:	049b      	lsls	r3, r3, #18
 800568e:	4013      	ands	r3, r2
 8005690:	d114      	bne.n	80056bc <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8005692:	2301      	movs	r3, #1
 8005694:	e0d5      	b.n	8005842 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	685b      	ldr	r3, [r3, #4]
 800569a:	2b01      	cmp	r3, #1
 800569c:	d106      	bne.n	80056ac <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800569e:	4b6d      	ldr	r3, [pc, #436]	; (8005854 <HAL_RCC_ClockConfig+0x278>)
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	2204      	movs	r2, #4
 80056a4:	4013      	ands	r3, r2
 80056a6:	d109      	bne.n	80056bc <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80056a8:	2301      	movs	r3, #1
 80056aa:	e0ca      	b.n	8005842 <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80056ac:	4b69      	ldr	r3, [pc, #420]	; (8005854 <HAL_RCC_ClockConfig+0x278>)
 80056ae:	681a      	ldr	r2, [r3, #0]
 80056b0:	2380      	movs	r3, #128	; 0x80
 80056b2:	009b      	lsls	r3, r3, #2
 80056b4:	4013      	ands	r3, r2
 80056b6:	d101      	bne.n	80056bc <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80056b8:	2301      	movs	r3, #1
 80056ba:	e0c2      	b.n	8005842 <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80056bc:	4b65      	ldr	r3, [pc, #404]	; (8005854 <HAL_RCC_ClockConfig+0x278>)
 80056be:	68db      	ldr	r3, [r3, #12]
 80056c0:	2203      	movs	r2, #3
 80056c2:	4393      	bics	r3, r2
 80056c4:	0019      	movs	r1, r3
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	685a      	ldr	r2, [r3, #4]
 80056ca:	4b62      	ldr	r3, [pc, #392]	; (8005854 <HAL_RCC_ClockConfig+0x278>)
 80056cc:	430a      	orrs	r2, r1
 80056ce:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80056d0:	f7fe fcbe 	bl	8004050 <HAL_GetTick>
 80056d4:	0003      	movs	r3, r0
 80056d6:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	685b      	ldr	r3, [r3, #4]
 80056dc:	2b02      	cmp	r3, #2
 80056de:	d111      	bne.n	8005704 <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80056e0:	e009      	b.n	80056f6 <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80056e2:	f7fe fcb5 	bl	8004050 <HAL_GetTick>
 80056e6:	0002      	movs	r2, r0
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	1ad3      	subs	r3, r2, r3
 80056ec:	4a58      	ldr	r2, [pc, #352]	; (8005850 <HAL_RCC_ClockConfig+0x274>)
 80056ee:	4293      	cmp	r3, r2
 80056f0:	d901      	bls.n	80056f6 <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 80056f2:	2303      	movs	r3, #3
 80056f4:	e0a5      	b.n	8005842 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80056f6:	4b57      	ldr	r3, [pc, #348]	; (8005854 <HAL_RCC_ClockConfig+0x278>)
 80056f8:	68db      	ldr	r3, [r3, #12]
 80056fa:	220c      	movs	r2, #12
 80056fc:	4013      	ands	r3, r2
 80056fe:	2b08      	cmp	r3, #8
 8005700:	d1ef      	bne.n	80056e2 <HAL_RCC_ClockConfig+0x106>
 8005702:	e03a      	b.n	800577a <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	685b      	ldr	r3, [r3, #4]
 8005708:	2b03      	cmp	r3, #3
 800570a:	d111      	bne.n	8005730 <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800570c:	e009      	b.n	8005722 <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800570e:	f7fe fc9f 	bl	8004050 <HAL_GetTick>
 8005712:	0002      	movs	r2, r0
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	1ad3      	subs	r3, r2, r3
 8005718:	4a4d      	ldr	r2, [pc, #308]	; (8005850 <HAL_RCC_ClockConfig+0x274>)
 800571a:	4293      	cmp	r3, r2
 800571c:	d901      	bls.n	8005722 <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 800571e:	2303      	movs	r3, #3
 8005720:	e08f      	b.n	8005842 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005722:	4b4c      	ldr	r3, [pc, #304]	; (8005854 <HAL_RCC_ClockConfig+0x278>)
 8005724:	68db      	ldr	r3, [r3, #12]
 8005726:	220c      	movs	r2, #12
 8005728:	4013      	ands	r3, r2
 800572a:	2b0c      	cmp	r3, #12
 800572c:	d1ef      	bne.n	800570e <HAL_RCC_ClockConfig+0x132>
 800572e:	e024      	b.n	800577a <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	685b      	ldr	r3, [r3, #4]
 8005734:	2b01      	cmp	r3, #1
 8005736:	d11b      	bne.n	8005770 <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8005738:	e009      	b.n	800574e <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800573a:	f7fe fc89 	bl	8004050 <HAL_GetTick>
 800573e:	0002      	movs	r2, r0
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	1ad3      	subs	r3, r2, r3
 8005744:	4a42      	ldr	r2, [pc, #264]	; (8005850 <HAL_RCC_ClockConfig+0x274>)
 8005746:	4293      	cmp	r3, r2
 8005748:	d901      	bls.n	800574e <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 800574a:	2303      	movs	r3, #3
 800574c:	e079      	b.n	8005842 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800574e:	4b41      	ldr	r3, [pc, #260]	; (8005854 <HAL_RCC_ClockConfig+0x278>)
 8005750:	68db      	ldr	r3, [r3, #12]
 8005752:	220c      	movs	r2, #12
 8005754:	4013      	ands	r3, r2
 8005756:	2b04      	cmp	r3, #4
 8005758:	d1ef      	bne.n	800573a <HAL_RCC_ClockConfig+0x15e>
 800575a:	e00e      	b.n	800577a <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800575c:	f7fe fc78 	bl	8004050 <HAL_GetTick>
 8005760:	0002      	movs	r2, r0
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	1ad3      	subs	r3, r2, r3
 8005766:	4a3a      	ldr	r2, [pc, #232]	; (8005850 <HAL_RCC_ClockConfig+0x274>)
 8005768:	4293      	cmp	r3, r2
 800576a:	d901      	bls.n	8005770 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 800576c:	2303      	movs	r3, #3
 800576e:	e068      	b.n	8005842 <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8005770:	4b38      	ldr	r3, [pc, #224]	; (8005854 <HAL_RCC_ClockConfig+0x278>)
 8005772:	68db      	ldr	r3, [r3, #12]
 8005774:	220c      	movs	r2, #12
 8005776:	4013      	ands	r3, r2
 8005778:	d1f0      	bne.n	800575c <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800577a:	4b34      	ldr	r3, [pc, #208]	; (800584c <HAL_RCC_ClockConfig+0x270>)
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	2201      	movs	r2, #1
 8005780:	4013      	ands	r3, r2
 8005782:	683a      	ldr	r2, [r7, #0]
 8005784:	429a      	cmp	r2, r3
 8005786:	d21e      	bcs.n	80057c6 <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005788:	4b30      	ldr	r3, [pc, #192]	; (800584c <HAL_RCC_ClockConfig+0x270>)
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	2201      	movs	r2, #1
 800578e:	4393      	bics	r3, r2
 8005790:	0019      	movs	r1, r3
 8005792:	4b2e      	ldr	r3, [pc, #184]	; (800584c <HAL_RCC_ClockConfig+0x270>)
 8005794:	683a      	ldr	r2, [r7, #0]
 8005796:	430a      	orrs	r2, r1
 8005798:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800579a:	f7fe fc59 	bl	8004050 <HAL_GetTick>
 800579e:	0003      	movs	r3, r0
 80057a0:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80057a2:	e009      	b.n	80057b8 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80057a4:	f7fe fc54 	bl	8004050 <HAL_GetTick>
 80057a8:	0002      	movs	r2, r0
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	1ad3      	subs	r3, r2, r3
 80057ae:	4a28      	ldr	r2, [pc, #160]	; (8005850 <HAL_RCC_ClockConfig+0x274>)
 80057b0:	4293      	cmp	r3, r2
 80057b2:	d901      	bls.n	80057b8 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 80057b4:	2303      	movs	r3, #3
 80057b6:	e044      	b.n	8005842 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80057b8:	4b24      	ldr	r3, [pc, #144]	; (800584c <HAL_RCC_ClockConfig+0x270>)
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	2201      	movs	r2, #1
 80057be:	4013      	ands	r3, r2
 80057c0:	683a      	ldr	r2, [r7, #0]
 80057c2:	429a      	cmp	r2, r3
 80057c4:	d1ee      	bne.n	80057a4 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	2204      	movs	r2, #4
 80057cc:	4013      	ands	r3, r2
 80057ce:	d009      	beq.n	80057e4 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80057d0:	4b20      	ldr	r3, [pc, #128]	; (8005854 <HAL_RCC_ClockConfig+0x278>)
 80057d2:	68db      	ldr	r3, [r3, #12]
 80057d4:	4a20      	ldr	r2, [pc, #128]	; (8005858 <HAL_RCC_ClockConfig+0x27c>)
 80057d6:	4013      	ands	r3, r2
 80057d8:	0019      	movs	r1, r3
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	68da      	ldr	r2, [r3, #12]
 80057de:	4b1d      	ldr	r3, [pc, #116]	; (8005854 <HAL_RCC_ClockConfig+0x278>)
 80057e0:	430a      	orrs	r2, r1
 80057e2:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	2208      	movs	r2, #8
 80057ea:	4013      	ands	r3, r2
 80057ec:	d00a      	beq.n	8005804 <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80057ee:	4b19      	ldr	r3, [pc, #100]	; (8005854 <HAL_RCC_ClockConfig+0x278>)
 80057f0:	68db      	ldr	r3, [r3, #12]
 80057f2:	4a1a      	ldr	r2, [pc, #104]	; (800585c <HAL_RCC_ClockConfig+0x280>)
 80057f4:	4013      	ands	r3, r2
 80057f6:	0019      	movs	r1, r3
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	691b      	ldr	r3, [r3, #16]
 80057fc:	00da      	lsls	r2, r3, #3
 80057fe:	4b15      	ldr	r3, [pc, #84]	; (8005854 <HAL_RCC_ClockConfig+0x278>)
 8005800:	430a      	orrs	r2, r1
 8005802:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005804:	f000 f832 	bl	800586c <HAL_RCC_GetSysClockFreq>
 8005808:	0001      	movs	r1, r0
 800580a:	4b12      	ldr	r3, [pc, #72]	; (8005854 <HAL_RCC_ClockConfig+0x278>)
 800580c:	68db      	ldr	r3, [r3, #12]
 800580e:	091b      	lsrs	r3, r3, #4
 8005810:	220f      	movs	r2, #15
 8005812:	4013      	ands	r3, r2
 8005814:	4a12      	ldr	r2, [pc, #72]	; (8005860 <HAL_RCC_ClockConfig+0x284>)
 8005816:	5cd3      	ldrb	r3, [r2, r3]
 8005818:	000a      	movs	r2, r1
 800581a:	40da      	lsrs	r2, r3
 800581c:	4b11      	ldr	r3, [pc, #68]	; (8005864 <HAL_RCC_ClockConfig+0x288>)
 800581e:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8005820:	4b11      	ldr	r3, [pc, #68]	; (8005868 <HAL_RCC_ClockConfig+0x28c>)
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	250b      	movs	r5, #11
 8005826:	197c      	adds	r4, r7, r5
 8005828:	0018      	movs	r0, r3
 800582a:	f7fe fbcb 	bl	8003fc4 <HAL_InitTick>
 800582e:	0003      	movs	r3, r0
 8005830:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 8005832:	197b      	adds	r3, r7, r5
 8005834:	781b      	ldrb	r3, [r3, #0]
 8005836:	2b00      	cmp	r3, #0
 8005838:	d002      	beq.n	8005840 <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 800583a:	197b      	adds	r3, r7, r5
 800583c:	781b      	ldrb	r3, [r3, #0]
 800583e:	e000      	b.n	8005842 <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 8005840:	2300      	movs	r3, #0
}
 8005842:	0018      	movs	r0, r3
 8005844:	46bd      	mov	sp, r7
 8005846:	b004      	add	sp, #16
 8005848:	bdb0      	pop	{r4, r5, r7, pc}
 800584a:	46c0      	nop			; (mov r8, r8)
 800584c:	40022000 	.word	0x40022000
 8005850:	00001388 	.word	0x00001388
 8005854:	40021000 	.word	0x40021000
 8005858:	fffff8ff 	.word	0xfffff8ff
 800585c:	ffffc7ff 	.word	0xffffc7ff
 8005860:	0800a4d0 	.word	0x0800a4d0
 8005864:	20000000 	.word	0x20000000
 8005868:	20000004 	.word	0x20000004

0800586c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800586c:	b5b0      	push	{r4, r5, r7, lr}
 800586e:	b08e      	sub	sp, #56	; 0x38
 8005870:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 8005872:	4b4c      	ldr	r3, [pc, #304]	; (80059a4 <HAL_RCC_GetSysClockFreq+0x138>)
 8005874:	68db      	ldr	r3, [r3, #12]
 8005876:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8005878:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800587a:	230c      	movs	r3, #12
 800587c:	4013      	ands	r3, r2
 800587e:	2b0c      	cmp	r3, #12
 8005880:	d014      	beq.n	80058ac <HAL_RCC_GetSysClockFreq+0x40>
 8005882:	d900      	bls.n	8005886 <HAL_RCC_GetSysClockFreq+0x1a>
 8005884:	e07b      	b.n	800597e <HAL_RCC_GetSysClockFreq+0x112>
 8005886:	2b04      	cmp	r3, #4
 8005888:	d002      	beq.n	8005890 <HAL_RCC_GetSysClockFreq+0x24>
 800588a:	2b08      	cmp	r3, #8
 800588c:	d00b      	beq.n	80058a6 <HAL_RCC_GetSysClockFreq+0x3a>
 800588e:	e076      	b.n	800597e <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8005890:	4b44      	ldr	r3, [pc, #272]	; (80059a4 <HAL_RCC_GetSysClockFreq+0x138>)
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	2210      	movs	r2, #16
 8005896:	4013      	ands	r3, r2
 8005898:	d002      	beq.n	80058a0 <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 800589a:	4b43      	ldr	r3, [pc, #268]	; (80059a8 <HAL_RCC_GetSysClockFreq+0x13c>)
 800589c:	633b      	str	r3, [r7, #48]	; 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 800589e:	e07c      	b.n	800599a <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 80058a0:	4b42      	ldr	r3, [pc, #264]	; (80059ac <HAL_RCC_GetSysClockFreq+0x140>)
 80058a2:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80058a4:	e079      	b.n	800599a <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80058a6:	4b42      	ldr	r3, [pc, #264]	; (80059b0 <HAL_RCC_GetSysClockFreq+0x144>)
 80058a8:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80058aa:	e076      	b.n	800599a <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 80058ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80058ae:	0c9a      	lsrs	r2, r3, #18
 80058b0:	230f      	movs	r3, #15
 80058b2:	401a      	ands	r2, r3
 80058b4:	4b3f      	ldr	r3, [pc, #252]	; (80059b4 <HAL_RCC_GetSysClockFreq+0x148>)
 80058b6:	5c9b      	ldrb	r3, [r3, r2]
 80058b8:	62bb      	str	r3, [r7, #40]	; 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 80058ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80058bc:	0d9a      	lsrs	r2, r3, #22
 80058be:	2303      	movs	r3, #3
 80058c0:	4013      	ands	r3, r2
 80058c2:	3301      	adds	r3, #1
 80058c4:	627b      	str	r3, [r7, #36]	; 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80058c6:	4b37      	ldr	r3, [pc, #220]	; (80059a4 <HAL_RCC_GetSysClockFreq+0x138>)
 80058c8:	68da      	ldr	r2, [r3, #12]
 80058ca:	2380      	movs	r3, #128	; 0x80
 80058cc:	025b      	lsls	r3, r3, #9
 80058ce:	4013      	ands	r3, r2
 80058d0:	d01a      	beq.n	8005908 <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 80058d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058d4:	61bb      	str	r3, [r7, #24]
 80058d6:	2300      	movs	r3, #0
 80058d8:	61fb      	str	r3, [r7, #28]
 80058da:	4a35      	ldr	r2, [pc, #212]	; (80059b0 <HAL_RCC_GetSysClockFreq+0x144>)
 80058dc:	2300      	movs	r3, #0
 80058de:	69b8      	ldr	r0, [r7, #24]
 80058e0:	69f9      	ldr	r1, [r7, #28]
 80058e2:	f7fa fe3b 	bl	800055c <__aeabi_lmul>
 80058e6:	0002      	movs	r2, r0
 80058e8:	000b      	movs	r3, r1
 80058ea:	0010      	movs	r0, r2
 80058ec:	0019      	movs	r1, r3
 80058ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058f0:	613b      	str	r3, [r7, #16]
 80058f2:	2300      	movs	r3, #0
 80058f4:	617b      	str	r3, [r7, #20]
 80058f6:	693a      	ldr	r2, [r7, #16]
 80058f8:	697b      	ldr	r3, [r7, #20]
 80058fa:	f7fa fe0f 	bl	800051c <__aeabi_uldivmod>
 80058fe:	0002      	movs	r2, r0
 8005900:	000b      	movs	r3, r1
 8005902:	0013      	movs	r3, r2
 8005904:	637b      	str	r3, [r7, #52]	; 0x34
 8005906:	e037      	b.n	8005978 <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8005908:	4b26      	ldr	r3, [pc, #152]	; (80059a4 <HAL_RCC_GetSysClockFreq+0x138>)
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	2210      	movs	r2, #16
 800590e:	4013      	ands	r3, r2
 8005910:	d01a      	beq.n	8005948 <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 8005912:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005914:	60bb      	str	r3, [r7, #8]
 8005916:	2300      	movs	r3, #0
 8005918:	60fb      	str	r3, [r7, #12]
 800591a:	4a23      	ldr	r2, [pc, #140]	; (80059a8 <HAL_RCC_GetSysClockFreq+0x13c>)
 800591c:	2300      	movs	r3, #0
 800591e:	68b8      	ldr	r0, [r7, #8]
 8005920:	68f9      	ldr	r1, [r7, #12]
 8005922:	f7fa fe1b 	bl	800055c <__aeabi_lmul>
 8005926:	0002      	movs	r2, r0
 8005928:	000b      	movs	r3, r1
 800592a:	0010      	movs	r0, r2
 800592c:	0019      	movs	r1, r3
 800592e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005930:	603b      	str	r3, [r7, #0]
 8005932:	2300      	movs	r3, #0
 8005934:	607b      	str	r3, [r7, #4]
 8005936:	683a      	ldr	r2, [r7, #0]
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	f7fa fdef 	bl	800051c <__aeabi_uldivmod>
 800593e:	0002      	movs	r2, r0
 8005940:	000b      	movs	r3, r1
 8005942:	0013      	movs	r3, r2
 8005944:	637b      	str	r3, [r7, #52]	; 0x34
 8005946:	e017      	b.n	8005978 <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8005948:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800594a:	0018      	movs	r0, r3
 800594c:	2300      	movs	r3, #0
 800594e:	0019      	movs	r1, r3
 8005950:	4a16      	ldr	r2, [pc, #88]	; (80059ac <HAL_RCC_GetSysClockFreq+0x140>)
 8005952:	2300      	movs	r3, #0
 8005954:	f7fa fe02 	bl	800055c <__aeabi_lmul>
 8005958:	0002      	movs	r2, r0
 800595a:	000b      	movs	r3, r1
 800595c:	0010      	movs	r0, r2
 800595e:	0019      	movs	r1, r3
 8005960:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005962:	001c      	movs	r4, r3
 8005964:	2300      	movs	r3, #0
 8005966:	001d      	movs	r5, r3
 8005968:	0022      	movs	r2, r4
 800596a:	002b      	movs	r3, r5
 800596c:	f7fa fdd6 	bl	800051c <__aeabi_uldivmod>
 8005970:	0002      	movs	r2, r0
 8005972:	000b      	movs	r3, r1
 8005974:	0013      	movs	r3, r2
 8005976:	637b      	str	r3, [r7, #52]	; 0x34
        }
      }
      sysclockfreq = pllvco;
 8005978:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800597a:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800597c:	e00d      	b.n	800599a <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 800597e:	4b09      	ldr	r3, [pc, #36]	; (80059a4 <HAL_RCC_GetSysClockFreq+0x138>)
 8005980:	685b      	ldr	r3, [r3, #4]
 8005982:	0b5b      	lsrs	r3, r3, #13
 8005984:	2207      	movs	r2, #7
 8005986:	4013      	ands	r3, r2
 8005988:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 800598a:	6a3b      	ldr	r3, [r7, #32]
 800598c:	3301      	adds	r3, #1
 800598e:	2280      	movs	r2, #128	; 0x80
 8005990:	0212      	lsls	r2, r2, #8
 8005992:	409a      	lsls	r2, r3
 8005994:	0013      	movs	r3, r2
 8005996:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8005998:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 800599a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 800599c:	0018      	movs	r0, r3
 800599e:	46bd      	mov	sp, r7
 80059a0:	b00e      	add	sp, #56	; 0x38
 80059a2:	bdb0      	pop	{r4, r5, r7, pc}
 80059a4:	40021000 	.word	0x40021000
 80059a8:	003d0900 	.word	0x003d0900
 80059ac:	00f42400 	.word	0x00f42400
 80059b0:	007a1200 	.word	0x007a1200
 80059b4:	0800a4e8 	.word	0x0800a4e8

080059b8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80059b8:	b580      	push	{r7, lr}
 80059ba:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80059bc:	4b02      	ldr	r3, [pc, #8]	; (80059c8 <HAL_RCC_GetHCLKFreq+0x10>)
 80059be:	681b      	ldr	r3, [r3, #0]
}
 80059c0:	0018      	movs	r0, r3
 80059c2:	46bd      	mov	sp, r7
 80059c4:	bd80      	pop	{r7, pc}
 80059c6:	46c0      	nop			; (mov r8, r8)
 80059c8:	20000000 	.word	0x20000000

080059cc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80059cc:	b580      	push	{r7, lr}
 80059ce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80059d0:	f7ff fff2 	bl	80059b8 <HAL_RCC_GetHCLKFreq>
 80059d4:	0001      	movs	r1, r0
 80059d6:	4b06      	ldr	r3, [pc, #24]	; (80059f0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80059d8:	68db      	ldr	r3, [r3, #12]
 80059da:	0a1b      	lsrs	r3, r3, #8
 80059dc:	2207      	movs	r2, #7
 80059de:	4013      	ands	r3, r2
 80059e0:	4a04      	ldr	r2, [pc, #16]	; (80059f4 <HAL_RCC_GetPCLK1Freq+0x28>)
 80059e2:	5cd3      	ldrb	r3, [r2, r3]
 80059e4:	40d9      	lsrs	r1, r3
 80059e6:	000b      	movs	r3, r1
}
 80059e8:	0018      	movs	r0, r3
 80059ea:	46bd      	mov	sp, r7
 80059ec:	bd80      	pop	{r7, pc}
 80059ee:	46c0      	nop			; (mov r8, r8)
 80059f0:	40021000 	.word	0x40021000
 80059f4:	0800a4e0 	.word	0x0800a4e0

080059f8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80059f8:	b580      	push	{r7, lr}
 80059fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80059fc:	f7ff ffdc 	bl	80059b8 <HAL_RCC_GetHCLKFreq>
 8005a00:	0001      	movs	r1, r0
 8005a02:	4b06      	ldr	r3, [pc, #24]	; (8005a1c <HAL_RCC_GetPCLK2Freq+0x24>)
 8005a04:	68db      	ldr	r3, [r3, #12]
 8005a06:	0adb      	lsrs	r3, r3, #11
 8005a08:	2207      	movs	r2, #7
 8005a0a:	4013      	ands	r3, r2
 8005a0c:	4a04      	ldr	r2, [pc, #16]	; (8005a20 <HAL_RCC_GetPCLK2Freq+0x28>)
 8005a0e:	5cd3      	ldrb	r3, [r2, r3]
 8005a10:	40d9      	lsrs	r1, r3
 8005a12:	000b      	movs	r3, r1
}
 8005a14:	0018      	movs	r0, r3
 8005a16:	46bd      	mov	sp, r7
 8005a18:	bd80      	pop	{r7, pc}
 8005a1a:	46c0      	nop			; (mov r8, r8)
 8005a1c:	40021000 	.word	0x40021000
 8005a20:	0800a4e0 	.word	0x0800a4e0

08005a24 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005a24:	b580      	push	{r7, lr}
 8005a26:	b086      	sub	sp, #24
 8005a28:	af00      	add	r7, sp, #0
 8005a2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 8005a2c:	2317      	movs	r3, #23
 8005a2e:	18fb      	adds	r3, r7, r3
 8005a30:	2200      	movs	r2, #0
 8005a32:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	2220      	movs	r2, #32
 8005a3a:	4013      	ands	r3, r2
 8005a3c:	d106      	bne.n	8005a4c <HAL_RCCEx_PeriphCLKConfig+0x28>
#if defined(LCD)
   || (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	681a      	ldr	r2, [r3, #0]
 8005a42:	2380      	movs	r3, #128	; 0x80
 8005a44:	011b      	lsls	r3, r3, #4
 8005a46:	4013      	ands	r3, r2
 8005a48:	d100      	bne.n	8005a4c <HAL_RCCEx_PeriphCLKConfig+0x28>
 8005a4a:	e0d9      	b.n	8005c00 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005a4c:	4b9c      	ldr	r3, [pc, #624]	; (8005cc0 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8005a4e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005a50:	2380      	movs	r3, #128	; 0x80
 8005a52:	055b      	lsls	r3, r3, #21
 8005a54:	4013      	ands	r3, r2
 8005a56:	d10a      	bne.n	8005a6e <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005a58:	4b99      	ldr	r3, [pc, #612]	; (8005cc0 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8005a5a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005a5c:	4b98      	ldr	r3, [pc, #608]	; (8005cc0 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8005a5e:	2180      	movs	r1, #128	; 0x80
 8005a60:	0549      	lsls	r1, r1, #21
 8005a62:	430a      	orrs	r2, r1
 8005a64:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8005a66:	2317      	movs	r3, #23
 8005a68:	18fb      	adds	r3, r7, r3
 8005a6a:	2201      	movs	r2, #1
 8005a6c:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005a6e:	4b95      	ldr	r3, [pc, #596]	; (8005cc4 <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 8005a70:	681a      	ldr	r2, [r3, #0]
 8005a72:	2380      	movs	r3, #128	; 0x80
 8005a74:	005b      	lsls	r3, r3, #1
 8005a76:	4013      	ands	r3, r2
 8005a78:	d11a      	bne.n	8005ab0 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005a7a:	4b92      	ldr	r3, [pc, #584]	; (8005cc4 <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 8005a7c:	681a      	ldr	r2, [r3, #0]
 8005a7e:	4b91      	ldr	r3, [pc, #580]	; (8005cc4 <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 8005a80:	2180      	movs	r1, #128	; 0x80
 8005a82:	0049      	lsls	r1, r1, #1
 8005a84:	430a      	orrs	r2, r1
 8005a86:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005a88:	f7fe fae2 	bl	8004050 <HAL_GetTick>
 8005a8c:	0003      	movs	r3, r0
 8005a8e:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005a90:	e008      	b.n	8005aa4 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005a92:	f7fe fadd 	bl	8004050 <HAL_GetTick>
 8005a96:	0002      	movs	r2, r0
 8005a98:	693b      	ldr	r3, [r7, #16]
 8005a9a:	1ad3      	subs	r3, r2, r3
 8005a9c:	2b64      	cmp	r3, #100	; 0x64
 8005a9e:	d901      	bls.n	8005aa4 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8005aa0:	2303      	movs	r3, #3
 8005aa2:	e108      	b.n	8005cb6 <HAL_RCCEx_PeriphCLKConfig+0x292>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005aa4:	4b87      	ldr	r3, [pc, #540]	; (8005cc4 <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 8005aa6:	681a      	ldr	r2, [r3, #0]
 8005aa8:	2380      	movs	r3, #128	; 0x80
 8005aaa:	005b      	lsls	r3, r3, #1
 8005aac:	4013      	ands	r3, r2
 8005aae:	d0f0      	beq.n	8005a92 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8005ab0:	4b83      	ldr	r3, [pc, #524]	; (8005cc0 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8005ab2:	681a      	ldr	r2, [r3, #0]
 8005ab4:	23c0      	movs	r3, #192	; 0xc0
 8005ab6:	039b      	lsls	r3, r3, #14
 8005ab8:	4013      	ands	r3, r2
 8005aba:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	685a      	ldr	r2, [r3, #4]
 8005ac0:	23c0      	movs	r3, #192	; 0xc0
 8005ac2:	039b      	lsls	r3, r3, #14
 8005ac4:	4013      	ands	r3, r2
 8005ac6:	68fa      	ldr	r2, [r7, #12]
 8005ac8:	429a      	cmp	r2, r3
 8005aca:	d107      	bne.n	8005adc <HAL_RCCEx_PeriphCLKConfig+0xb8>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	689a      	ldr	r2, [r3, #8]
 8005ad0:	23c0      	movs	r3, #192	; 0xc0
 8005ad2:	039b      	lsls	r3, r3, #14
 8005ad4:	4013      	ands	r3, r2
 8005ad6:	68fa      	ldr	r2, [r7, #12]
 8005ad8:	429a      	cmp	r2, r3
 8005ada:	d013      	beq.n	8005b04 <HAL_RCCEx_PeriphCLKConfig+0xe0>
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	685a      	ldr	r2, [r3, #4]
 8005ae0:	23c0      	movs	r3, #192	; 0xc0
 8005ae2:	029b      	lsls	r3, r3, #10
 8005ae4:	401a      	ands	r2, r3
 8005ae6:	23c0      	movs	r3, #192	; 0xc0
 8005ae8:	029b      	lsls	r3, r3, #10
 8005aea:	429a      	cmp	r2, r3
 8005aec:	d10a      	bne.n	8005b04 <HAL_RCCEx_PeriphCLKConfig+0xe0>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8005aee:	4b74      	ldr	r3, [pc, #464]	; (8005cc0 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8005af0:	681a      	ldr	r2, [r3, #0]
 8005af2:	2380      	movs	r3, #128	; 0x80
 8005af4:	029b      	lsls	r3, r3, #10
 8005af6:	401a      	ands	r2, r3
 8005af8:	2380      	movs	r3, #128	; 0x80
 8005afa:	029b      	lsls	r3, r3, #10
 8005afc:	429a      	cmp	r2, r3
 8005afe:	d101      	bne.n	8005b04 <HAL_RCCEx_PeriphCLKConfig+0xe0>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 8005b00:	2301      	movs	r3, #1
 8005b02:	e0d8      	b.n	8005cb6 <HAL_RCCEx_PeriphCLKConfig+0x292>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8005b04:	4b6e      	ldr	r3, [pc, #440]	; (8005cc0 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8005b06:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005b08:	23c0      	movs	r3, #192	; 0xc0
 8005b0a:	029b      	lsls	r3, r3, #10
 8005b0c:	4013      	ands	r3, r2
 8005b0e:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	d049      	beq.n	8005baa <HAL_RCCEx_PeriphCLKConfig+0x186>
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	685a      	ldr	r2, [r3, #4]
 8005b1a:	23c0      	movs	r3, #192	; 0xc0
 8005b1c:	029b      	lsls	r3, r3, #10
 8005b1e:	4013      	ands	r3, r2
 8005b20:	68fa      	ldr	r2, [r7, #12]
 8005b22:	429a      	cmp	r2, r3
 8005b24:	d004      	beq.n	8005b30 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	2220      	movs	r2, #32
 8005b2c:	4013      	ands	r3, r2
 8005b2e:	d10d      	bne.n	8005b4c <HAL_RCCEx_PeriphCLKConfig+0x128>
#if defined(LCD)
      || ((temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CSR_RTCSEL)) \
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	689a      	ldr	r2, [r3, #8]
 8005b34:	23c0      	movs	r3, #192	; 0xc0
 8005b36:	029b      	lsls	r3, r3, #10
 8005b38:	4013      	ands	r3, r2
 8005b3a:	68fa      	ldr	r2, [r7, #12]
 8005b3c:	429a      	cmp	r2, r3
 8005b3e:	d034      	beq.n	8005baa <HAL_RCCEx_PeriphCLKConfig+0x186>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	681a      	ldr	r2, [r3, #0]
 8005b44:	2380      	movs	r3, #128	; 0x80
 8005b46:	011b      	lsls	r3, r3, #4
 8005b48:	4013      	ands	r3, r2
 8005b4a:	d02e      	beq.n	8005baa <HAL_RCCEx_PeriphCLKConfig+0x186>
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8005b4c:	4b5c      	ldr	r3, [pc, #368]	; (8005cc0 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8005b4e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005b50:	4a5d      	ldr	r2, [pc, #372]	; (8005cc8 <HAL_RCCEx_PeriphCLKConfig+0x2a4>)
 8005b52:	4013      	ands	r3, r2
 8005b54:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005b56:	4b5a      	ldr	r3, [pc, #360]	; (8005cc0 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8005b58:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005b5a:	4b59      	ldr	r3, [pc, #356]	; (8005cc0 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8005b5c:	2180      	movs	r1, #128	; 0x80
 8005b5e:	0309      	lsls	r1, r1, #12
 8005b60:	430a      	orrs	r2, r1
 8005b62:	651a      	str	r2, [r3, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005b64:	4b56      	ldr	r3, [pc, #344]	; (8005cc0 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8005b66:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005b68:	4b55      	ldr	r3, [pc, #340]	; (8005cc0 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8005b6a:	4958      	ldr	r1, [pc, #352]	; (8005ccc <HAL_RCCEx_PeriphCLKConfig+0x2a8>)
 8005b6c:	400a      	ands	r2, r1
 8005b6e:	651a      	str	r2, [r3, #80]	; 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 8005b70:	4b53      	ldr	r3, [pc, #332]	; (8005cc0 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8005b72:	68fa      	ldr	r2, [r7, #12]
 8005b74:	651a      	str	r2, [r3, #80]	; 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 8005b76:	68fa      	ldr	r2, [r7, #12]
 8005b78:	2380      	movs	r3, #128	; 0x80
 8005b7a:	005b      	lsls	r3, r3, #1
 8005b7c:	4013      	ands	r3, r2
 8005b7e:	d014      	beq.n	8005baa <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005b80:	f7fe fa66 	bl	8004050 <HAL_GetTick>
 8005b84:	0003      	movs	r3, r0
 8005b86:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005b88:	e009      	b.n	8005b9e <HAL_RCCEx_PeriphCLKConfig+0x17a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005b8a:	f7fe fa61 	bl	8004050 <HAL_GetTick>
 8005b8e:	0002      	movs	r2, r0
 8005b90:	693b      	ldr	r3, [r7, #16]
 8005b92:	1ad3      	subs	r3, r2, r3
 8005b94:	4a4e      	ldr	r2, [pc, #312]	; (8005cd0 <HAL_RCCEx_PeriphCLKConfig+0x2ac>)
 8005b96:	4293      	cmp	r3, r2
 8005b98:	d901      	bls.n	8005b9e <HAL_RCCEx_PeriphCLKConfig+0x17a>
          {
            return HAL_TIMEOUT;
 8005b9a:	2303      	movs	r3, #3
 8005b9c:	e08b      	b.n	8005cb6 <HAL_RCCEx_PeriphCLKConfig+0x292>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005b9e:	4b48      	ldr	r3, [pc, #288]	; (8005cc0 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8005ba0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005ba2:	2380      	movs	r3, #128	; 0x80
 8005ba4:	009b      	lsls	r3, r3, #2
 8005ba6:	4013      	ands	r3, r2
 8005ba8:	d0ef      	beq.n	8005b8a <HAL_RCCEx_PeriphCLKConfig+0x166>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	685a      	ldr	r2, [r3, #4]
 8005bae:	23c0      	movs	r3, #192	; 0xc0
 8005bb0:	029b      	lsls	r3, r3, #10
 8005bb2:	401a      	ands	r2, r3
 8005bb4:	23c0      	movs	r3, #192	; 0xc0
 8005bb6:	029b      	lsls	r3, r3, #10
 8005bb8:	429a      	cmp	r2, r3
 8005bba:	d10c      	bne.n	8005bd6 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
 8005bbc:	4b40      	ldr	r3, [pc, #256]	; (8005cc0 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	4a44      	ldr	r2, [pc, #272]	; (8005cd4 <HAL_RCCEx_PeriphCLKConfig+0x2b0>)
 8005bc2:	4013      	ands	r3, r2
 8005bc4:	0019      	movs	r1, r3
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	685a      	ldr	r2, [r3, #4]
 8005bca:	23c0      	movs	r3, #192	; 0xc0
 8005bcc:	039b      	lsls	r3, r3, #14
 8005bce:	401a      	ands	r2, r3
 8005bd0:	4b3b      	ldr	r3, [pc, #236]	; (8005cc0 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8005bd2:	430a      	orrs	r2, r1
 8005bd4:	601a      	str	r2, [r3, #0]
 8005bd6:	4b3a      	ldr	r3, [pc, #232]	; (8005cc0 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8005bd8:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	685a      	ldr	r2, [r3, #4]
 8005bde:	23c0      	movs	r3, #192	; 0xc0
 8005be0:	029b      	lsls	r3, r3, #10
 8005be2:	401a      	ands	r2, r3
 8005be4:	4b36      	ldr	r3, [pc, #216]	; (8005cc0 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8005be6:	430a      	orrs	r2, r1
 8005be8:	651a      	str	r2, [r3, #80]	; 0x50

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8005bea:	2317      	movs	r3, #23
 8005bec:	18fb      	adds	r3, r7, r3
 8005bee:	781b      	ldrb	r3, [r3, #0]
 8005bf0:	2b01      	cmp	r3, #1
 8005bf2:	d105      	bne.n	8005c00 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005bf4:	4b32      	ldr	r3, [pc, #200]	; (8005cc0 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8005bf6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005bf8:	4b31      	ldr	r3, [pc, #196]	; (8005cc0 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8005bfa:	4937      	ldr	r1, [pc, #220]	; (8005cd8 <HAL_RCCEx_PeriphCLKConfig+0x2b4>)
 8005bfc:	400a      	ands	r2, r1
 8005bfe:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	2201      	movs	r2, #1
 8005c06:	4013      	ands	r3, r2
 8005c08:	d009      	beq.n	8005c1e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005c0a:	4b2d      	ldr	r3, [pc, #180]	; (8005cc0 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8005c0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005c0e:	2203      	movs	r2, #3
 8005c10:	4393      	bics	r3, r2
 8005c12:	0019      	movs	r1, r3
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	68da      	ldr	r2, [r3, #12]
 8005c18:	4b29      	ldr	r3, [pc, #164]	; (8005cc0 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8005c1a:	430a      	orrs	r2, r1
 8005c1c:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	2202      	movs	r2, #2
 8005c24:	4013      	ands	r3, r2
 8005c26:	d009      	beq.n	8005c3c <HAL_RCCEx_PeriphCLKConfig+0x218>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005c28:	4b25      	ldr	r3, [pc, #148]	; (8005cc0 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8005c2a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005c2c:	220c      	movs	r2, #12
 8005c2e:	4393      	bics	r3, r2
 8005c30:	0019      	movs	r1, r3
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	691a      	ldr	r2, [r3, #16]
 8005c36:	4b22      	ldr	r3, [pc, #136]	; (8005cc0 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8005c38:	430a      	orrs	r2, r1
 8005c3a:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	2204      	movs	r2, #4
 8005c42:	4013      	ands	r3, r2
 8005c44:	d009      	beq.n	8005c5a <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005c46:	4b1e      	ldr	r3, [pc, #120]	; (8005cc0 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8005c48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005c4a:	4a24      	ldr	r2, [pc, #144]	; (8005cdc <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8005c4c:	4013      	ands	r3, r2
 8005c4e:	0019      	movs	r1, r3
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	695a      	ldr	r2, [r3, #20]
 8005c54:	4b1a      	ldr	r3, [pc, #104]	; (8005cc0 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8005c56:	430a      	orrs	r2, r1
 8005c58:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	2208      	movs	r2, #8
 8005c60:	4013      	ands	r3, r2
 8005c62:	d009      	beq.n	8005c78 <HAL_RCCEx_PeriphCLKConfig+0x254>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005c64:	4b16      	ldr	r3, [pc, #88]	; (8005cc0 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8005c66:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005c68:	4a1d      	ldr	r2, [pc, #116]	; (8005ce0 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8005c6a:	4013      	ands	r3, r2
 8005c6c:	0019      	movs	r1, r3
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	699a      	ldr	r2, [r3, #24]
 8005c72:	4b13      	ldr	r3, [pc, #76]	; (8005cc0 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8005c74:	430a      	orrs	r2, r1
 8005c76:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	2240      	movs	r2, #64	; 0x40
 8005c7e:	4013      	ands	r3, r2
 8005c80:	d009      	beq.n	8005c96 <HAL_RCCEx_PeriphCLKConfig+0x272>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005c82:	4b0f      	ldr	r3, [pc, #60]	; (8005cc0 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8005c84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005c86:	4a17      	ldr	r2, [pc, #92]	; (8005ce4 <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 8005c88:	4013      	ands	r3, r2
 8005c8a:	0019      	movs	r1, r3
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	6a1a      	ldr	r2, [r3, #32]
 8005c90:	4b0b      	ldr	r3, [pc, #44]	; (8005cc0 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8005c92:	430a      	orrs	r2, r1
 8005c94:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	2280      	movs	r2, #128	; 0x80
 8005c9c:	4013      	ands	r3, r2
 8005c9e:	d009      	beq.n	8005cb4 <HAL_RCCEx_PeriphCLKConfig+0x290>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 8005ca0:	4b07      	ldr	r3, [pc, #28]	; (8005cc0 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8005ca2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005ca4:	4a10      	ldr	r2, [pc, #64]	; (8005ce8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8005ca6:	4013      	ands	r3, r2
 8005ca8:	0019      	movs	r1, r3
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	69da      	ldr	r2, [r3, #28]
 8005cae:	4b04      	ldr	r3, [pc, #16]	; (8005cc0 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8005cb0:	430a      	orrs	r2, r1
 8005cb2:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8005cb4:	2300      	movs	r3, #0
}
 8005cb6:	0018      	movs	r0, r3
 8005cb8:	46bd      	mov	sp, r7
 8005cba:	b006      	add	sp, #24
 8005cbc:	bd80      	pop	{r7, pc}
 8005cbe:	46c0      	nop			; (mov r8, r8)
 8005cc0:	40021000 	.word	0x40021000
 8005cc4:	40007000 	.word	0x40007000
 8005cc8:	fffcffff 	.word	0xfffcffff
 8005ccc:	fff7ffff 	.word	0xfff7ffff
 8005cd0:	00001388 	.word	0x00001388
 8005cd4:	ffcfffff 	.word	0xffcfffff
 8005cd8:	efffffff 	.word	0xefffffff
 8005cdc:	fffff3ff 	.word	0xfffff3ff
 8005ce0:	ffffcfff 	.word	0xffffcfff
 8005ce4:	fbffffff 	.word	0xfbffffff
 8005ce8:	fff3ffff 	.word	0xfff3ffff

08005cec <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005cec:	b580      	push	{r7, lr}
 8005cee:	b082      	sub	sp, #8
 8005cf0:	af00      	add	r7, sp, #0
 8005cf2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	d101      	bne.n	8005cfe <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005cfa:	2301      	movs	r3, #1
 8005cfc:	e083      	b.n	8005e06 <HAL_SPI_Init+0x11a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	d109      	bne.n	8005d1a <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	685a      	ldr	r2, [r3, #4]
 8005d0a:	2382      	movs	r3, #130	; 0x82
 8005d0c:	005b      	lsls	r3, r3, #1
 8005d0e:	429a      	cmp	r2, r3
 8005d10:	d009      	beq.n	8005d26 <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	2200      	movs	r2, #0
 8005d16:	61da      	str	r2, [r3, #28]
 8005d18:	e005      	b.n	8005d26 <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	2200      	movs	r2, #0
 8005d1e:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	2200      	movs	r2, #0
 8005d24:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	2200      	movs	r2, #0
 8005d2a:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	2251      	movs	r2, #81	; 0x51
 8005d30:	5c9b      	ldrb	r3, [r3, r2]
 8005d32:	b2db      	uxtb	r3, r3
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	d107      	bne.n	8005d48 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	2250      	movs	r2, #80	; 0x50
 8005d3c:	2100      	movs	r1, #0
 8005d3e:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	0018      	movs	r0, r3
 8005d44:	f7fd ffd4 	bl	8003cf0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	2251      	movs	r2, #81	; 0x51
 8005d4c:	2102      	movs	r1, #2
 8005d4e:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	681a      	ldr	r2, [r3, #0]
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	2140      	movs	r1, #64	; 0x40
 8005d5c:	438a      	bics	r2, r1
 8005d5e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	685a      	ldr	r2, [r3, #4]
 8005d64:	2382      	movs	r3, #130	; 0x82
 8005d66:	005b      	lsls	r3, r3, #1
 8005d68:	401a      	ands	r2, r3
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	6899      	ldr	r1, [r3, #8]
 8005d6e:	2384      	movs	r3, #132	; 0x84
 8005d70:	021b      	lsls	r3, r3, #8
 8005d72:	400b      	ands	r3, r1
 8005d74:	431a      	orrs	r2, r3
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	68d9      	ldr	r1, [r3, #12]
 8005d7a:	2380      	movs	r3, #128	; 0x80
 8005d7c:	011b      	lsls	r3, r3, #4
 8005d7e:	400b      	ands	r3, r1
 8005d80:	431a      	orrs	r2, r3
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	691b      	ldr	r3, [r3, #16]
 8005d86:	2102      	movs	r1, #2
 8005d88:	400b      	ands	r3, r1
 8005d8a:	431a      	orrs	r2, r3
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	695b      	ldr	r3, [r3, #20]
 8005d90:	2101      	movs	r1, #1
 8005d92:	400b      	ands	r3, r1
 8005d94:	431a      	orrs	r2, r3
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	6999      	ldr	r1, [r3, #24]
 8005d9a:	2380      	movs	r3, #128	; 0x80
 8005d9c:	009b      	lsls	r3, r3, #2
 8005d9e:	400b      	ands	r3, r1
 8005da0:	431a      	orrs	r2, r3
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	69db      	ldr	r3, [r3, #28]
 8005da6:	2138      	movs	r1, #56	; 0x38
 8005da8:	400b      	ands	r3, r1
 8005daa:	431a      	orrs	r2, r3
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	6a1b      	ldr	r3, [r3, #32]
 8005db0:	2180      	movs	r1, #128	; 0x80
 8005db2:	400b      	ands	r3, r1
 8005db4:	431a      	orrs	r2, r3
 8005db6:	0011      	movs	r1, r2
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005dbc:	2380      	movs	r3, #128	; 0x80
 8005dbe:	019b      	lsls	r3, r3, #6
 8005dc0:	401a      	ands	r2, r3
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	430a      	orrs	r2, r1
 8005dc8:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	699b      	ldr	r3, [r3, #24]
 8005dce:	0c1b      	lsrs	r3, r3, #16
 8005dd0:	2204      	movs	r2, #4
 8005dd2:	4013      	ands	r3, r2
 8005dd4:	0019      	movs	r1, r3
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dda:	2210      	movs	r2, #16
 8005ddc:	401a      	ands	r2, r3
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	430a      	orrs	r2, r1
 8005de4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	69da      	ldr	r2, [r3, #28]
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	4907      	ldr	r1, [pc, #28]	; (8005e10 <HAL_SPI_Init+0x124>)
 8005df2:	400a      	ands	r2, r1
 8005df4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	2200      	movs	r2, #0
 8005dfa:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	2251      	movs	r2, #81	; 0x51
 8005e00:	2101      	movs	r1, #1
 8005e02:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005e04:	2300      	movs	r3, #0
}
 8005e06:	0018      	movs	r0, r3
 8005e08:	46bd      	mov	sp, r7
 8005e0a:	b002      	add	sp, #8
 8005e0c:	bd80      	pop	{r7, pc}
 8005e0e:	46c0      	nop			; (mov r8, r8)
 8005e10:	fffff7ff 	.word	0xfffff7ff

08005e14 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005e14:	b580      	push	{r7, lr}
 8005e16:	b088      	sub	sp, #32
 8005e18:	af00      	add	r7, sp, #0
 8005e1a:	60f8      	str	r0, [r7, #12]
 8005e1c:	60b9      	str	r1, [r7, #8]
 8005e1e:	603b      	str	r3, [r7, #0]
 8005e20:	1dbb      	adds	r3, r7, #6
 8005e22:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005e24:	231f      	movs	r3, #31
 8005e26:	18fb      	adds	r3, r7, r3
 8005e28:	2200      	movs	r2, #0
 8005e2a:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	2250      	movs	r2, #80	; 0x50
 8005e30:	5c9b      	ldrb	r3, [r3, r2]
 8005e32:	2b01      	cmp	r3, #1
 8005e34:	d101      	bne.n	8005e3a <HAL_SPI_Transmit+0x26>
 8005e36:	2302      	movs	r3, #2
 8005e38:	e13e      	b.n	80060b8 <HAL_SPI_Transmit+0x2a4>
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	2250      	movs	r2, #80	; 0x50
 8005e3e:	2101      	movs	r1, #1
 8005e40:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005e42:	f7fe f905 	bl	8004050 <HAL_GetTick>
 8005e46:	0003      	movs	r3, r0
 8005e48:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8005e4a:	2316      	movs	r3, #22
 8005e4c:	18fb      	adds	r3, r7, r3
 8005e4e:	1dba      	adds	r2, r7, #6
 8005e50:	8812      	ldrh	r2, [r2, #0]
 8005e52:	801a      	strh	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	2251      	movs	r2, #81	; 0x51
 8005e58:	5c9b      	ldrb	r3, [r3, r2]
 8005e5a:	b2db      	uxtb	r3, r3
 8005e5c:	2b01      	cmp	r3, #1
 8005e5e:	d004      	beq.n	8005e6a <HAL_SPI_Transmit+0x56>
  {
    errorcode = HAL_BUSY;
 8005e60:	231f      	movs	r3, #31
 8005e62:	18fb      	adds	r3, r7, r3
 8005e64:	2202      	movs	r2, #2
 8005e66:	701a      	strb	r2, [r3, #0]
    goto error;
 8005e68:	e11b      	b.n	80060a2 <HAL_SPI_Transmit+0x28e>
  }

  if ((pData == NULL) || (Size == 0U))
 8005e6a:	68bb      	ldr	r3, [r7, #8]
 8005e6c:	2b00      	cmp	r3, #0
 8005e6e:	d003      	beq.n	8005e78 <HAL_SPI_Transmit+0x64>
 8005e70:	1dbb      	adds	r3, r7, #6
 8005e72:	881b      	ldrh	r3, [r3, #0]
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	d104      	bne.n	8005e82 <HAL_SPI_Transmit+0x6e>
  {
    errorcode = HAL_ERROR;
 8005e78:	231f      	movs	r3, #31
 8005e7a:	18fb      	adds	r3, r7, r3
 8005e7c:	2201      	movs	r2, #1
 8005e7e:	701a      	strb	r2, [r3, #0]
    goto error;
 8005e80:	e10f      	b.n	80060a2 <HAL_SPI_Transmit+0x28e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	2251      	movs	r2, #81	; 0x51
 8005e86:	2103      	movs	r1, #3
 8005e88:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	2200      	movs	r2, #0
 8005e8e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	68ba      	ldr	r2, [r7, #8]
 8005e94:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	1dba      	adds	r2, r7, #6
 8005e9a:	8812      	ldrh	r2, [r2, #0]
 8005e9c:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	1dba      	adds	r2, r7, #6
 8005ea2:	8812      	ldrh	r2, [r2, #0]
 8005ea4:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	2200      	movs	r2, #0
 8005eaa:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	2200      	movs	r2, #0
 8005eb0:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	2200      	movs	r2, #0
 8005eb6:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	2200      	movs	r2, #0
 8005ebc:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	2200      	movs	r2, #0
 8005ec2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	689a      	ldr	r2, [r3, #8]
 8005ec8:	2380      	movs	r3, #128	; 0x80
 8005eca:	021b      	lsls	r3, r3, #8
 8005ecc:	429a      	cmp	r2, r3
 8005ece:	d110      	bne.n	8005ef2 <HAL_SPI_Transmit+0xde>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	681a      	ldr	r2, [r3, #0]
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	2140      	movs	r1, #64	; 0x40
 8005edc:	438a      	bics	r2, r1
 8005ede:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	681a      	ldr	r2, [r3, #0]
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	2180      	movs	r1, #128	; 0x80
 8005eec:	01c9      	lsls	r1, r1, #7
 8005eee:	430a      	orrs	r2, r1
 8005ef0:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	2240      	movs	r2, #64	; 0x40
 8005efa:	4013      	ands	r3, r2
 8005efc:	2b40      	cmp	r3, #64	; 0x40
 8005efe:	d007      	beq.n	8005f10 <HAL_SPI_Transmit+0xfc>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	681a      	ldr	r2, [r3, #0]
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	2140      	movs	r1, #64	; 0x40
 8005f0c:	430a      	orrs	r2, r1
 8005f0e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	68da      	ldr	r2, [r3, #12]
 8005f14:	2380      	movs	r3, #128	; 0x80
 8005f16:	011b      	lsls	r3, r3, #4
 8005f18:	429a      	cmp	r2, r3
 8005f1a:	d14e      	bne.n	8005fba <HAL_SPI_Transmit+0x1a6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	685b      	ldr	r3, [r3, #4]
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	d004      	beq.n	8005f2e <HAL_SPI_Transmit+0x11a>
 8005f24:	2316      	movs	r3, #22
 8005f26:	18fb      	adds	r3, r7, r3
 8005f28:	881b      	ldrh	r3, [r3, #0]
 8005f2a:	2b01      	cmp	r3, #1
 8005f2c:	d13f      	bne.n	8005fae <HAL_SPI_Transmit+0x19a>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f32:	881a      	ldrh	r2, [r3, #0]
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f3e:	1c9a      	adds	r2, r3, #2
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005f48:	b29b      	uxth	r3, r3
 8005f4a:	3b01      	subs	r3, #1
 8005f4c:	b29a      	uxth	r2, r3
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005f52:	e02c      	b.n	8005fae <HAL_SPI_Transmit+0x19a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	689b      	ldr	r3, [r3, #8]
 8005f5a:	2202      	movs	r2, #2
 8005f5c:	4013      	ands	r3, r2
 8005f5e:	2b02      	cmp	r3, #2
 8005f60:	d112      	bne.n	8005f88 <HAL_SPI_Transmit+0x174>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f66:	881a      	ldrh	r2, [r3, #0]
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f72:	1c9a      	adds	r2, r3, #2
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005f7c:	b29b      	uxth	r3, r3
 8005f7e:	3b01      	subs	r3, #1
 8005f80:	b29a      	uxth	r2, r3
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	86da      	strh	r2, [r3, #54]	; 0x36
 8005f86:	e012      	b.n	8005fae <HAL_SPI_Transmit+0x19a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005f88:	f7fe f862 	bl	8004050 <HAL_GetTick>
 8005f8c:	0002      	movs	r2, r0
 8005f8e:	69bb      	ldr	r3, [r7, #24]
 8005f90:	1ad3      	subs	r3, r2, r3
 8005f92:	683a      	ldr	r2, [r7, #0]
 8005f94:	429a      	cmp	r2, r3
 8005f96:	d802      	bhi.n	8005f9e <HAL_SPI_Transmit+0x18a>
 8005f98:	683b      	ldr	r3, [r7, #0]
 8005f9a:	3301      	adds	r3, #1
 8005f9c:	d102      	bne.n	8005fa4 <HAL_SPI_Transmit+0x190>
 8005f9e:	683b      	ldr	r3, [r7, #0]
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	d104      	bne.n	8005fae <HAL_SPI_Transmit+0x19a>
        {
          errorcode = HAL_TIMEOUT;
 8005fa4:	231f      	movs	r3, #31
 8005fa6:	18fb      	adds	r3, r7, r3
 8005fa8:	2203      	movs	r2, #3
 8005faa:	701a      	strb	r2, [r3, #0]
          goto error;
 8005fac:	e079      	b.n	80060a2 <HAL_SPI_Transmit+0x28e>
    while (hspi->TxXferCount > 0U)
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005fb2:	b29b      	uxth	r3, r3
 8005fb4:	2b00      	cmp	r3, #0
 8005fb6:	d1cd      	bne.n	8005f54 <HAL_SPI_Transmit+0x140>
 8005fb8:	e04f      	b.n	800605a <HAL_SPI_Transmit+0x246>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	685b      	ldr	r3, [r3, #4]
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	d004      	beq.n	8005fcc <HAL_SPI_Transmit+0x1b8>
 8005fc2:	2316      	movs	r3, #22
 8005fc4:	18fb      	adds	r3, r7, r3
 8005fc6:	881b      	ldrh	r3, [r3, #0]
 8005fc8:	2b01      	cmp	r3, #1
 8005fca:	d141      	bne.n	8006050 <HAL_SPI_Transmit+0x23c>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	330c      	adds	r3, #12
 8005fd6:	7812      	ldrb	r2, [r2, #0]
 8005fd8:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005fde:	1c5a      	adds	r2, r3, #1
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005fe8:	b29b      	uxth	r3, r3
 8005fea:	3b01      	subs	r3, #1
 8005fec:	b29a      	uxth	r2, r3
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8005ff2:	e02d      	b.n	8006050 <HAL_SPI_Transmit+0x23c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	689b      	ldr	r3, [r3, #8]
 8005ffa:	2202      	movs	r2, #2
 8005ffc:	4013      	ands	r3, r2
 8005ffe:	2b02      	cmp	r3, #2
 8006000:	d113      	bne.n	800602a <HAL_SPI_Transmit+0x216>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	330c      	adds	r3, #12
 800600c:	7812      	ldrb	r2, [r2, #0]
 800600e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006014:	1c5a      	adds	r2, r3, #1
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800601e:	b29b      	uxth	r3, r3
 8006020:	3b01      	subs	r3, #1
 8006022:	b29a      	uxth	r2, r3
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	86da      	strh	r2, [r3, #54]	; 0x36
 8006028:	e012      	b.n	8006050 <HAL_SPI_Transmit+0x23c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800602a:	f7fe f811 	bl	8004050 <HAL_GetTick>
 800602e:	0002      	movs	r2, r0
 8006030:	69bb      	ldr	r3, [r7, #24]
 8006032:	1ad3      	subs	r3, r2, r3
 8006034:	683a      	ldr	r2, [r7, #0]
 8006036:	429a      	cmp	r2, r3
 8006038:	d802      	bhi.n	8006040 <HAL_SPI_Transmit+0x22c>
 800603a:	683b      	ldr	r3, [r7, #0]
 800603c:	3301      	adds	r3, #1
 800603e:	d102      	bne.n	8006046 <HAL_SPI_Transmit+0x232>
 8006040:	683b      	ldr	r3, [r7, #0]
 8006042:	2b00      	cmp	r3, #0
 8006044:	d104      	bne.n	8006050 <HAL_SPI_Transmit+0x23c>
        {
          errorcode = HAL_TIMEOUT;
 8006046:	231f      	movs	r3, #31
 8006048:	18fb      	adds	r3, r7, r3
 800604a:	2203      	movs	r2, #3
 800604c:	701a      	strb	r2, [r3, #0]
          goto error;
 800604e:	e028      	b.n	80060a2 <HAL_SPI_Transmit+0x28e>
    while (hspi->TxXferCount > 0U)
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006054:	b29b      	uxth	r3, r3
 8006056:	2b00      	cmp	r3, #0
 8006058:	d1cc      	bne.n	8005ff4 <HAL_SPI_Transmit+0x1e0>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800605a:	69ba      	ldr	r2, [r7, #24]
 800605c:	6839      	ldr	r1, [r7, #0]
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	0018      	movs	r0, r3
 8006062:	f000 fa83 	bl	800656c <SPI_EndRxTxTransaction>
 8006066:	1e03      	subs	r3, r0, #0
 8006068:	d002      	beq.n	8006070 <HAL_SPI_Transmit+0x25c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	2220      	movs	r2, #32
 800606e:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	689b      	ldr	r3, [r3, #8]
 8006074:	2b00      	cmp	r3, #0
 8006076:	d10a      	bne.n	800608e <HAL_SPI_Transmit+0x27a>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006078:	2300      	movs	r3, #0
 800607a:	613b      	str	r3, [r7, #16]
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	68db      	ldr	r3, [r3, #12]
 8006082:	613b      	str	r3, [r7, #16]
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	689b      	ldr	r3, [r3, #8]
 800608a:	613b      	str	r3, [r7, #16]
 800608c:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006092:	2b00      	cmp	r3, #0
 8006094:	d004      	beq.n	80060a0 <HAL_SPI_Transmit+0x28c>
  {
    errorcode = HAL_ERROR;
 8006096:	231f      	movs	r3, #31
 8006098:	18fb      	adds	r3, r7, r3
 800609a:	2201      	movs	r2, #1
 800609c:	701a      	strb	r2, [r3, #0]
 800609e:	e000      	b.n	80060a2 <HAL_SPI_Transmit+0x28e>
  }

error:
 80060a0:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	2251      	movs	r2, #81	; 0x51
 80060a6:	2101      	movs	r1, #1
 80060a8:	5499      	strb	r1, [r3, r2]
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	2250      	movs	r2, #80	; 0x50
 80060ae:	2100      	movs	r1, #0
 80060b0:	5499      	strb	r1, [r3, r2]
  return errorcode;
 80060b2:	231f      	movs	r3, #31
 80060b4:	18fb      	adds	r3, r7, r3
 80060b6:	781b      	ldrb	r3, [r3, #0]
}
 80060b8:	0018      	movs	r0, r3
 80060ba:	46bd      	mov	sp, r7
 80060bc:	b008      	add	sp, #32
 80060be:	bd80      	pop	{r7, pc}

080060c0 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80060c0:	b580      	push	{r7, lr}
 80060c2:	b08c      	sub	sp, #48	; 0x30
 80060c4:	af00      	add	r7, sp, #0
 80060c6:	60f8      	str	r0, [r7, #12]
 80060c8:	60b9      	str	r1, [r7, #8]
 80060ca:	607a      	str	r2, [r7, #4]
 80060cc:	001a      	movs	r2, r3
 80060ce:	1cbb      	adds	r3, r7, #2
 80060d0:	801a      	strh	r2, [r3, #0]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80060d2:	2301      	movs	r3, #1
 80060d4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80060d6:	232b      	movs	r3, #43	; 0x2b
 80060d8:	18fb      	adds	r3, r7, r3
 80060da:	2200      	movs	r2, #0
 80060dc:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	2250      	movs	r2, #80	; 0x50
 80060e2:	5c9b      	ldrb	r3, [r3, r2]
 80060e4:	2b01      	cmp	r3, #1
 80060e6:	d101      	bne.n	80060ec <HAL_SPI_TransmitReceive+0x2c>
 80060e8:	2302      	movs	r3, #2
 80060ea:	e1a0      	b.n	800642e <HAL_SPI_TransmitReceive+0x36e>
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	2250      	movs	r2, #80	; 0x50
 80060f0:	2101      	movs	r1, #1
 80060f2:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80060f4:	f7fd ffac 	bl	8004050 <HAL_GetTick>
 80060f8:	0003      	movs	r3, r0
 80060fa:	627b      	str	r3, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80060fc:	2023      	movs	r0, #35	; 0x23
 80060fe:	183b      	adds	r3, r7, r0
 8006100:	68fa      	ldr	r2, [r7, #12]
 8006102:	2151      	movs	r1, #81	; 0x51
 8006104:	5c52      	ldrb	r2, [r2, r1]
 8006106:	701a      	strb	r2, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	685b      	ldr	r3, [r3, #4]
 800610c:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800610e:	231a      	movs	r3, #26
 8006110:	18fb      	adds	r3, r7, r3
 8006112:	1cba      	adds	r2, r7, #2
 8006114:	8812      	ldrh	r2, [r2, #0]
 8006116:	801a      	strh	r2, [r3, #0]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8006118:	183b      	adds	r3, r7, r0
 800611a:	781b      	ldrb	r3, [r3, #0]
 800611c:	2b01      	cmp	r3, #1
 800611e:	d011      	beq.n	8006144 <HAL_SPI_TransmitReceive+0x84>
 8006120:	69fa      	ldr	r2, [r7, #28]
 8006122:	2382      	movs	r3, #130	; 0x82
 8006124:	005b      	lsls	r3, r3, #1
 8006126:	429a      	cmp	r2, r3
 8006128:	d107      	bne.n	800613a <HAL_SPI_TransmitReceive+0x7a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	689b      	ldr	r3, [r3, #8]
 800612e:	2b00      	cmp	r3, #0
 8006130:	d103      	bne.n	800613a <HAL_SPI_TransmitReceive+0x7a>
 8006132:	183b      	adds	r3, r7, r0
 8006134:	781b      	ldrb	r3, [r3, #0]
 8006136:	2b04      	cmp	r3, #4
 8006138:	d004      	beq.n	8006144 <HAL_SPI_TransmitReceive+0x84>
  {
    errorcode = HAL_BUSY;
 800613a:	232b      	movs	r3, #43	; 0x2b
 800613c:	18fb      	adds	r3, r7, r3
 800613e:	2202      	movs	r2, #2
 8006140:	701a      	strb	r2, [r3, #0]
    goto error;
 8006142:	e169      	b.n	8006418 <HAL_SPI_TransmitReceive+0x358>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8006144:	68bb      	ldr	r3, [r7, #8]
 8006146:	2b00      	cmp	r3, #0
 8006148:	d006      	beq.n	8006158 <HAL_SPI_TransmitReceive+0x98>
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	2b00      	cmp	r3, #0
 800614e:	d003      	beq.n	8006158 <HAL_SPI_TransmitReceive+0x98>
 8006150:	1cbb      	adds	r3, r7, #2
 8006152:	881b      	ldrh	r3, [r3, #0]
 8006154:	2b00      	cmp	r3, #0
 8006156:	d104      	bne.n	8006162 <HAL_SPI_TransmitReceive+0xa2>
  {
    errorcode = HAL_ERROR;
 8006158:	232b      	movs	r3, #43	; 0x2b
 800615a:	18fb      	adds	r3, r7, r3
 800615c:	2201      	movs	r2, #1
 800615e:	701a      	strb	r2, [r3, #0]
    goto error;
 8006160:	e15a      	b.n	8006418 <HAL_SPI_TransmitReceive+0x358>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	2251      	movs	r2, #81	; 0x51
 8006166:	5c9b      	ldrb	r3, [r3, r2]
 8006168:	b2db      	uxtb	r3, r3
 800616a:	2b04      	cmp	r3, #4
 800616c:	d003      	beq.n	8006176 <HAL_SPI_TransmitReceive+0xb6>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	2251      	movs	r2, #81	; 0x51
 8006172:	2105      	movs	r1, #5
 8006174:	5499      	strb	r1, [r3, r2]
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	2200      	movs	r2, #0
 800617a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	687a      	ldr	r2, [r7, #4]
 8006180:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	1cba      	adds	r2, r7, #2
 8006186:	8812      	ldrh	r2, [r2, #0]
 8006188:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	1cba      	adds	r2, r7, #2
 800618e:	8812      	ldrh	r2, [r2, #0]
 8006190:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	68ba      	ldr	r2, [r7, #8]
 8006196:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	1cba      	adds	r2, r7, #2
 800619c:	8812      	ldrh	r2, [r2, #0]
 800619e:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	1cba      	adds	r2, r7, #2
 80061a4:	8812      	ldrh	r2, [r2, #0]
 80061a6:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	2200      	movs	r2, #0
 80061ac:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	2200      	movs	r2, #0
 80061b2:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	2240      	movs	r2, #64	; 0x40
 80061bc:	4013      	ands	r3, r2
 80061be:	2b40      	cmp	r3, #64	; 0x40
 80061c0:	d007      	beq.n	80061d2 <HAL_SPI_TransmitReceive+0x112>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	681a      	ldr	r2, [r3, #0]
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	2140      	movs	r1, #64	; 0x40
 80061ce:	430a      	orrs	r2, r1
 80061d0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	68da      	ldr	r2, [r3, #12]
 80061d6:	2380      	movs	r3, #128	; 0x80
 80061d8:	011b      	lsls	r3, r3, #4
 80061da:	429a      	cmp	r2, r3
 80061dc:	d000      	beq.n	80061e0 <HAL_SPI_TransmitReceive+0x120>
 80061de:	e07a      	b.n	80062d6 <HAL_SPI_TransmitReceive+0x216>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	685b      	ldr	r3, [r3, #4]
 80061e4:	2b00      	cmp	r3, #0
 80061e6:	d004      	beq.n	80061f2 <HAL_SPI_TransmitReceive+0x132>
 80061e8:	231a      	movs	r3, #26
 80061ea:	18fb      	adds	r3, r7, r3
 80061ec:	881b      	ldrh	r3, [r3, #0]
 80061ee:	2b01      	cmp	r3, #1
 80061f0:	d166      	bne.n	80062c0 <HAL_SPI_TransmitReceive+0x200>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061f6:	881a      	ldrh	r2, [r3, #0]
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006202:	1c9a      	adds	r2, r3, #2
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800620c:	b29b      	uxth	r3, r3
 800620e:	3b01      	subs	r3, #1
 8006210:	b29a      	uxth	r2, r3
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006216:	e053      	b.n	80062c0 <HAL_SPI_TransmitReceive+0x200>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	689b      	ldr	r3, [r3, #8]
 800621e:	2202      	movs	r2, #2
 8006220:	4013      	ands	r3, r2
 8006222:	2b02      	cmp	r3, #2
 8006224:	d11b      	bne.n	800625e <HAL_SPI_TransmitReceive+0x19e>
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800622a:	b29b      	uxth	r3, r3
 800622c:	2b00      	cmp	r3, #0
 800622e:	d016      	beq.n	800625e <HAL_SPI_TransmitReceive+0x19e>
 8006230:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006232:	2b01      	cmp	r3, #1
 8006234:	d113      	bne.n	800625e <HAL_SPI_TransmitReceive+0x19e>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800623a:	881a      	ldrh	r2, [r3, #0]
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006246:	1c9a      	adds	r2, r3, #2
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006250:	b29b      	uxth	r3, r3
 8006252:	3b01      	subs	r3, #1
 8006254:	b29a      	uxth	r2, r3
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800625a:	2300      	movs	r3, #0
 800625c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	689b      	ldr	r3, [r3, #8]
 8006264:	2201      	movs	r2, #1
 8006266:	4013      	ands	r3, r2
 8006268:	2b01      	cmp	r3, #1
 800626a:	d119      	bne.n	80062a0 <HAL_SPI_TransmitReceive+0x1e0>
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006270:	b29b      	uxth	r3, r3
 8006272:	2b00      	cmp	r3, #0
 8006274:	d014      	beq.n	80062a0 <HAL_SPI_TransmitReceive+0x1e0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	68da      	ldr	r2, [r3, #12]
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006280:	b292      	uxth	r2, r2
 8006282:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006288:	1c9a      	adds	r2, r3, #2
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006292:	b29b      	uxth	r3, r3
 8006294:	3b01      	subs	r3, #1
 8006296:	b29a      	uxth	r2, r3
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800629c:	2301      	movs	r3, #1
 800629e:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80062a0:	f7fd fed6 	bl	8004050 <HAL_GetTick>
 80062a4:	0002      	movs	r2, r0
 80062a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062a8:	1ad3      	subs	r3, r2, r3
 80062aa:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80062ac:	429a      	cmp	r2, r3
 80062ae:	d807      	bhi.n	80062c0 <HAL_SPI_TransmitReceive+0x200>
 80062b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80062b2:	3301      	adds	r3, #1
 80062b4:	d004      	beq.n	80062c0 <HAL_SPI_TransmitReceive+0x200>
      {
        errorcode = HAL_TIMEOUT;
 80062b6:	232b      	movs	r3, #43	; 0x2b
 80062b8:	18fb      	adds	r3, r7, r3
 80062ba:	2203      	movs	r2, #3
 80062bc:	701a      	strb	r2, [r3, #0]
        goto error;
 80062be:	e0ab      	b.n	8006418 <HAL_SPI_TransmitReceive+0x358>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80062c4:	b29b      	uxth	r3, r3
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	d1a6      	bne.n	8006218 <HAL_SPI_TransmitReceive+0x158>
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80062ce:	b29b      	uxth	r3, r3
 80062d0:	2b00      	cmp	r3, #0
 80062d2:	d1a1      	bne.n	8006218 <HAL_SPI_TransmitReceive+0x158>
 80062d4:	e07f      	b.n	80063d6 <HAL_SPI_TransmitReceive+0x316>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	685b      	ldr	r3, [r3, #4]
 80062da:	2b00      	cmp	r3, #0
 80062dc:	d005      	beq.n	80062ea <HAL_SPI_TransmitReceive+0x22a>
 80062de:	231a      	movs	r3, #26
 80062e0:	18fb      	adds	r3, r7, r3
 80062e2:	881b      	ldrh	r3, [r3, #0]
 80062e4:	2b01      	cmp	r3, #1
 80062e6:	d000      	beq.n	80062ea <HAL_SPI_TransmitReceive+0x22a>
 80062e8:	e06b      	b.n	80063c2 <HAL_SPI_TransmitReceive+0x302>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	330c      	adds	r3, #12
 80062f4:	7812      	ldrb	r2, [r2, #0]
 80062f6:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062fc:	1c5a      	adds	r2, r3, #1
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006306:	b29b      	uxth	r3, r3
 8006308:	3b01      	subs	r3, #1
 800630a:	b29a      	uxth	r2, r3
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006310:	e057      	b.n	80063c2 <HAL_SPI_TransmitReceive+0x302>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	689b      	ldr	r3, [r3, #8]
 8006318:	2202      	movs	r2, #2
 800631a:	4013      	ands	r3, r2
 800631c:	2b02      	cmp	r3, #2
 800631e:	d11c      	bne.n	800635a <HAL_SPI_TransmitReceive+0x29a>
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006324:	b29b      	uxth	r3, r3
 8006326:	2b00      	cmp	r3, #0
 8006328:	d017      	beq.n	800635a <HAL_SPI_TransmitReceive+0x29a>
 800632a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800632c:	2b01      	cmp	r3, #1
 800632e:	d114      	bne.n	800635a <HAL_SPI_TransmitReceive+0x29a>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006334:	68fb      	ldr	r3, [r7, #12]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	330c      	adds	r3, #12
 800633a:	7812      	ldrb	r2, [r2, #0]
 800633c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006342:	1c5a      	adds	r2, r3, #1
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800634c:	b29b      	uxth	r3, r3
 800634e:	3b01      	subs	r3, #1
 8006350:	b29a      	uxth	r2, r3
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006356:	2300      	movs	r3, #0
 8006358:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	689b      	ldr	r3, [r3, #8]
 8006360:	2201      	movs	r2, #1
 8006362:	4013      	ands	r3, r2
 8006364:	2b01      	cmp	r3, #1
 8006366:	d119      	bne.n	800639c <HAL_SPI_TransmitReceive+0x2dc>
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800636c:	b29b      	uxth	r3, r3
 800636e:	2b00      	cmp	r3, #0
 8006370:	d014      	beq.n	800639c <HAL_SPI_TransmitReceive+0x2dc>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	68da      	ldr	r2, [r3, #12]
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800637c:	b2d2      	uxtb	r2, r2
 800637e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006384:	1c5a      	adds	r2, r3, #1
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800638e:	b29b      	uxth	r3, r3
 8006390:	3b01      	subs	r3, #1
 8006392:	b29a      	uxth	r2, r3
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006398:	2301      	movs	r3, #1
 800639a:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800639c:	f7fd fe58 	bl	8004050 <HAL_GetTick>
 80063a0:	0002      	movs	r2, r0
 80063a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063a4:	1ad3      	subs	r3, r2, r3
 80063a6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80063a8:	429a      	cmp	r2, r3
 80063aa:	d802      	bhi.n	80063b2 <HAL_SPI_TransmitReceive+0x2f2>
 80063ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063ae:	3301      	adds	r3, #1
 80063b0:	d102      	bne.n	80063b8 <HAL_SPI_TransmitReceive+0x2f8>
 80063b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	d104      	bne.n	80063c2 <HAL_SPI_TransmitReceive+0x302>
      {
        errorcode = HAL_TIMEOUT;
 80063b8:	232b      	movs	r3, #43	; 0x2b
 80063ba:	18fb      	adds	r3, r7, r3
 80063bc:	2203      	movs	r2, #3
 80063be:	701a      	strb	r2, [r3, #0]
        goto error;
 80063c0:	e02a      	b.n	8006418 <HAL_SPI_TransmitReceive+0x358>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80063c6:	b29b      	uxth	r3, r3
 80063c8:	2b00      	cmp	r3, #0
 80063ca:	d1a2      	bne.n	8006312 <HAL_SPI_TransmitReceive+0x252>
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80063d0:	b29b      	uxth	r3, r3
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	d19d      	bne.n	8006312 <HAL_SPI_TransmitReceive+0x252>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80063d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80063d8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	0018      	movs	r0, r3
 80063de:	f000 f8c5 	bl	800656c <SPI_EndRxTxTransaction>
 80063e2:	1e03      	subs	r3, r0, #0
 80063e4:	d007      	beq.n	80063f6 <HAL_SPI_TransmitReceive+0x336>
  {
    errorcode = HAL_ERROR;
 80063e6:	232b      	movs	r3, #43	; 0x2b
 80063e8:	18fb      	adds	r3, r7, r3
 80063ea:	2201      	movs	r2, #1
 80063ec:	701a      	strb	r2, [r3, #0]
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	2220      	movs	r2, #32
 80063f2:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80063f4:	e010      	b.n	8006418 <HAL_SPI_TransmitReceive+0x358>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	689b      	ldr	r3, [r3, #8]
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	d10b      	bne.n	8006416 <HAL_SPI_TransmitReceive+0x356>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80063fe:	2300      	movs	r3, #0
 8006400:	617b      	str	r3, [r7, #20]
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	68db      	ldr	r3, [r3, #12]
 8006408:	617b      	str	r3, [r7, #20]
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	689b      	ldr	r3, [r3, #8]
 8006410:	617b      	str	r3, [r7, #20]
 8006412:	697b      	ldr	r3, [r7, #20]
 8006414:	e000      	b.n	8006418 <HAL_SPI_TransmitReceive+0x358>
  }

error :
 8006416:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	2251      	movs	r2, #81	; 0x51
 800641c:	2101      	movs	r1, #1
 800641e:	5499      	strb	r1, [r3, r2]
  __HAL_UNLOCK(hspi);
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	2250      	movs	r2, #80	; 0x50
 8006424:	2100      	movs	r1, #0
 8006426:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8006428:	232b      	movs	r3, #43	; 0x2b
 800642a:	18fb      	adds	r3, r7, r3
 800642c:	781b      	ldrb	r3, [r3, #0]
}
 800642e:	0018      	movs	r0, r3
 8006430:	46bd      	mov	sp, r7
 8006432:	b00c      	add	sp, #48	; 0x30
 8006434:	bd80      	pop	{r7, pc}

08006436 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8006436:	b580      	push	{r7, lr}
 8006438:	b082      	sub	sp, #8
 800643a:	af00      	add	r7, sp, #0
 800643c:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	2251      	movs	r2, #81	; 0x51
 8006442:	5c9b      	ldrb	r3, [r3, r2]
 8006444:	b2db      	uxtb	r3, r3
}
 8006446:	0018      	movs	r0, r3
 8006448:	46bd      	mov	sp, r7
 800644a:	b002      	add	sp, #8
 800644c:	bd80      	pop	{r7, pc}
	...

08006450 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006450:	b580      	push	{r7, lr}
 8006452:	b088      	sub	sp, #32
 8006454:	af00      	add	r7, sp, #0
 8006456:	60f8      	str	r0, [r7, #12]
 8006458:	60b9      	str	r1, [r7, #8]
 800645a:	603b      	str	r3, [r7, #0]
 800645c:	1dfb      	adds	r3, r7, #7
 800645e:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006460:	f7fd fdf6 	bl	8004050 <HAL_GetTick>
 8006464:	0002      	movs	r2, r0
 8006466:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006468:	1a9b      	subs	r3, r3, r2
 800646a:	683a      	ldr	r2, [r7, #0]
 800646c:	18d3      	adds	r3, r2, r3
 800646e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8006470:	f7fd fdee 	bl	8004050 <HAL_GetTick>
 8006474:	0003      	movs	r3, r0
 8006476:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8006478:	4b3a      	ldr	r3, [pc, #232]	; (8006564 <SPI_WaitFlagStateUntilTimeout+0x114>)
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	015b      	lsls	r3, r3, #5
 800647e:	0d1b      	lsrs	r3, r3, #20
 8006480:	69fa      	ldr	r2, [r7, #28]
 8006482:	4353      	muls	r3, r2
 8006484:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006486:	e058      	b.n	800653a <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006488:	683b      	ldr	r3, [r7, #0]
 800648a:	3301      	adds	r3, #1
 800648c:	d055      	beq.n	800653a <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800648e:	f7fd fddf 	bl	8004050 <HAL_GetTick>
 8006492:	0002      	movs	r2, r0
 8006494:	69bb      	ldr	r3, [r7, #24]
 8006496:	1ad3      	subs	r3, r2, r3
 8006498:	69fa      	ldr	r2, [r7, #28]
 800649a:	429a      	cmp	r2, r3
 800649c:	d902      	bls.n	80064a4 <SPI_WaitFlagStateUntilTimeout+0x54>
 800649e:	69fb      	ldr	r3, [r7, #28]
 80064a0:	2b00      	cmp	r3, #0
 80064a2:	d142      	bne.n	800652a <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	685a      	ldr	r2, [r3, #4]
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	21e0      	movs	r1, #224	; 0xe0
 80064b0:	438a      	bics	r2, r1
 80064b2:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	685a      	ldr	r2, [r3, #4]
 80064b8:	2382      	movs	r3, #130	; 0x82
 80064ba:	005b      	lsls	r3, r3, #1
 80064bc:	429a      	cmp	r2, r3
 80064be:	d113      	bne.n	80064e8 <SPI_WaitFlagStateUntilTimeout+0x98>
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	689a      	ldr	r2, [r3, #8]
 80064c4:	2380      	movs	r3, #128	; 0x80
 80064c6:	021b      	lsls	r3, r3, #8
 80064c8:	429a      	cmp	r2, r3
 80064ca:	d005      	beq.n	80064d8 <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	689a      	ldr	r2, [r3, #8]
 80064d0:	2380      	movs	r3, #128	; 0x80
 80064d2:	00db      	lsls	r3, r3, #3
 80064d4:	429a      	cmp	r2, r3
 80064d6:	d107      	bne.n	80064e8 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	681a      	ldr	r2, [r3, #0]
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	2140      	movs	r1, #64	; 0x40
 80064e4:	438a      	bics	r2, r1
 80064e6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80064ec:	2380      	movs	r3, #128	; 0x80
 80064ee:	019b      	lsls	r3, r3, #6
 80064f0:	429a      	cmp	r2, r3
 80064f2:	d110      	bne.n	8006516 <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	681a      	ldr	r2, [r3, #0]
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	491a      	ldr	r1, [pc, #104]	; (8006568 <SPI_WaitFlagStateUntilTimeout+0x118>)
 8006500:	400a      	ands	r2, r1
 8006502:	601a      	str	r2, [r3, #0]
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	681a      	ldr	r2, [r3, #0]
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	2180      	movs	r1, #128	; 0x80
 8006510:	0189      	lsls	r1, r1, #6
 8006512:	430a      	orrs	r2, r1
 8006514:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	2251      	movs	r2, #81	; 0x51
 800651a:	2101      	movs	r1, #1
 800651c:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	2250      	movs	r2, #80	; 0x50
 8006522:	2100      	movs	r1, #0
 8006524:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8006526:	2303      	movs	r3, #3
 8006528:	e017      	b.n	800655a <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800652a:	697b      	ldr	r3, [r7, #20]
 800652c:	2b00      	cmp	r3, #0
 800652e:	d101      	bne.n	8006534 <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 8006530:	2300      	movs	r3, #0
 8006532:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8006534:	697b      	ldr	r3, [r7, #20]
 8006536:	3b01      	subs	r3, #1
 8006538:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	689b      	ldr	r3, [r3, #8]
 8006540:	68ba      	ldr	r2, [r7, #8]
 8006542:	4013      	ands	r3, r2
 8006544:	68ba      	ldr	r2, [r7, #8]
 8006546:	1ad3      	subs	r3, r2, r3
 8006548:	425a      	negs	r2, r3
 800654a:	4153      	adcs	r3, r2
 800654c:	b2db      	uxtb	r3, r3
 800654e:	001a      	movs	r2, r3
 8006550:	1dfb      	adds	r3, r7, #7
 8006552:	781b      	ldrb	r3, [r3, #0]
 8006554:	429a      	cmp	r2, r3
 8006556:	d197      	bne.n	8006488 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8006558:	2300      	movs	r3, #0
}
 800655a:	0018      	movs	r0, r3
 800655c:	46bd      	mov	sp, r7
 800655e:	b008      	add	sp, #32
 8006560:	bd80      	pop	{r7, pc}
 8006562:	46c0      	nop			; (mov r8, r8)
 8006564:	20000000 	.word	0x20000000
 8006568:	ffffdfff 	.word	0xffffdfff

0800656c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800656c:	b580      	push	{r7, lr}
 800656e:	b088      	sub	sp, #32
 8006570:	af02      	add	r7, sp, #8
 8006572:	60f8      	str	r0, [r7, #12]
 8006574:	60b9      	str	r1, [r7, #8]
 8006576:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8006578:	4b1d      	ldr	r3, [pc, #116]	; (80065f0 <SPI_EndRxTxTransaction+0x84>)
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	491d      	ldr	r1, [pc, #116]	; (80065f4 <SPI_EndRxTxTransaction+0x88>)
 800657e:	0018      	movs	r0, r3
 8006580:	f7f9 fdde 	bl	8000140 <__udivsi3>
 8006584:	0003      	movs	r3, r0
 8006586:	001a      	movs	r2, r3
 8006588:	0013      	movs	r3, r2
 800658a:	015b      	lsls	r3, r3, #5
 800658c:	1a9b      	subs	r3, r3, r2
 800658e:	009b      	lsls	r3, r3, #2
 8006590:	189b      	adds	r3, r3, r2
 8006592:	00db      	lsls	r3, r3, #3
 8006594:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	685a      	ldr	r2, [r3, #4]
 800659a:	2382      	movs	r3, #130	; 0x82
 800659c:	005b      	lsls	r3, r3, #1
 800659e:	429a      	cmp	r2, r3
 80065a0:	d112      	bne.n	80065c8 <SPI_EndRxTxTransaction+0x5c>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80065a2:	68ba      	ldr	r2, [r7, #8]
 80065a4:	68f8      	ldr	r0, [r7, #12]
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	9300      	str	r3, [sp, #0]
 80065aa:	0013      	movs	r3, r2
 80065ac:	2200      	movs	r2, #0
 80065ae:	2180      	movs	r1, #128	; 0x80
 80065b0:	f7ff ff4e 	bl	8006450 <SPI_WaitFlagStateUntilTimeout>
 80065b4:	1e03      	subs	r3, r0, #0
 80065b6:	d016      	beq.n	80065e6 <SPI_EndRxTxTransaction+0x7a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80065bc:	2220      	movs	r2, #32
 80065be:	431a      	orrs	r2, r3
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80065c4:	2303      	movs	r3, #3
 80065c6:	e00f      	b.n	80065e8 <SPI_EndRxTxTransaction+0x7c>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80065c8:	697b      	ldr	r3, [r7, #20]
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	d00a      	beq.n	80065e4 <SPI_EndRxTxTransaction+0x78>
      {
        break;
      }
      count--;
 80065ce:	697b      	ldr	r3, [r7, #20]
 80065d0:	3b01      	subs	r3, #1
 80065d2:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	689b      	ldr	r3, [r3, #8]
 80065da:	2280      	movs	r2, #128	; 0x80
 80065dc:	4013      	ands	r3, r2
 80065de:	2b80      	cmp	r3, #128	; 0x80
 80065e0:	d0f2      	beq.n	80065c8 <SPI_EndRxTxTransaction+0x5c>
 80065e2:	e000      	b.n	80065e6 <SPI_EndRxTxTransaction+0x7a>
        break;
 80065e4:	46c0      	nop			; (mov r8, r8)
  }

  return HAL_OK;
 80065e6:	2300      	movs	r3, #0
}
 80065e8:	0018      	movs	r0, r3
 80065ea:	46bd      	mov	sp, r7
 80065ec:	b006      	add	sp, #24
 80065ee:	bd80      	pop	{r7, pc}
 80065f0:	20000000 	.word	0x20000000
 80065f4:	016e3600 	.word	0x016e3600

080065f8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80065f8:	b580      	push	{r7, lr}
 80065fa:	b082      	sub	sp, #8
 80065fc:	af00      	add	r7, sp, #0
 80065fe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	2b00      	cmp	r3, #0
 8006604:	d101      	bne.n	800660a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006606:	2301      	movs	r3, #1
 8006608:	e044      	b.n	8006694 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800660e:	2b00      	cmp	r3, #0
 8006610:	d107      	bne.n	8006622 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	2274      	movs	r2, #116	; 0x74
 8006616:	2100      	movs	r1, #0
 8006618:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	0018      	movs	r0, r3
 800661e:	f7fd fb21 	bl	8003c64 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	2224      	movs	r2, #36	; 0x24
 8006626:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	681a      	ldr	r2, [r3, #0]
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	2101      	movs	r1, #1
 8006634:	438a      	bics	r2, r1
 8006636:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	0018      	movs	r0, r3
 800663c:	f000 f9c6 	bl	80069cc <UART_SetConfig>
 8006640:	0003      	movs	r3, r0
 8006642:	2b01      	cmp	r3, #1
 8006644:	d101      	bne.n	800664a <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8006646:	2301      	movs	r3, #1
 8006648:	e024      	b.n	8006694 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800664e:	2b00      	cmp	r3, #0
 8006650:	d003      	beq.n	800665a <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	0018      	movs	r0, r3
 8006656:	f000 fc59 	bl	8006f0c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	685a      	ldr	r2, [r3, #4]
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	490d      	ldr	r1, [pc, #52]	; (800669c <HAL_UART_Init+0xa4>)
 8006666:	400a      	ands	r2, r1
 8006668:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	689a      	ldr	r2, [r3, #8]
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	212a      	movs	r1, #42	; 0x2a
 8006676:	438a      	bics	r2, r1
 8006678:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	681a      	ldr	r2, [r3, #0]
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	2101      	movs	r1, #1
 8006686:	430a      	orrs	r2, r1
 8006688:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	0018      	movs	r0, r3
 800668e:	f000 fcf1 	bl	8007074 <UART_CheckIdleState>
 8006692:	0003      	movs	r3, r0
}
 8006694:	0018      	movs	r0, r3
 8006696:	46bd      	mov	sp, r7
 8006698:	b002      	add	sp, #8
 800669a:	bd80      	pop	{r7, pc}
 800669c:	ffffb7ff 	.word	0xffffb7ff

080066a0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80066a0:	b580      	push	{r7, lr}
 80066a2:	b08a      	sub	sp, #40	; 0x28
 80066a4:	af02      	add	r7, sp, #8
 80066a6:	60f8      	str	r0, [r7, #12]
 80066a8:	60b9      	str	r1, [r7, #8]
 80066aa:	603b      	str	r3, [r7, #0]
 80066ac:	1dbb      	adds	r3, r7, #6
 80066ae:	801a      	strh	r2, [r3, #0]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80066b4:	2b20      	cmp	r3, #32
 80066b6:	d000      	beq.n	80066ba <HAL_UART_Transmit+0x1a>
 80066b8:	e095      	b.n	80067e6 <HAL_UART_Transmit+0x146>
  {
    if ((pData == NULL) || (Size == 0U))
 80066ba:	68bb      	ldr	r3, [r7, #8]
 80066bc:	2b00      	cmp	r3, #0
 80066be:	d003      	beq.n	80066c8 <HAL_UART_Transmit+0x28>
 80066c0:	1dbb      	adds	r3, r7, #6
 80066c2:	881b      	ldrh	r3, [r3, #0]
 80066c4:	2b00      	cmp	r3, #0
 80066c6:	d101      	bne.n	80066cc <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 80066c8:	2301      	movs	r3, #1
 80066ca:	e08d      	b.n	80067e8 <HAL_UART_Transmit+0x148>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	689a      	ldr	r2, [r3, #8]
 80066d0:	2380      	movs	r3, #128	; 0x80
 80066d2:	015b      	lsls	r3, r3, #5
 80066d4:	429a      	cmp	r2, r3
 80066d6:	d109      	bne.n	80066ec <HAL_UART_Transmit+0x4c>
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	691b      	ldr	r3, [r3, #16]
 80066dc:	2b00      	cmp	r3, #0
 80066de:	d105      	bne.n	80066ec <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80066e0:	68bb      	ldr	r3, [r7, #8]
 80066e2:	2201      	movs	r2, #1
 80066e4:	4013      	ands	r3, r2
 80066e6:	d001      	beq.n	80066ec <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 80066e8:	2301      	movs	r3, #1
 80066ea:	e07d      	b.n	80067e8 <HAL_UART_Transmit+0x148>
      }
    }

    __HAL_LOCK(huart);
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	2274      	movs	r2, #116	; 0x74
 80066f0:	5c9b      	ldrb	r3, [r3, r2]
 80066f2:	2b01      	cmp	r3, #1
 80066f4:	d101      	bne.n	80066fa <HAL_UART_Transmit+0x5a>
 80066f6:	2302      	movs	r3, #2
 80066f8:	e076      	b.n	80067e8 <HAL_UART_Transmit+0x148>
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	2274      	movs	r2, #116	; 0x74
 80066fe:	2101      	movs	r1, #1
 8006700:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006702:	68fb      	ldr	r3, [r7, #12]
 8006704:	2280      	movs	r2, #128	; 0x80
 8006706:	2100      	movs	r1, #0
 8006708:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800670a:	68fb      	ldr	r3, [r7, #12]
 800670c:	2221      	movs	r2, #33	; 0x21
 800670e:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006710:	f7fd fc9e 	bl	8004050 <HAL_GetTick>
 8006714:	0003      	movs	r3, r0
 8006716:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	1dba      	adds	r2, r7, #6
 800671c:	2150      	movs	r1, #80	; 0x50
 800671e:	8812      	ldrh	r2, [r2, #0]
 8006720:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	1dba      	adds	r2, r7, #6
 8006726:	2152      	movs	r1, #82	; 0x52
 8006728:	8812      	ldrh	r2, [r2, #0]
 800672a:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	689a      	ldr	r2, [r3, #8]
 8006730:	2380      	movs	r3, #128	; 0x80
 8006732:	015b      	lsls	r3, r3, #5
 8006734:	429a      	cmp	r2, r3
 8006736:	d108      	bne.n	800674a <HAL_UART_Transmit+0xaa>
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	691b      	ldr	r3, [r3, #16]
 800673c:	2b00      	cmp	r3, #0
 800673e:	d104      	bne.n	800674a <HAL_UART_Transmit+0xaa>
    {
      pdata8bits  = NULL;
 8006740:	2300      	movs	r3, #0
 8006742:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8006744:	68bb      	ldr	r3, [r7, #8]
 8006746:	61bb      	str	r3, [r7, #24]
 8006748:	e003      	b.n	8006752 <HAL_UART_Transmit+0xb2>
    }
    else
    {
      pdata8bits  = pData;
 800674a:	68bb      	ldr	r3, [r7, #8]
 800674c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800674e:	2300      	movs	r3, #0
 8006750:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8006752:	68fb      	ldr	r3, [r7, #12]
 8006754:	2274      	movs	r2, #116	; 0x74
 8006756:	2100      	movs	r1, #0
 8006758:	5499      	strb	r1, [r3, r2]

    while (huart->TxXferCount > 0U)
 800675a:	e02c      	b.n	80067b6 <HAL_UART_Transmit+0x116>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800675c:	697a      	ldr	r2, [r7, #20]
 800675e:	68f8      	ldr	r0, [r7, #12]
 8006760:	683b      	ldr	r3, [r7, #0]
 8006762:	9300      	str	r3, [sp, #0]
 8006764:	0013      	movs	r3, r2
 8006766:	2200      	movs	r2, #0
 8006768:	2180      	movs	r1, #128	; 0x80
 800676a:	f000 fccb 	bl	8007104 <UART_WaitOnFlagUntilTimeout>
 800676e:	1e03      	subs	r3, r0, #0
 8006770:	d001      	beq.n	8006776 <HAL_UART_Transmit+0xd6>
      {
        return HAL_TIMEOUT;
 8006772:	2303      	movs	r3, #3
 8006774:	e038      	b.n	80067e8 <HAL_UART_Transmit+0x148>
      }
      if (pdata8bits == NULL)
 8006776:	69fb      	ldr	r3, [r7, #28]
 8006778:	2b00      	cmp	r3, #0
 800677a:	d10b      	bne.n	8006794 <HAL_UART_Transmit+0xf4>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800677c:	69bb      	ldr	r3, [r7, #24]
 800677e:	881b      	ldrh	r3, [r3, #0]
 8006780:	001a      	movs	r2, r3
 8006782:	68fb      	ldr	r3, [r7, #12]
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	05d2      	lsls	r2, r2, #23
 8006788:	0dd2      	lsrs	r2, r2, #23
 800678a:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800678c:	69bb      	ldr	r3, [r7, #24]
 800678e:	3302      	adds	r3, #2
 8006790:	61bb      	str	r3, [r7, #24]
 8006792:	e007      	b.n	80067a4 <HAL_UART_Transmit+0x104>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006794:	69fb      	ldr	r3, [r7, #28]
 8006796:	781a      	ldrb	r2, [r3, #0]
 8006798:	68fb      	ldr	r3, [r7, #12]
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800679e:	69fb      	ldr	r3, [r7, #28]
 80067a0:	3301      	adds	r3, #1
 80067a2:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80067a4:	68fb      	ldr	r3, [r7, #12]
 80067a6:	2252      	movs	r2, #82	; 0x52
 80067a8:	5a9b      	ldrh	r3, [r3, r2]
 80067aa:	b29b      	uxth	r3, r3
 80067ac:	3b01      	subs	r3, #1
 80067ae:	b299      	uxth	r1, r3
 80067b0:	68fb      	ldr	r3, [r7, #12]
 80067b2:	2252      	movs	r2, #82	; 0x52
 80067b4:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	2252      	movs	r2, #82	; 0x52
 80067ba:	5a9b      	ldrh	r3, [r3, r2]
 80067bc:	b29b      	uxth	r3, r3
 80067be:	2b00      	cmp	r3, #0
 80067c0:	d1cc      	bne.n	800675c <HAL_UART_Transmit+0xbc>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80067c2:	697a      	ldr	r2, [r7, #20]
 80067c4:	68f8      	ldr	r0, [r7, #12]
 80067c6:	683b      	ldr	r3, [r7, #0]
 80067c8:	9300      	str	r3, [sp, #0]
 80067ca:	0013      	movs	r3, r2
 80067cc:	2200      	movs	r2, #0
 80067ce:	2140      	movs	r1, #64	; 0x40
 80067d0:	f000 fc98 	bl	8007104 <UART_WaitOnFlagUntilTimeout>
 80067d4:	1e03      	subs	r3, r0, #0
 80067d6:	d001      	beq.n	80067dc <HAL_UART_Transmit+0x13c>
    {
      return HAL_TIMEOUT;
 80067d8:	2303      	movs	r3, #3
 80067da:	e005      	b.n	80067e8 <HAL_UART_Transmit+0x148>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	2220      	movs	r2, #32
 80067e0:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 80067e2:	2300      	movs	r3, #0
 80067e4:	e000      	b.n	80067e8 <HAL_UART_Transmit+0x148>
  }
  else
  {
    return HAL_BUSY;
 80067e6:	2302      	movs	r3, #2
  }
}
 80067e8:	0018      	movs	r0, r3
 80067ea:	46bd      	mov	sp, r7
 80067ec:	b008      	add	sp, #32
 80067ee:	bd80      	pop	{r7, pc}

080067f0 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80067f0:	b580      	push	{r7, lr}
 80067f2:	b08a      	sub	sp, #40	; 0x28
 80067f4:	af02      	add	r7, sp, #8
 80067f6:	60f8      	str	r0, [r7, #12]
 80067f8:	60b9      	str	r1, [r7, #8]
 80067fa:	603b      	str	r3, [r7, #0]
 80067fc:	1dbb      	adds	r3, r7, #6
 80067fe:	801a      	strh	r2, [r3, #0]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006804:	2b20      	cmp	r3, #32
 8006806:	d000      	beq.n	800680a <HAL_UART_Receive+0x1a>
 8006808:	e0d9      	b.n	80069be <HAL_UART_Receive+0x1ce>
  {
    if ((pData == NULL) || (Size == 0U))
 800680a:	68bb      	ldr	r3, [r7, #8]
 800680c:	2b00      	cmp	r3, #0
 800680e:	d003      	beq.n	8006818 <HAL_UART_Receive+0x28>
 8006810:	1dbb      	adds	r3, r7, #6
 8006812:	881b      	ldrh	r3, [r3, #0]
 8006814:	2b00      	cmp	r3, #0
 8006816:	d101      	bne.n	800681c <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8006818:	2301      	movs	r3, #1
 800681a:	e0d1      	b.n	80069c0 <HAL_UART_Receive+0x1d0>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800681c:	68fb      	ldr	r3, [r7, #12]
 800681e:	689a      	ldr	r2, [r3, #8]
 8006820:	2380      	movs	r3, #128	; 0x80
 8006822:	015b      	lsls	r3, r3, #5
 8006824:	429a      	cmp	r2, r3
 8006826:	d109      	bne.n	800683c <HAL_UART_Receive+0x4c>
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	691b      	ldr	r3, [r3, #16]
 800682c:	2b00      	cmp	r3, #0
 800682e:	d105      	bne.n	800683c <HAL_UART_Receive+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8006830:	68bb      	ldr	r3, [r7, #8]
 8006832:	2201      	movs	r2, #1
 8006834:	4013      	ands	r3, r2
 8006836:	d001      	beq.n	800683c <HAL_UART_Receive+0x4c>
      {
        return  HAL_ERROR;
 8006838:	2301      	movs	r3, #1
 800683a:	e0c1      	b.n	80069c0 <HAL_UART_Receive+0x1d0>
      }
    }

    __HAL_LOCK(huart);
 800683c:	68fb      	ldr	r3, [r7, #12]
 800683e:	2274      	movs	r2, #116	; 0x74
 8006840:	5c9b      	ldrb	r3, [r3, r2]
 8006842:	2b01      	cmp	r3, #1
 8006844:	d101      	bne.n	800684a <HAL_UART_Receive+0x5a>
 8006846:	2302      	movs	r3, #2
 8006848:	e0ba      	b.n	80069c0 <HAL_UART_Receive+0x1d0>
 800684a:	68fb      	ldr	r3, [r7, #12]
 800684c:	2274      	movs	r2, #116	; 0x74
 800684e:	2101      	movs	r1, #1
 8006850:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006852:	68fb      	ldr	r3, [r7, #12]
 8006854:	2280      	movs	r2, #128	; 0x80
 8006856:	2100      	movs	r1, #0
 8006858:	5099      	str	r1, [r3, r2]
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	2222      	movs	r2, #34	; 0x22
 800685e:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	2200      	movs	r2, #0
 8006864:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006866:	f7fd fbf3 	bl	8004050 <HAL_GetTick>
 800686a:	0003      	movs	r3, r0
 800686c:	617b      	str	r3, [r7, #20]

    huart->RxXferSize  = Size;
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	1dba      	adds	r2, r7, #6
 8006872:	2158      	movs	r1, #88	; 0x58
 8006874:	8812      	ldrh	r2, [r2, #0]
 8006876:	525a      	strh	r2, [r3, r1]
    huart->RxXferCount = Size;
 8006878:	68fb      	ldr	r3, [r7, #12]
 800687a:	1dba      	adds	r2, r7, #6
 800687c:	215a      	movs	r1, #90	; 0x5a
 800687e:	8812      	ldrh	r2, [r2, #0]
 8006880:	525a      	strh	r2, [r3, r1]

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8006882:	68fb      	ldr	r3, [r7, #12]
 8006884:	689a      	ldr	r2, [r3, #8]
 8006886:	2380      	movs	r3, #128	; 0x80
 8006888:	015b      	lsls	r3, r3, #5
 800688a:	429a      	cmp	r2, r3
 800688c:	d10d      	bne.n	80068aa <HAL_UART_Receive+0xba>
 800688e:	68fb      	ldr	r3, [r7, #12]
 8006890:	691b      	ldr	r3, [r3, #16]
 8006892:	2b00      	cmp	r3, #0
 8006894:	d104      	bne.n	80068a0 <HAL_UART_Receive+0xb0>
 8006896:	68fb      	ldr	r3, [r7, #12]
 8006898:	225c      	movs	r2, #92	; 0x5c
 800689a:	494b      	ldr	r1, [pc, #300]	; (80069c8 <HAL_UART_Receive+0x1d8>)
 800689c:	5299      	strh	r1, [r3, r2]
 800689e:	e02e      	b.n	80068fe <HAL_UART_Receive+0x10e>
 80068a0:	68fb      	ldr	r3, [r7, #12]
 80068a2:	225c      	movs	r2, #92	; 0x5c
 80068a4:	21ff      	movs	r1, #255	; 0xff
 80068a6:	5299      	strh	r1, [r3, r2]
 80068a8:	e029      	b.n	80068fe <HAL_UART_Receive+0x10e>
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	689b      	ldr	r3, [r3, #8]
 80068ae:	2b00      	cmp	r3, #0
 80068b0:	d10d      	bne.n	80068ce <HAL_UART_Receive+0xde>
 80068b2:	68fb      	ldr	r3, [r7, #12]
 80068b4:	691b      	ldr	r3, [r3, #16]
 80068b6:	2b00      	cmp	r3, #0
 80068b8:	d104      	bne.n	80068c4 <HAL_UART_Receive+0xd4>
 80068ba:	68fb      	ldr	r3, [r7, #12]
 80068bc:	225c      	movs	r2, #92	; 0x5c
 80068be:	21ff      	movs	r1, #255	; 0xff
 80068c0:	5299      	strh	r1, [r3, r2]
 80068c2:	e01c      	b.n	80068fe <HAL_UART_Receive+0x10e>
 80068c4:	68fb      	ldr	r3, [r7, #12]
 80068c6:	225c      	movs	r2, #92	; 0x5c
 80068c8:	217f      	movs	r1, #127	; 0x7f
 80068ca:	5299      	strh	r1, [r3, r2]
 80068cc:	e017      	b.n	80068fe <HAL_UART_Receive+0x10e>
 80068ce:	68fb      	ldr	r3, [r7, #12]
 80068d0:	689a      	ldr	r2, [r3, #8]
 80068d2:	2380      	movs	r3, #128	; 0x80
 80068d4:	055b      	lsls	r3, r3, #21
 80068d6:	429a      	cmp	r2, r3
 80068d8:	d10d      	bne.n	80068f6 <HAL_UART_Receive+0x106>
 80068da:	68fb      	ldr	r3, [r7, #12]
 80068dc:	691b      	ldr	r3, [r3, #16]
 80068de:	2b00      	cmp	r3, #0
 80068e0:	d104      	bne.n	80068ec <HAL_UART_Receive+0xfc>
 80068e2:	68fb      	ldr	r3, [r7, #12]
 80068e4:	225c      	movs	r2, #92	; 0x5c
 80068e6:	217f      	movs	r1, #127	; 0x7f
 80068e8:	5299      	strh	r1, [r3, r2]
 80068ea:	e008      	b.n	80068fe <HAL_UART_Receive+0x10e>
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	225c      	movs	r2, #92	; 0x5c
 80068f0:	213f      	movs	r1, #63	; 0x3f
 80068f2:	5299      	strh	r1, [r3, r2]
 80068f4:	e003      	b.n	80068fe <HAL_UART_Receive+0x10e>
 80068f6:	68fb      	ldr	r3, [r7, #12]
 80068f8:	225c      	movs	r2, #92	; 0x5c
 80068fa:	2100      	movs	r1, #0
 80068fc:	5299      	strh	r1, [r3, r2]
    uhMask = huart->Mask;
 80068fe:	2312      	movs	r3, #18
 8006900:	18fb      	adds	r3, r7, r3
 8006902:	68fa      	ldr	r2, [r7, #12]
 8006904:	215c      	movs	r1, #92	; 0x5c
 8006906:	5a52      	ldrh	r2, [r2, r1]
 8006908:	801a      	strh	r2, [r3, #0]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800690a:	68fb      	ldr	r3, [r7, #12]
 800690c:	689a      	ldr	r2, [r3, #8]
 800690e:	2380      	movs	r3, #128	; 0x80
 8006910:	015b      	lsls	r3, r3, #5
 8006912:	429a      	cmp	r2, r3
 8006914:	d108      	bne.n	8006928 <HAL_UART_Receive+0x138>
 8006916:	68fb      	ldr	r3, [r7, #12]
 8006918:	691b      	ldr	r3, [r3, #16]
 800691a:	2b00      	cmp	r3, #0
 800691c:	d104      	bne.n	8006928 <HAL_UART_Receive+0x138>
    {
      pdata8bits  = NULL;
 800691e:	2300      	movs	r3, #0
 8006920:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8006922:	68bb      	ldr	r3, [r7, #8]
 8006924:	61bb      	str	r3, [r7, #24]
 8006926:	e003      	b.n	8006930 <HAL_UART_Receive+0x140>
    }
    else
    {
      pdata8bits  = pData;
 8006928:	68bb      	ldr	r3, [r7, #8]
 800692a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800692c:	2300      	movs	r3, #0
 800692e:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	2274      	movs	r2, #116	; 0x74
 8006934:	2100      	movs	r1, #0
 8006936:	5499      	strb	r1, [r3, r2]

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8006938:	e036      	b.n	80069a8 <HAL_UART_Receive+0x1b8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800693a:	697a      	ldr	r2, [r7, #20]
 800693c:	68f8      	ldr	r0, [r7, #12]
 800693e:	683b      	ldr	r3, [r7, #0]
 8006940:	9300      	str	r3, [sp, #0]
 8006942:	0013      	movs	r3, r2
 8006944:	2200      	movs	r2, #0
 8006946:	2120      	movs	r1, #32
 8006948:	f000 fbdc 	bl	8007104 <UART_WaitOnFlagUntilTimeout>
 800694c:	1e03      	subs	r3, r0, #0
 800694e:	d001      	beq.n	8006954 <HAL_UART_Receive+0x164>
      {
        return HAL_TIMEOUT;
 8006950:	2303      	movs	r3, #3
 8006952:	e035      	b.n	80069c0 <HAL_UART_Receive+0x1d0>
      }
      if (pdata8bits == NULL)
 8006954:	69fb      	ldr	r3, [r7, #28]
 8006956:	2b00      	cmp	r3, #0
 8006958:	d10e      	bne.n	8006978 <HAL_UART_Receive+0x188>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 800695a:	68fb      	ldr	r3, [r7, #12]
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006960:	b29b      	uxth	r3, r3
 8006962:	2212      	movs	r2, #18
 8006964:	18ba      	adds	r2, r7, r2
 8006966:	8812      	ldrh	r2, [r2, #0]
 8006968:	4013      	ands	r3, r2
 800696a:	b29a      	uxth	r2, r3
 800696c:	69bb      	ldr	r3, [r7, #24]
 800696e:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8006970:	69bb      	ldr	r3, [r7, #24]
 8006972:	3302      	adds	r3, #2
 8006974:	61bb      	str	r3, [r7, #24]
 8006976:	e00e      	b.n	8006996 <HAL_UART_Receive+0x1a6>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800697e:	b2db      	uxtb	r3, r3
 8006980:	2212      	movs	r2, #18
 8006982:	18ba      	adds	r2, r7, r2
 8006984:	8812      	ldrh	r2, [r2, #0]
 8006986:	b2d2      	uxtb	r2, r2
 8006988:	4013      	ands	r3, r2
 800698a:	b2da      	uxtb	r2, r3
 800698c:	69fb      	ldr	r3, [r7, #28]
 800698e:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8006990:	69fb      	ldr	r3, [r7, #28]
 8006992:	3301      	adds	r3, #1
 8006994:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8006996:	68fb      	ldr	r3, [r7, #12]
 8006998:	225a      	movs	r2, #90	; 0x5a
 800699a:	5a9b      	ldrh	r3, [r3, r2]
 800699c:	b29b      	uxth	r3, r3
 800699e:	3b01      	subs	r3, #1
 80069a0:	b299      	uxth	r1, r3
 80069a2:	68fb      	ldr	r3, [r7, #12]
 80069a4:	225a      	movs	r2, #90	; 0x5a
 80069a6:	5299      	strh	r1, [r3, r2]
    while (huart->RxXferCount > 0U)
 80069a8:	68fb      	ldr	r3, [r7, #12]
 80069aa:	225a      	movs	r2, #90	; 0x5a
 80069ac:	5a9b      	ldrh	r3, [r3, r2]
 80069ae:	b29b      	uxth	r3, r3
 80069b0:	2b00      	cmp	r3, #0
 80069b2:	d1c2      	bne.n	800693a <HAL_UART_Receive+0x14a>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	2220      	movs	r2, #32
 80069b8:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 80069ba:	2300      	movs	r3, #0
 80069bc:	e000      	b.n	80069c0 <HAL_UART_Receive+0x1d0>
  }
  else
  {
    return HAL_BUSY;
 80069be:	2302      	movs	r3, #2
  }
}
 80069c0:	0018      	movs	r0, r3
 80069c2:	46bd      	mov	sp, r7
 80069c4:	b008      	add	sp, #32
 80069c6:	bd80      	pop	{r7, pc}
 80069c8:	000001ff 	.word	0x000001ff

080069cc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80069cc:	b5b0      	push	{r4, r5, r7, lr}
 80069ce:	b08e      	sub	sp, #56	; 0x38
 80069d0:	af00      	add	r7, sp, #0
 80069d2:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80069d4:	231a      	movs	r3, #26
 80069d6:	2218      	movs	r2, #24
 80069d8:	4694      	mov	ip, r2
 80069da:	44bc      	add	ip, r7
 80069dc:	4463      	add	r3, ip
 80069de:	2200      	movs	r2, #0
 80069e0:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80069e2:	69fb      	ldr	r3, [r7, #28]
 80069e4:	689a      	ldr	r2, [r3, #8]
 80069e6:	69fb      	ldr	r3, [r7, #28]
 80069e8:	691b      	ldr	r3, [r3, #16]
 80069ea:	431a      	orrs	r2, r3
 80069ec:	69fb      	ldr	r3, [r7, #28]
 80069ee:	695b      	ldr	r3, [r3, #20]
 80069f0:	431a      	orrs	r2, r3
 80069f2:	69fb      	ldr	r3, [r7, #28]
 80069f4:	69db      	ldr	r3, [r3, #28]
 80069f6:	4313      	orrs	r3, r2
 80069f8:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80069fa:	69fb      	ldr	r3, [r7, #28]
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	4ac1      	ldr	r2, [pc, #772]	; (8006d08 <UART_SetConfig+0x33c>)
 8006a02:	4013      	ands	r3, r2
 8006a04:	0019      	movs	r1, r3
 8006a06:	69fb      	ldr	r3, [r7, #28]
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006a0c:	430a      	orrs	r2, r1
 8006a0e:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006a10:	69fb      	ldr	r3, [r7, #28]
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	685b      	ldr	r3, [r3, #4]
 8006a16:	4abd      	ldr	r2, [pc, #756]	; (8006d0c <UART_SetConfig+0x340>)
 8006a18:	4013      	ands	r3, r2
 8006a1a:	0019      	movs	r1, r3
 8006a1c:	69fb      	ldr	r3, [r7, #28]
 8006a1e:	68da      	ldr	r2, [r3, #12]
 8006a20:	69fb      	ldr	r3, [r7, #28]
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	430a      	orrs	r2, r1
 8006a26:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006a28:	69fb      	ldr	r3, [r7, #28]
 8006a2a:	699b      	ldr	r3, [r3, #24]
 8006a2c:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006a2e:	69fb      	ldr	r3, [r7, #28]
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	4ab7      	ldr	r2, [pc, #732]	; (8006d10 <UART_SetConfig+0x344>)
 8006a34:	4293      	cmp	r3, r2
 8006a36:	d004      	beq.n	8006a42 <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006a38:	69fb      	ldr	r3, [r7, #28]
 8006a3a:	6a1b      	ldr	r3, [r3, #32]
 8006a3c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006a3e:	4313      	orrs	r3, r2
 8006a40:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006a42:	69fb      	ldr	r3, [r7, #28]
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	689b      	ldr	r3, [r3, #8]
 8006a48:	4ab2      	ldr	r2, [pc, #712]	; (8006d14 <UART_SetConfig+0x348>)
 8006a4a:	4013      	ands	r3, r2
 8006a4c:	0019      	movs	r1, r3
 8006a4e:	69fb      	ldr	r3, [r7, #28]
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006a54:	430a      	orrs	r2, r1
 8006a56:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006a58:	69fb      	ldr	r3, [r7, #28]
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	4aae      	ldr	r2, [pc, #696]	; (8006d18 <UART_SetConfig+0x34c>)
 8006a5e:	4293      	cmp	r3, r2
 8006a60:	d136      	bne.n	8006ad0 <UART_SetConfig+0x104>
 8006a62:	4bae      	ldr	r3, [pc, #696]	; (8006d1c <UART_SetConfig+0x350>)
 8006a64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006a66:	2203      	movs	r2, #3
 8006a68:	4013      	ands	r3, r2
 8006a6a:	2b03      	cmp	r3, #3
 8006a6c:	d020      	beq.n	8006ab0 <UART_SetConfig+0xe4>
 8006a6e:	d827      	bhi.n	8006ac0 <UART_SetConfig+0xf4>
 8006a70:	2b02      	cmp	r3, #2
 8006a72:	d00d      	beq.n	8006a90 <UART_SetConfig+0xc4>
 8006a74:	d824      	bhi.n	8006ac0 <UART_SetConfig+0xf4>
 8006a76:	2b00      	cmp	r3, #0
 8006a78:	d002      	beq.n	8006a80 <UART_SetConfig+0xb4>
 8006a7a:	2b01      	cmp	r3, #1
 8006a7c:	d010      	beq.n	8006aa0 <UART_SetConfig+0xd4>
 8006a7e:	e01f      	b.n	8006ac0 <UART_SetConfig+0xf4>
 8006a80:	231b      	movs	r3, #27
 8006a82:	2218      	movs	r2, #24
 8006a84:	4694      	mov	ip, r2
 8006a86:	44bc      	add	ip, r7
 8006a88:	4463      	add	r3, ip
 8006a8a:	2201      	movs	r2, #1
 8006a8c:	701a      	strb	r2, [r3, #0]
 8006a8e:	e0ab      	b.n	8006be8 <UART_SetConfig+0x21c>
 8006a90:	231b      	movs	r3, #27
 8006a92:	2218      	movs	r2, #24
 8006a94:	4694      	mov	ip, r2
 8006a96:	44bc      	add	ip, r7
 8006a98:	4463      	add	r3, ip
 8006a9a:	2202      	movs	r2, #2
 8006a9c:	701a      	strb	r2, [r3, #0]
 8006a9e:	e0a3      	b.n	8006be8 <UART_SetConfig+0x21c>
 8006aa0:	231b      	movs	r3, #27
 8006aa2:	2218      	movs	r2, #24
 8006aa4:	4694      	mov	ip, r2
 8006aa6:	44bc      	add	ip, r7
 8006aa8:	4463      	add	r3, ip
 8006aaa:	2204      	movs	r2, #4
 8006aac:	701a      	strb	r2, [r3, #0]
 8006aae:	e09b      	b.n	8006be8 <UART_SetConfig+0x21c>
 8006ab0:	231b      	movs	r3, #27
 8006ab2:	2218      	movs	r2, #24
 8006ab4:	4694      	mov	ip, r2
 8006ab6:	44bc      	add	ip, r7
 8006ab8:	4463      	add	r3, ip
 8006aba:	2208      	movs	r2, #8
 8006abc:	701a      	strb	r2, [r3, #0]
 8006abe:	e093      	b.n	8006be8 <UART_SetConfig+0x21c>
 8006ac0:	231b      	movs	r3, #27
 8006ac2:	2218      	movs	r2, #24
 8006ac4:	4694      	mov	ip, r2
 8006ac6:	44bc      	add	ip, r7
 8006ac8:	4463      	add	r3, ip
 8006aca:	2210      	movs	r2, #16
 8006acc:	701a      	strb	r2, [r3, #0]
 8006ace:	e08b      	b.n	8006be8 <UART_SetConfig+0x21c>
 8006ad0:	69fb      	ldr	r3, [r7, #28]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	4a92      	ldr	r2, [pc, #584]	; (8006d20 <UART_SetConfig+0x354>)
 8006ad6:	4293      	cmp	r3, r2
 8006ad8:	d136      	bne.n	8006b48 <UART_SetConfig+0x17c>
 8006ada:	4b90      	ldr	r3, [pc, #576]	; (8006d1c <UART_SetConfig+0x350>)
 8006adc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006ade:	220c      	movs	r2, #12
 8006ae0:	4013      	ands	r3, r2
 8006ae2:	2b0c      	cmp	r3, #12
 8006ae4:	d020      	beq.n	8006b28 <UART_SetConfig+0x15c>
 8006ae6:	d827      	bhi.n	8006b38 <UART_SetConfig+0x16c>
 8006ae8:	2b08      	cmp	r3, #8
 8006aea:	d00d      	beq.n	8006b08 <UART_SetConfig+0x13c>
 8006aec:	d824      	bhi.n	8006b38 <UART_SetConfig+0x16c>
 8006aee:	2b00      	cmp	r3, #0
 8006af0:	d002      	beq.n	8006af8 <UART_SetConfig+0x12c>
 8006af2:	2b04      	cmp	r3, #4
 8006af4:	d010      	beq.n	8006b18 <UART_SetConfig+0x14c>
 8006af6:	e01f      	b.n	8006b38 <UART_SetConfig+0x16c>
 8006af8:	231b      	movs	r3, #27
 8006afa:	2218      	movs	r2, #24
 8006afc:	4694      	mov	ip, r2
 8006afe:	44bc      	add	ip, r7
 8006b00:	4463      	add	r3, ip
 8006b02:	2200      	movs	r2, #0
 8006b04:	701a      	strb	r2, [r3, #0]
 8006b06:	e06f      	b.n	8006be8 <UART_SetConfig+0x21c>
 8006b08:	231b      	movs	r3, #27
 8006b0a:	2218      	movs	r2, #24
 8006b0c:	4694      	mov	ip, r2
 8006b0e:	44bc      	add	ip, r7
 8006b10:	4463      	add	r3, ip
 8006b12:	2202      	movs	r2, #2
 8006b14:	701a      	strb	r2, [r3, #0]
 8006b16:	e067      	b.n	8006be8 <UART_SetConfig+0x21c>
 8006b18:	231b      	movs	r3, #27
 8006b1a:	2218      	movs	r2, #24
 8006b1c:	4694      	mov	ip, r2
 8006b1e:	44bc      	add	ip, r7
 8006b20:	4463      	add	r3, ip
 8006b22:	2204      	movs	r2, #4
 8006b24:	701a      	strb	r2, [r3, #0]
 8006b26:	e05f      	b.n	8006be8 <UART_SetConfig+0x21c>
 8006b28:	231b      	movs	r3, #27
 8006b2a:	2218      	movs	r2, #24
 8006b2c:	4694      	mov	ip, r2
 8006b2e:	44bc      	add	ip, r7
 8006b30:	4463      	add	r3, ip
 8006b32:	2208      	movs	r2, #8
 8006b34:	701a      	strb	r2, [r3, #0]
 8006b36:	e057      	b.n	8006be8 <UART_SetConfig+0x21c>
 8006b38:	231b      	movs	r3, #27
 8006b3a:	2218      	movs	r2, #24
 8006b3c:	4694      	mov	ip, r2
 8006b3e:	44bc      	add	ip, r7
 8006b40:	4463      	add	r3, ip
 8006b42:	2210      	movs	r2, #16
 8006b44:	701a      	strb	r2, [r3, #0]
 8006b46:	e04f      	b.n	8006be8 <UART_SetConfig+0x21c>
 8006b48:	69fb      	ldr	r3, [r7, #28]
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	4a70      	ldr	r2, [pc, #448]	; (8006d10 <UART_SetConfig+0x344>)
 8006b4e:	4293      	cmp	r3, r2
 8006b50:	d143      	bne.n	8006bda <UART_SetConfig+0x20e>
 8006b52:	4b72      	ldr	r3, [pc, #456]	; (8006d1c <UART_SetConfig+0x350>)
 8006b54:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006b56:	23c0      	movs	r3, #192	; 0xc0
 8006b58:	011b      	lsls	r3, r3, #4
 8006b5a:	4013      	ands	r3, r2
 8006b5c:	22c0      	movs	r2, #192	; 0xc0
 8006b5e:	0112      	lsls	r2, r2, #4
 8006b60:	4293      	cmp	r3, r2
 8006b62:	d02a      	beq.n	8006bba <UART_SetConfig+0x1ee>
 8006b64:	22c0      	movs	r2, #192	; 0xc0
 8006b66:	0112      	lsls	r2, r2, #4
 8006b68:	4293      	cmp	r3, r2
 8006b6a:	d82e      	bhi.n	8006bca <UART_SetConfig+0x1fe>
 8006b6c:	2280      	movs	r2, #128	; 0x80
 8006b6e:	0112      	lsls	r2, r2, #4
 8006b70:	4293      	cmp	r3, r2
 8006b72:	d012      	beq.n	8006b9a <UART_SetConfig+0x1ce>
 8006b74:	2280      	movs	r2, #128	; 0x80
 8006b76:	0112      	lsls	r2, r2, #4
 8006b78:	4293      	cmp	r3, r2
 8006b7a:	d826      	bhi.n	8006bca <UART_SetConfig+0x1fe>
 8006b7c:	2b00      	cmp	r3, #0
 8006b7e:	d004      	beq.n	8006b8a <UART_SetConfig+0x1be>
 8006b80:	2280      	movs	r2, #128	; 0x80
 8006b82:	00d2      	lsls	r2, r2, #3
 8006b84:	4293      	cmp	r3, r2
 8006b86:	d010      	beq.n	8006baa <UART_SetConfig+0x1de>
 8006b88:	e01f      	b.n	8006bca <UART_SetConfig+0x1fe>
 8006b8a:	231b      	movs	r3, #27
 8006b8c:	2218      	movs	r2, #24
 8006b8e:	4694      	mov	ip, r2
 8006b90:	44bc      	add	ip, r7
 8006b92:	4463      	add	r3, ip
 8006b94:	2200      	movs	r2, #0
 8006b96:	701a      	strb	r2, [r3, #0]
 8006b98:	e026      	b.n	8006be8 <UART_SetConfig+0x21c>
 8006b9a:	231b      	movs	r3, #27
 8006b9c:	2218      	movs	r2, #24
 8006b9e:	4694      	mov	ip, r2
 8006ba0:	44bc      	add	ip, r7
 8006ba2:	4463      	add	r3, ip
 8006ba4:	2202      	movs	r2, #2
 8006ba6:	701a      	strb	r2, [r3, #0]
 8006ba8:	e01e      	b.n	8006be8 <UART_SetConfig+0x21c>
 8006baa:	231b      	movs	r3, #27
 8006bac:	2218      	movs	r2, #24
 8006bae:	4694      	mov	ip, r2
 8006bb0:	44bc      	add	ip, r7
 8006bb2:	4463      	add	r3, ip
 8006bb4:	2204      	movs	r2, #4
 8006bb6:	701a      	strb	r2, [r3, #0]
 8006bb8:	e016      	b.n	8006be8 <UART_SetConfig+0x21c>
 8006bba:	231b      	movs	r3, #27
 8006bbc:	2218      	movs	r2, #24
 8006bbe:	4694      	mov	ip, r2
 8006bc0:	44bc      	add	ip, r7
 8006bc2:	4463      	add	r3, ip
 8006bc4:	2208      	movs	r2, #8
 8006bc6:	701a      	strb	r2, [r3, #0]
 8006bc8:	e00e      	b.n	8006be8 <UART_SetConfig+0x21c>
 8006bca:	231b      	movs	r3, #27
 8006bcc:	2218      	movs	r2, #24
 8006bce:	4694      	mov	ip, r2
 8006bd0:	44bc      	add	ip, r7
 8006bd2:	4463      	add	r3, ip
 8006bd4:	2210      	movs	r2, #16
 8006bd6:	701a      	strb	r2, [r3, #0]
 8006bd8:	e006      	b.n	8006be8 <UART_SetConfig+0x21c>
 8006bda:	231b      	movs	r3, #27
 8006bdc:	2218      	movs	r2, #24
 8006bde:	4694      	mov	ip, r2
 8006be0:	44bc      	add	ip, r7
 8006be2:	4463      	add	r3, ip
 8006be4:	2210      	movs	r2, #16
 8006be6:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006be8:	69fb      	ldr	r3, [r7, #28]
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	4a48      	ldr	r2, [pc, #288]	; (8006d10 <UART_SetConfig+0x344>)
 8006bee:	4293      	cmp	r3, r2
 8006bf0:	d000      	beq.n	8006bf4 <UART_SetConfig+0x228>
 8006bf2:	e09b      	b.n	8006d2c <UART_SetConfig+0x360>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006bf4:	231b      	movs	r3, #27
 8006bf6:	2218      	movs	r2, #24
 8006bf8:	4694      	mov	ip, r2
 8006bfa:	44bc      	add	ip, r7
 8006bfc:	4463      	add	r3, ip
 8006bfe:	781b      	ldrb	r3, [r3, #0]
 8006c00:	2b08      	cmp	r3, #8
 8006c02:	d01d      	beq.n	8006c40 <UART_SetConfig+0x274>
 8006c04:	dc20      	bgt.n	8006c48 <UART_SetConfig+0x27c>
 8006c06:	2b04      	cmp	r3, #4
 8006c08:	d015      	beq.n	8006c36 <UART_SetConfig+0x26a>
 8006c0a:	dc1d      	bgt.n	8006c48 <UART_SetConfig+0x27c>
 8006c0c:	2b00      	cmp	r3, #0
 8006c0e:	d002      	beq.n	8006c16 <UART_SetConfig+0x24a>
 8006c10:	2b02      	cmp	r3, #2
 8006c12:	d005      	beq.n	8006c20 <UART_SetConfig+0x254>
 8006c14:	e018      	b.n	8006c48 <UART_SetConfig+0x27c>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006c16:	f7fe fed9 	bl	80059cc <HAL_RCC_GetPCLK1Freq>
 8006c1a:	0003      	movs	r3, r0
 8006c1c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006c1e:	e01d      	b.n	8006c5c <UART_SetConfig+0x290>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006c20:	4b3e      	ldr	r3, [pc, #248]	; (8006d1c <UART_SetConfig+0x350>)
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	2210      	movs	r2, #16
 8006c26:	4013      	ands	r3, r2
 8006c28:	d002      	beq.n	8006c30 <UART_SetConfig+0x264>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8006c2a:	4b3e      	ldr	r3, [pc, #248]	; (8006d24 <UART_SetConfig+0x358>)
 8006c2c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006c2e:	e015      	b.n	8006c5c <UART_SetConfig+0x290>
          pclk = (uint32_t) HSI_VALUE;
 8006c30:	4b3d      	ldr	r3, [pc, #244]	; (8006d28 <UART_SetConfig+0x35c>)
 8006c32:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006c34:	e012      	b.n	8006c5c <UART_SetConfig+0x290>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006c36:	f7fe fe19 	bl	800586c <HAL_RCC_GetSysClockFreq>
 8006c3a:	0003      	movs	r3, r0
 8006c3c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006c3e:	e00d      	b.n	8006c5c <UART_SetConfig+0x290>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006c40:	2380      	movs	r3, #128	; 0x80
 8006c42:	021b      	lsls	r3, r3, #8
 8006c44:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006c46:	e009      	b.n	8006c5c <UART_SetConfig+0x290>
      default:
        pclk = 0U;
 8006c48:	2300      	movs	r3, #0
 8006c4a:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8006c4c:	231a      	movs	r3, #26
 8006c4e:	2218      	movs	r2, #24
 8006c50:	4694      	mov	ip, r2
 8006c52:	44bc      	add	ip, r7
 8006c54:	4463      	add	r3, ip
 8006c56:	2201      	movs	r2, #1
 8006c58:	701a      	strb	r2, [r3, #0]
        break;
 8006c5a:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006c5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c5e:	2b00      	cmp	r3, #0
 8006c60:	d100      	bne.n	8006c64 <UART_SetConfig+0x298>
 8006c62:	e139      	b.n	8006ed8 <UART_SetConfig+0x50c>
    {
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8006c64:	69fb      	ldr	r3, [r7, #28]
 8006c66:	685a      	ldr	r2, [r3, #4]
 8006c68:	0013      	movs	r3, r2
 8006c6a:	005b      	lsls	r3, r3, #1
 8006c6c:	189b      	adds	r3, r3, r2
 8006c6e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006c70:	429a      	cmp	r2, r3
 8006c72:	d305      	bcc.n	8006c80 <UART_SetConfig+0x2b4>
          (pclk > (4096U * huart->Init.BaudRate)))
 8006c74:	69fb      	ldr	r3, [r7, #28]
 8006c76:	685b      	ldr	r3, [r3, #4]
 8006c78:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8006c7a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006c7c:	429a      	cmp	r2, r3
 8006c7e:	d907      	bls.n	8006c90 <UART_SetConfig+0x2c4>
      {
        ret = HAL_ERROR;
 8006c80:	231a      	movs	r3, #26
 8006c82:	2218      	movs	r2, #24
 8006c84:	4694      	mov	ip, r2
 8006c86:	44bc      	add	ip, r7
 8006c88:	4463      	add	r3, ip
 8006c8a:	2201      	movs	r2, #1
 8006c8c:	701a      	strb	r2, [r3, #0]
 8006c8e:	e123      	b.n	8006ed8 <UART_SetConfig+0x50c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8006c90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c92:	613b      	str	r3, [r7, #16]
 8006c94:	2300      	movs	r3, #0
 8006c96:	617b      	str	r3, [r7, #20]
 8006c98:	6939      	ldr	r1, [r7, #16]
 8006c9a:	697a      	ldr	r2, [r7, #20]
 8006c9c:	000b      	movs	r3, r1
 8006c9e:	0e1b      	lsrs	r3, r3, #24
 8006ca0:	0010      	movs	r0, r2
 8006ca2:	0205      	lsls	r5, r0, #8
 8006ca4:	431d      	orrs	r5, r3
 8006ca6:	000b      	movs	r3, r1
 8006ca8:	021c      	lsls	r4, r3, #8
 8006caa:	69fb      	ldr	r3, [r7, #28]
 8006cac:	685b      	ldr	r3, [r3, #4]
 8006cae:	085b      	lsrs	r3, r3, #1
 8006cb0:	60bb      	str	r3, [r7, #8]
 8006cb2:	2300      	movs	r3, #0
 8006cb4:	60fb      	str	r3, [r7, #12]
 8006cb6:	68b8      	ldr	r0, [r7, #8]
 8006cb8:	68f9      	ldr	r1, [r7, #12]
 8006cba:	1900      	adds	r0, r0, r4
 8006cbc:	4169      	adcs	r1, r5
 8006cbe:	69fb      	ldr	r3, [r7, #28]
 8006cc0:	685b      	ldr	r3, [r3, #4]
 8006cc2:	603b      	str	r3, [r7, #0]
 8006cc4:	2300      	movs	r3, #0
 8006cc6:	607b      	str	r3, [r7, #4]
 8006cc8:	683a      	ldr	r2, [r7, #0]
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	f7f9 fc26 	bl	800051c <__aeabi_uldivmod>
 8006cd0:	0002      	movs	r2, r0
 8006cd2:	000b      	movs	r3, r1
 8006cd4:	0013      	movs	r3, r2
 8006cd6:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006cd8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006cda:	23c0      	movs	r3, #192	; 0xc0
 8006cdc:	009b      	lsls	r3, r3, #2
 8006cde:	429a      	cmp	r2, r3
 8006ce0:	d309      	bcc.n	8006cf6 <UART_SetConfig+0x32a>
 8006ce2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006ce4:	2380      	movs	r3, #128	; 0x80
 8006ce6:	035b      	lsls	r3, r3, #13
 8006ce8:	429a      	cmp	r2, r3
 8006cea:	d204      	bcs.n	8006cf6 <UART_SetConfig+0x32a>
        {
          huart->Instance->BRR = usartdiv;
 8006cec:	69fb      	ldr	r3, [r7, #28]
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006cf2:	60da      	str	r2, [r3, #12]
 8006cf4:	e0f0      	b.n	8006ed8 <UART_SetConfig+0x50c>
        }
        else
        {
          ret = HAL_ERROR;
 8006cf6:	231a      	movs	r3, #26
 8006cf8:	2218      	movs	r2, #24
 8006cfa:	4694      	mov	ip, r2
 8006cfc:	44bc      	add	ip, r7
 8006cfe:	4463      	add	r3, ip
 8006d00:	2201      	movs	r2, #1
 8006d02:	701a      	strb	r2, [r3, #0]
 8006d04:	e0e8      	b.n	8006ed8 <UART_SetConfig+0x50c>
 8006d06:	46c0      	nop			; (mov r8, r8)
 8006d08:	efff69f3 	.word	0xefff69f3
 8006d0c:	ffffcfff 	.word	0xffffcfff
 8006d10:	40004800 	.word	0x40004800
 8006d14:	fffff4ff 	.word	0xfffff4ff
 8006d18:	40013800 	.word	0x40013800
 8006d1c:	40021000 	.word	0x40021000
 8006d20:	40004400 	.word	0x40004400
 8006d24:	003d0900 	.word	0x003d0900
 8006d28:	00f42400 	.word	0x00f42400
        }
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006d2c:	69fb      	ldr	r3, [r7, #28]
 8006d2e:	69da      	ldr	r2, [r3, #28]
 8006d30:	2380      	movs	r3, #128	; 0x80
 8006d32:	021b      	lsls	r3, r3, #8
 8006d34:	429a      	cmp	r2, r3
 8006d36:	d000      	beq.n	8006d3a <UART_SetConfig+0x36e>
 8006d38:	e074      	b.n	8006e24 <UART_SetConfig+0x458>
  {
    switch (clocksource)
 8006d3a:	231b      	movs	r3, #27
 8006d3c:	2218      	movs	r2, #24
 8006d3e:	4694      	mov	ip, r2
 8006d40:	44bc      	add	ip, r7
 8006d42:	4463      	add	r3, ip
 8006d44:	781b      	ldrb	r3, [r3, #0]
 8006d46:	2b08      	cmp	r3, #8
 8006d48:	d822      	bhi.n	8006d90 <UART_SetConfig+0x3c4>
 8006d4a:	009a      	lsls	r2, r3, #2
 8006d4c:	4b6a      	ldr	r3, [pc, #424]	; (8006ef8 <UART_SetConfig+0x52c>)
 8006d4e:	18d3      	adds	r3, r2, r3
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006d54:	f7fe fe3a 	bl	80059cc <HAL_RCC_GetPCLK1Freq>
 8006d58:	0003      	movs	r3, r0
 8006d5a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006d5c:	e022      	b.n	8006da4 <UART_SetConfig+0x3d8>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006d5e:	f7fe fe4b 	bl	80059f8 <HAL_RCC_GetPCLK2Freq>
 8006d62:	0003      	movs	r3, r0
 8006d64:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006d66:	e01d      	b.n	8006da4 <UART_SetConfig+0x3d8>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006d68:	4b64      	ldr	r3, [pc, #400]	; (8006efc <UART_SetConfig+0x530>)
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	2210      	movs	r2, #16
 8006d6e:	4013      	ands	r3, r2
 8006d70:	d002      	beq.n	8006d78 <UART_SetConfig+0x3ac>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8006d72:	4b63      	ldr	r3, [pc, #396]	; (8006f00 <UART_SetConfig+0x534>)
 8006d74:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006d76:	e015      	b.n	8006da4 <UART_SetConfig+0x3d8>
          pclk = (uint32_t) HSI_VALUE;
 8006d78:	4b62      	ldr	r3, [pc, #392]	; (8006f04 <UART_SetConfig+0x538>)
 8006d7a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006d7c:	e012      	b.n	8006da4 <UART_SetConfig+0x3d8>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006d7e:	f7fe fd75 	bl	800586c <HAL_RCC_GetSysClockFreq>
 8006d82:	0003      	movs	r3, r0
 8006d84:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006d86:	e00d      	b.n	8006da4 <UART_SetConfig+0x3d8>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006d88:	2380      	movs	r3, #128	; 0x80
 8006d8a:	021b      	lsls	r3, r3, #8
 8006d8c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006d8e:	e009      	b.n	8006da4 <UART_SetConfig+0x3d8>
      default:
        pclk = 0U;
 8006d90:	2300      	movs	r3, #0
 8006d92:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8006d94:	231a      	movs	r3, #26
 8006d96:	2218      	movs	r2, #24
 8006d98:	4694      	mov	ip, r2
 8006d9a:	44bc      	add	ip, r7
 8006d9c:	4463      	add	r3, ip
 8006d9e:	2201      	movs	r2, #1
 8006da0:	701a      	strb	r2, [r3, #0]
        break;
 8006da2:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006da4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006da6:	2b00      	cmp	r3, #0
 8006da8:	d100      	bne.n	8006dac <UART_SetConfig+0x3e0>
 8006daa:	e095      	b.n	8006ed8 <UART_SetConfig+0x50c>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006dac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006dae:	005a      	lsls	r2, r3, #1
 8006db0:	69fb      	ldr	r3, [r7, #28]
 8006db2:	685b      	ldr	r3, [r3, #4]
 8006db4:	085b      	lsrs	r3, r3, #1
 8006db6:	18d2      	adds	r2, r2, r3
 8006db8:	69fb      	ldr	r3, [r7, #28]
 8006dba:	685b      	ldr	r3, [r3, #4]
 8006dbc:	0019      	movs	r1, r3
 8006dbe:	0010      	movs	r0, r2
 8006dc0:	f7f9 f9be 	bl	8000140 <__udivsi3>
 8006dc4:	0003      	movs	r3, r0
 8006dc6:	b29b      	uxth	r3, r3
 8006dc8:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006dca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006dcc:	2b0f      	cmp	r3, #15
 8006dce:	d921      	bls.n	8006e14 <UART_SetConfig+0x448>
 8006dd0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006dd2:	2380      	movs	r3, #128	; 0x80
 8006dd4:	025b      	lsls	r3, r3, #9
 8006dd6:	429a      	cmp	r2, r3
 8006dd8:	d21c      	bcs.n	8006e14 <UART_SetConfig+0x448>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006dda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ddc:	b29a      	uxth	r2, r3
 8006dde:	200e      	movs	r0, #14
 8006de0:	2418      	movs	r4, #24
 8006de2:	193b      	adds	r3, r7, r4
 8006de4:	181b      	adds	r3, r3, r0
 8006de6:	210f      	movs	r1, #15
 8006de8:	438a      	bics	r2, r1
 8006dea:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006dec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006dee:	085b      	lsrs	r3, r3, #1
 8006df0:	b29b      	uxth	r3, r3
 8006df2:	2207      	movs	r2, #7
 8006df4:	4013      	ands	r3, r2
 8006df6:	b299      	uxth	r1, r3
 8006df8:	193b      	adds	r3, r7, r4
 8006dfa:	181b      	adds	r3, r3, r0
 8006dfc:	193a      	adds	r2, r7, r4
 8006dfe:	1812      	adds	r2, r2, r0
 8006e00:	8812      	ldrh	r2, [r2, #0]
 8006e02:	430a      	orrs	r2, r1
 8006e04:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8006e06:	69fb      	ldr	r3, [r7, #28]
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	193a      	adds	r2, r7, r4
 8006e0c:	1812      	adds	r2, r2, r0
 8006e0e:	8812      	ldrh	r2, [r2, #0]
 8006e10:	60da      	str	r2, [r3, #12]
 8006e12:	e061      	b.n	8006ed8 <UART_SetConfig+0x50c>
      }
      else
      {
        ret = HAL_ERROR;
 8006e14:	231a      	movs	r3, #26
 8006e16:	2218      	movs	r2, #24
 8006e18:	4694      	mov	ip, r2
 8006e1a:	44bc      	add	ip, r7
 8006e1c:	4463      	add	r3, ip
 8006e1e:	2201      	movs	r2, #1
 8006e20:	701a      	strb	r2, [r3, #0]
 8006e22:	e059      	b.n	8006ed8 <UART_SetConfig+0x50c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006e24:	231b      	movs	r3, #27
 8006e26:	2218      	movs	r2, #24
 8006e28:	4694      	mov	ip, r2
 8006e2a:	44bc      	add	ip, r7
 8006e2c:	4463      	add	r3, ip
 8006e2e:	781b      	ldrb	r3, [r3, #0]
 8006e30:	2b08      	cmp	r3, #8
 8006e32:	d822      	bhi.n	8006e7a <UART_SetConfig+0x4ae>
 8006e34:	009a      	lsls	r2, r3, #2
 8006e36:	4b34      	ldr	r3, [pc, #208]	; (8006f08 <UART_SetConfig+0x53c>)
 8006e38:	18d3      	adds	r3, r2, r3
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006e3e:	f7fe fdc5 	bl	80059cc <HAL_RCC_GetPCLK1Freq>
 8006e42:	0003      	movs	r3, r0
 8006e44:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006e46:	e022      	b.n	8006e8e <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006e48:	f7fe fdd6 	bl	80059f8 <HAL_RCC_GetPCLK2Freq>
 8006e4c:	0003      	movs	r3, r0
 8006e4e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006e50:	e01d      	b.n	8006e8e <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006e52:	4b2a      	ldr	r3, [pc, #168]	; (8006efc <UART_SetConfig+0x530>)
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	2210      	movs	r2, #16
 8006e58:	4013      	ands	r3, r2
 8006e5a:	d002      	beq.n	8006e62 <UART_SetConfig+0x496>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8006e5c:	4b28      	ldr	r3, [pc, #160]	; (8006f00 <UART_SetConfig+0x534>)
 8006e5e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006e60:	e015      	b.n	8006e8e <UART_SetConfig+0x4c2>
          pclk = (uint32_t) HSI_VALUE;
 8006e62:	4b28      	ldr	r3, [pc, #160]	; (8006f04 <UART_SetConfig+0x538>)
 8006e64:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006e66:	e012      	b.n	8006e8e <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006e68:	f7fe fd00 	bl	800586c <HAL_RCC_GetSysClockFreq>
 8006e6c:	0003      	movs	r3, r0
 8006e6e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006e70:	e00d      	b.n	8006e8e <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006e72:	2380      	movs	r3, #128	; 0x80
 8006e74:	021b      	lsls	r3, r3, #8
 8006e76:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006e78:	e009      	b.n	8006e8e <UART_SetConfig+0x4c2>
      default:
        pclk = 0U;
 8006e7a:	2300      	movs	r3, #0
 8006e7c:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8006e7e:	231a      	movs	r3, #26
 8006e80:	2218      	movs	r2, #24
 8006e82:	4694      	mov	ip, r2
 8006e84:	44bc      	add	ip, r7
 8006e86:	4463      	add	r3, ip
 8006e88:	2201      	movs	r2, #1
 8006e8a:	701a      	strb	r2, [r3, #0]
        break;
 8006e8c:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8006e8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e90:	2b00      	cmp	r3, #0
 8006e92:	d021      	beq.n	8006ed8 <UART_SetConfig+0x50c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006e94:	69fb      	ldr	r3, [r7, #28]
 8006e96:	685b      	ldr	r3, [r3, #4]
 8006e98:	085a      	lsrs	r2, r3, #1
 8006e9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e9c:	18d2      	adds	r2, r2, r3
 8006e9e:	69fb      	ldr	r3, [r7, #28]
 8006ea0:	685b      	ldr	r3, [r3, #4]
 8006ea2:	0019      	movs	r1, r3
 8006ea4:	0010      	movs	r0, r2
 8006ea6:	f7f9 f94b 	bl	8000140 <__udivsi3>
 8006eaa:	0003      	movs	r3, r0
 8006eac:	b29b      	uxth	r3, r3
 8006eae:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006eb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006eb2:	2b0f      	cmp	r3, #15
 8006eb4:	d909      	bls.n	8006eca <UART_SetConfig+0x4fe>
 8006eb6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006eb8:	2380      	movs	r3, #128	; 0x80
 8006eba:	025b      	lsls	r3, r3, #9
 8006ebc:	429a      	cmp	r2, r3
 8006ebe:	d204      	bcs.n	8006eca <UART_SetConfig+0x4fe>
      {
        huart->Instance->BRR = usartdiv;
 8006ec0:	69fb      	ldr	r3, [r7, #28]
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006ec6:	60da      	str	r2, [r3, #12]
 8006ec8:	e006      	b.n	8006ed8 <UART_SetConfig+0x50c>
      }
      else
      {
        ret = HAL_ERROR;
 8006eca:	231a      	movs	r3, #26
 8006ecc:	2218      	movs	r2, #24
 8006ece:	4694      	mov	ip, r2
 8006ed0:	44bc      	add	ip, r7
 8006ed2:	4463      	add	r3, ip
 8006ed4:	2201      	movs	r2, #1
 8006ed6:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006ed8:	69fb      	ldr	r3, [r7, #28]
 8006eda:	2200      	movs	r2, #0
 8006edc:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8006ede:	69fb      	ldr	r3, [r7, #28]
 8006ee0:	2200      	movs	r2, #0
 8006ee2:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8006ee4:	231a      	movs	r3, #26
 8006ee6:	2218      	movs	r2, #24
 8006ee8:	4694      	mov	ip, r2
 8006eea:	44bc      	add	ip, r7
 8006eec:	4463      	add	r3, ip
 8006eee:	781b      	ldrb	r3, [r3, #0]
}
 8006ef0:	0018      	movs	r0, r3
 8006ef2:	46bd      	mov	sp, r7
 8006ef4:	b00e      	add	sp, #56	; 0x38
 8006ef6:	bdb0      	pop	{r4, r5, r7, pc}
 8006ef8:	0800a4f4 	.word	0x0800a4f4
 8006efc:	40021000 	.word	0x40021000
 8006f00:	003d0900 	.word	0x003d0900
 8006f04:	00f42400 	.word	0x00f42400
 8006f08:	0800a518 	.word	0x0800a518

08006f0c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006f0c:	b580      	push	{r7, lr}
 8006f0e:	b082      	sub	sp, #8
 8006f10:	af00      	add	r7, sp, #0
 8006f12:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f18:	2201      	movs	r2, #1
 8006f1a:	4013      	ands	r3, r2
 8006f1c:	d00b      	beq.n	8006f36 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	685b      	ldr	r3, [r3, #4]
 8006f24:	4a4a      	ldr	r2, [pc, #296]	; (8007050 <UART_AdvFeatureConfig+0x144>)
 8006f26:	4013      	ands	r3, r2
 8006f28:	0019      	movs	r1, r3
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	430a      	orrs	r2, r1
 8006f34:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f3a:	2202      	movs	r2, #2
 8006f3c:	4013      	ands	r3, r2
 8006f3e:	d00b      	beq.n	8006f58 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	685b      	ldr	r3, [r3, #4]
 8006f46:	4a43      	ldr	r2, [pc, #268]	; (8007054 <UART_AdvFeatureConfig+0x148>)
 8006f48:	4013      	ands	r3, r2
 8006f4a:	0019      	movs	r1, r3
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	430a      	orrs	r2, r1
 8006f56:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f5c:	2204      	movs	r2, #4
 8006f5e:	4013      	ands	r3, r2
 8006f60:	d00b      	beq.n	8006f7a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	685b      	ldr	r3, [r3, #4]
 8006f68:	4a3b      	ldr	r2, [pc, #236]	; (8007058 <UART_AdvFeatureConfig+0x14c>)
 8006f6a:	4013      	ands	r3, r2
 8006f6c:	0019      	movs	r1, r3
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	430a      	orrs	r2, r1
 8006f78:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f7e:	2208      	movs	r2, #8
 8006f80:	4013      	ands	r3, r2
 8006f82:	d00b      	beq.n	8006f9c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	685b      	ldr	r3, [r3, #4]
 8006f8a:	4a34      	ldr	r2, [pc, #208]	; (800705c <UART_AdvFeatureConfig+0x150>)
 8006f8c:	4013      	ands	r3, r2
 8006f8e:	0019      	movs	r1, r3
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	430a      	orrs	r2, r1
 8006f9a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fa0:	2210      	movs	r2, #16
 8006fa2:	4013      	ands	r3, r2
 8006fa4:	d00b      	beq.n	8006fbe <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	689b      	ldr	r3, [r3, #8]
 8006fac:	4a2c      	ldr	r2, [pc, #176]	; (8007060 <UART_AdvFeatureConfig+0x154>)
 8006fae:	4013      	ands	r3, r2
 8006fb0:	0019      	movs	r1, r3
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	430a      	orrs	r2, r1
 8006fbc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fc2:	2220      	movs	r2, #32
 8006fc4:	4013      	ands	r3, r2
 8006fc6:	d00b      	beq.n	8006fe0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	689b      	ldr	r3, [r3, #8]
 8006fce:	4a25      	ldr	r2, [pc, #148]	; (8007064 <UART_AdvFeatureConfig+0x158>)
 8006fd0:	4013      	ands	r3, r2
 8006fd2:	0019      	movs	r1, r3
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	430a      	orrs	r2, r1
 8006fde:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fe4:	2240      	movs	r2, #64	; 0x40
 8006fe6:	4013      	ands	r3, r2
 8006fe8:	d01d      	beq.n	8007026 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	681b      	ldr	r3, [r3, #0]
 8006fee:	685b      	ldr	r3, [r3, #4]
 8006ff0:	4a1d      	ldr	r2, [pc, #116]	; (8007068 <UART_AdvFeatureConfig+0x15c>)
 8006ff2:	4013      	ands	r3, r2
 8006ff4:	0019      	movs	r1, r3
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	430a      	orrs	r2, r1
 8007000:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007006:	2380      	movs	r3, #128	; 0x80
 8007008:	035b      	lsls	r3, r3, #13
 800700a:	429a      	cmp	r2, r3
 800700c:	d10b      	bne.n	8007026 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	685b      	ldr	r3, [r3, #4]
 8007014:	4a15      	ldr	r2, [pc, #84]	; (800706c <UART_AdvFeatureConfig+0x160>)
 8007016:	4013      	ands	r3, r2
 8007018:	0019      	movs	r1, r3
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	430a      	orrs	r2, r1
 8007024:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800702a:	2280      	movs	r2, #128	; 0x80
 800702c:	4013      	ands	r3, r2
 800702e:	d00b      	beq.n	8007048 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	685b      	ldr	r3, [r3, #4]
 8007036:	4a0e      	ldr	r2, [pc, #56]	; (8007070 <UART_AdvFeatureConfig+0x164>)
 8007038:	4013      	ands	r3, r2
 800703a:	0019      	movs	r1, r3
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	430a      	orrs	r2, r1
 8007046:	605a      	str	r2, [r3, #4]
  }
}
 8007048:	46c0      	nop			; (mov r8, r8)
 800704a:	46bd      	mov	sp, r7
 800704c:	b002      	add	sp, #8
 800704e:	bd80      	pop	{r7, pc}
 8007050:	fffdffff 	.word	0xfffdffff
 8007054:	fffeffff 	.word	0xfffeffff
 8007058:	fffbffff 	.word	0xfffbffff
 800705c:	ffff7fff 	.word	0xffff7fff
 8007060:	ffffefff 	.word	0xffffefff
 8007064:	ffffdfff 	.word	0xffffdfff
 8007068:	ffefffff 	.word	0xffefffff
 800706c:	ff9fffff 	.word	0xff9fffff
 8007070:	fff7ffff 	.word	0xfff7ffff

08007074 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007074:	b580      	push	{r7, lr}
 8007076:	b086      	sub	sp, #24
 8007078:	af02      	add	r7, sp, #8
 800707a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	2280      	movs	r2, #128	; 0x80
 8007080:	2100      	movs	r1, #0
 8007082:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007084:	f7fc ffe4 	bl	8004050 <HAL_GetTick>
 8007088:	0003      	movs	r3, r0
 800708a:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	2208      	movs	r2, #8
 8007094:	4013      	ands	r3, r2
 8007096:	2b08      	cmp	r3, #8
 8007098:	d10c      	bne.n	80070b4 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800709a:	68fb      	ldr	r3, [r7, #12]
 800709c:	2280      	movs	r2, #128	; 0x80
 800709e:	0391      	lsls	r1, r2, #14
 80070a0:	6878      	ldr	r0, [r7, #4]
 80070a2:	4a17      	ldr	r2, [pc, #92]	; (8007100 <UART_CheckIdleState+0x8c>)
 80070a4:	9200      	str	r2, [sp, #0]
 80070a6:	2200      	movs	r2, #0
 80070a8:	f000 f82c 	bl	8007104 <UART_WaitOnFlagUntilTimeout>
 80070ac:	1e03      	subs	r3, r0, #0
 80070ae:	d001      	beq.n	80070b4 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80070b0:	2303      	movs	r3, #3
 80070b2:	e021      	b.n	80070f8 <UART_CheckIdleState+0x84>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	2204      	movs	r2, #4
 80070bc:	4013      	ands	r3, r2
 80070be:	2b04      	cmp	r3, #4
 80070c0:	d10c      	bne.n	80070dc <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80070c2:	68fb      	ldr	r3, [r7, #12]
 80070c4:	2280      	movs	r2, #128	; 0x80
 80070c6:	03d1      	lsls	r1, r2, #15
 80070c8:	6878      	ldr	r0, [r7, #4]
 80070ca:	4a0d      	ldr	r2, [pc, #52]	; (8007100 <UART_CheckIdleState+0x8c>)
 80070cc:	9200      	str	r2, [sp, #0]
 80070ce:	2200      	movs	r2, #0
 80070d0:	f000 f818 	bl	8007104 <UART_WaitOnFlagUntilTimeout>
 80070d4:	1e03      	subs	r3, r0, #0
 80070d6:	d001      	beq.n	80070dc <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80070d8:	2303      	movs	r3, #3
 80070da:	e00d      	b.n	80070f8 <UART_CheckIdleState+0x84>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	2220      	movs	r2, #32
 80070e0:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	2220      	movs	r2, #32
 80070e6:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	2200      	movs	r2, #0
 80070ec:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	2274      	movs	r2, #116	; 0x74
 80070f2:	2100      	movs	r1, #0
 80070f4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80070f6:	2300      	movs	r3, #0
}
 80070f8:	0018      	movs	r0, r3
 80070fa:	46bd      	mov	sp, r7
 80070fc:	b004      	add	sp, #16
 80070fe:	bd80      	pop	{r7, pc}
 8007100:	01ffffff 	.word	0x01ffffff

08007104 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007104:	b580      	push	{r7, lr}
 8007106:	b084      	sub	sp, #16
 8007108:	af00      	add	r7, sp, #0
 800710a:	60f8      	str	r0, [r7, #12]
 800710c:	60b9      	str	r1, [r7, #8]
 800710e:	603b      	str	r3, [r7, #0]
 8007110:	1dfb      	adds	r3, r7, #7
 8007112:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007114:	e05e      	b.n	80071d4 <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007116:	69bb      	ldr	r3, [r7, #24]
 8007118:	3301      	adds	r3, #1
 800711a:	d05b      	beq.n	80071d4 <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800711c:	f7fc ff98 	bl	8004050 <HAL_GetTick>
 8007120:	0002      	movs	r2, r0
 8007122:	683b      	ldr	r3, [r7, #0]
 8007124:	1ad3      	subs	r3, r2, r3
 8007126:	69ba      	ldr	r2, [r7, #24]
 8007128:	429a      	cmp	r2, r3
 800712a:	d302      	bcc.n	8007132 <UART_WaitOnFlagUntilTimeout+0x2e>
 800712c:	69bb      	ldr	r3, [r7, #24]
 800712e:	2b00      	cmp	r3, #0
 8007130:	d11b      	bne.n	800716a <UART_WaitOnFlagUntilTimeout+0x66>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007132:	68fb      	ldr	r3, [r7, #12]
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	681a      	ldr	r2, [r3, #0]
 8007138:	68fb      	ldr	r3, [r7, #12]
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	492f      	ldr	r1, [pc, #188]	; (80071fc <UART_WaitOnFlagUntilTimeout+0xf8>)
 800713e:	400a      	ands	r2, r1
 8007140:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007142:	68fb      	ldr	r3, [r7, #12]
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	689a      	ldr	r2, [r3, #8]
 8007148:	68fb      	ldr	r3, [r7, #12]
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	2101      	movs	r1, #1
 800714e:	438a      	bics	r2, r1
 8007150:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8007152:	68fb      	ldr	r3, [r7, #12]
 8007154:	2220      	movs	r2, #32
 8007156:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8007158:	68fb      	ldr	r3, [r7, #12]
 800715a:	2220      	movs	r2, #32
 800715c:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800715e:	68fb      	ldr	r3, [r7, #12]
 8007160:	2274      	movs	r2, #116	; 0x74
 8007162:	2100      	movs	r1, #0
 8007164:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8007166:	2303      	movs	r3, #3
 8007168:	e044      	b.n	80071f4 <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800716a:	68fb      	ldr	r3, [r7, #12]
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	2204      	movs	r2, #4
 8007172:	4013      	ands	r3, r2
 8007174:	d02e      	beq.n	80071d4 <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007176:	68fb      	ldr	r3, [r7, #12]
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	69da      	ldr	r2, [r3, #28]
 800717c:	2380      	movs	r3, #128	; 0x80
 800717e:	011b      	lsls	r3, r3, #4
 8007180:	401a      	ands	r2, r3
 8007182:	2380      	movs	r3, #128	; 0x80
 8007184:	011b      	lsls	r3, r3, #4
 8007186:	429a      	cmp	r2, r3
 8007188:	d124      	bne.n	80071d4 <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800718a:	68fb      	ldr	r3, [r7, #12]
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	2280      	movs	r2, #128	; 0x80
 8007190:	0112      	lsls	r2, r2, #4
 8007192:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007194:	68fb      	ldr	r3, [r7, #12]
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	681a      	ldr	r2, [r3, #0]
 800719a:	68fb      	ldr	r3, [r7, #12]
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	4917      	ldr	r1, [pc, #92]	; (80071fc <UART_WaitOnFlagUntilTimeout+0xf8>)
 80071a0:	400a      	ands	r2, r1
 80071a2:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80071a4:	68fb      	ldr	r3, [r7, #12]
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	689a      	ldr	r2, [r3, #8]
 80071aa:	68fb      	ldr	r3, [r7, #12]
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	2101      	movs	r1, #1
 80071b0:	438a      	bics	r2, r1
 80071b2:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 80071b4:	68fb      	ldr	r3, [r7, #12]
 80071b6:	2220      	movs	r2, #32
 80071b8:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80071ba:	68fb      	ldr	r3, [r7, #12]
 80071bc:	2220      	movs	r2, #32
 80071be:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80071c0:	68fb      	ldr	r3, [r7, #12]
 80071c2:	2280      	movs	r2, #128	; 0x80
 80071c4:	2120      	movs	r1, #32
 80071c6:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80071c8:	68fb      	ldr	r3, [r7, #12]
 80071ca:	2274      	movs	r2, #116	; 0x74
 80071cc:	2100      	movs	r1, #0
 80071ce:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 80071d0:	2303      	movs	r3, #3
 80071d2:	e00f      	b.n	80071f4 <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80071d4:	68fb      	ldr	r3, [r7, #12]
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	69db      	ldr	r3, [r3, #28]
 80071da:	68ba      	ldr	r2, [r7, #8]
 80071dc:	4013      	ands	r3, r2
 80071de:	68ba      	ldr	r2, [r7, #8]
 80071e0:	1ad3      	subs	r3, r2, r3
 80071e2:	425a      	negs	r2, r3
 80071e4:	4153      	adcs	r3, r2
 80071e6:	b2db      	uxtb	r3, r3
 80071e8:	001a      	movs	r2, r3
 80071ea:	1dfb      	adds	r3, r7, #7
 80071ec:	781b      	ldrb	r3, [r3, #0]
 80071ee:	429a      	cmp	r2, r3
 80071f0:	d091      	beq.n	8007116 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80071f2:	2300      	movs	r3, #0
}
 80071f4:	0018      	movs	r0, r3
 80071f6:	46bd      	mov	sp, r7
 80071f8:	b004      	add	sp, #16
 80071fa:	bd80      	pop	{r7, pc}
 80071fc:	fffffe5f 	.word	0xfffffe5f

08007200 <atof>:
 8007200:	b510      	push	{r4, lr}
 8007202:	2100      	movs	r1, #0
 8007204:	f000 fe9a 	bl	8007f3c <strtod>
 8007208:	bd10      	pop	{r4, pc}
	...

0800720c <__errno>:
 800720c:	4b01      	ldr	r3, [pc, #4]	; (8007214 <__errno+0x8>)
 800720e:	6818      	ldr	r0, [r3, #0]
 8007210:	4770      	bx	lr
 8007212:	46c0      	nop			; (mov r8, r8)
 8007214:	2000000c 	.word	0x2000000c

08007218 <__libc_init_array>:
 8007218:	b570      	push	{r4, r5, r6, lr}
 800721a:	2600      	movs	r6, #0
 800721c:	4d0c      	ldr	r5, [pc, #48]	; (8007250 <__libc_init_array+0x38>)
 800721e:	4c0d      	ldr	r4, [pc, #52]	; (8007254 <__libc_init_array+0x3c>)
 8007220:	1b64      	subs	r4, r4, r5
 8007222:	10a4      	asrs	r4, r4, #2
 8007224:	42a6      	cmp	r6, r4
 8007226:	d109      	bne.n	800723c <__libc_init_array+0x24>
 8007228:	2600      	movs	r6, #0
 800722a:	f003 f8c5 	bl	800a3b8 <_init>
 800722e:	4d0a      	ldr	r5, [pc, #40]	; (8007258 <__libc_init_array+0x40>)
 8007230:	4c0a      	ldr	r4, [pc, #40]	; (800725c <__libc_init_array+0x44>)
 8007232:	1b64      	subs	r4, r4, r5
 8007234:	10a4      	asrs	r4, r4, #2
 8007236:	42a6      	cmp	r6, r4
 8007238:	d105      	bne.n	8007246 <__libc_init_array+0x2e>
 800723a:	bd70      	pop	{r4, r5, r6, pc}
 800723c:	00b3      	lsls	r3, r6, #2
 800723e:	58eb      	ldr	r3, [r5, r3]
 8007240:	4798      	blx	r3
 8007242:	3601      	adds	r6, #1
 8007244:	e7ee      	b.n	8007224 <__libc_init_array+0xc>
 8007246:	00b3      	lsls	r3, r6, #2
 8007248:	58eb      	ldr	r3, [r5, r3]
 800724a:	4798      	blx	r3
 800724c:	3601      	adds	r6, #1
 800724e:	e7f2      	b.n	8007236 <__libc_init_array+0x1e>
 8007250:	0800a97c 	.word	0x0800a97c
 8007254:	0800a97c 	.word	0x0800a97c
 8007258:	0800a97c 	.word	0x0800a97c
 800725c:	0800a980 	.word	0x0800a980

08007260 <memcpy>:
 8007260:	2300      	movs	r3, #0
 8007262:	b510      	push	{r4, lr}
 8007264:	429a      	cmp	r2, r3
 8007266:	d100      	bne.n	800726a <memcpy+0xa>
 8007268:	bd10      	pop	{r4, pc}
 800726a:	5ccc      	ldrb	r4, [r1, r3]
 800726c:	54c4      	strb	r4, [r0, r3]
 800726e:	3301      	adds	r3, #1
 8007270:	e7f8      	b.n	8007264 <memcpy+0x4>

08007272 <memset>:
 8007272:	0003      	movs	r3, r0
 8007274:	1882      	adds	r2, r0, r2
 8007276:	4293      	cmp	r3, r2
 8007278:	d100      	bne.n	800727c <memset+0xa>
 800727a:	4770      	bx	lr
 800727c:	7019      	strb	r1, [r3, #0]
 800727e:	3301      	adds	r3, #1
 8007280:	e7f9      	b.n	8007276 <memset+0x4>
	...

08007284 <siprintf>:
 8007284:	b40e      	push	{r1, r2, r3}
 8007286:	b500      	push	{lr}
 8007288:	490b      	ldr	r1, [pc, #44]	; (80072b8 <siprintf+0x34>)
 800728a:	b09c      	sub	sp, #112	; 0x70
 800728c:	ab1d      	add	r3, sp, #116	; 0x74
 800728e:	9002      	str	r0, [sp, #8]
 8007290:	9006      	str	r0, [sp, #24]
 8007292:	9107      	str	r1, [sp, #28]
 8007294:	9104      	str	r1, [sp, #16]
 8007296:	4809      	ldr	r0, [pc, #36]	; (80072bc <siprintf+0x38>)
 8007298:	4909      	ldr	r1, [pc, #36]	; (80072c0 <siprintf+0x3c>)
 800729a:	cb04      	ldmia	r3!, {r2}
 800729c:	9105      	str	r1, [sp, #20]
 800729e:	6800      	ldr	r0, [r0, #0]
 80072a0:	a902      	add	r1, sp, #8
 80072a2:	9301      	str	r3, [sp, #4]
 80072a4:	f001 ff74 	bl	8009190 <_svfiprintf_r>
 80072a8:	2300      	movs	r3, #0
 80072aa:	9a02      	ldr	r2, [sp, #8]
 80072ac:	7013      	strb	r3, [r2, #0]
 80072ae:	b01c      	add	sp, #112	; 0x70
 80072b0:	bc08      	pop	{r3}
 80072b2:	b003      	add	sp, #12
 80072b4:	4718      	bx	r3
 80072b6:	46c0      	nop			; (mov r8, r8)
 80072b8:	7fffffff 	.word	0x7fffffff
 80072bc:	2000000c 	.word	0x2000000c
 80072c0:	ffff0208 	.word	0xffff0208

080072c4 <sulp>:
 80072c4:	b570      	push	{r4, r5, r6, lr}
 80072c6:	0016      	movs	r6, r2
 80072c8:	000d      	movs	r5, r1
 80072ca:	f001 fd4f 	bl	8008d6c <__ulp>
 80072ce:	2e00      	cmp	r6, #0
 80072d0:	d00d      	beq.n	80072ee <sulp+0x2a>
 80072d2:	236b      	movs	r3, #107	; 0x6b
 80072d4:	006a      	lsls	r2, r5, #1
 80072d6:	0d52      	lsrs	r2, r2, #21
 80072d8:	1a9b      	subs	r3, r3, r2
 80072da:	2b00      	cmp	r3, #0
 80072dc:	dd07      	ble.n	80072ee <sulp+0x2a>
 80072de:	2400      	movs	r4, #0
 80072e0:	4a03      	ldr	r2, [pc, #12]	; (80072f0 <sulp+0x2c>)
 80072e2:	051b      	lsls	r3, r3, #20
 80072e4:	189d      	adds	r5, r3, r2
 80072e6:	002b      	movs	r3, r5
 80072e8:	0022      	movs	r2, r4
 80072ea:	f7fa fde3 	bl	8001eb4 <__aeabi_dmul>
 80072ee:	bd70      	pop	{r4, r5, r6, pc}
 80072f0:	3ff00000 	.word	0x3ff00000

080072f4 <_strtod_l>:
 80072f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80072f6:	001d      	movs	r5, r3
 80072f8:	2300      	movs	r3, #0
 80072fa:	b0a7      	sub	sp, #156	; 0x9c
 80072fc:	9322      	str	r3, [sp, #136]	; 0x88
 80072fe:	4bae      	ldr	r3, [pc, #696]	; (80075b8 <_strtod_l+0x2c4>)
 8007300:	9005      	str	r0, [sp, #20]
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	9108      	str	r1, [sp, #32]
 8007306:	0018      	movs	r0, r3
 8007308:	9307      	str	r3, [sp, #28]
 800730a:	921d      	str	r2, [sp, #116]	; 0x74
 800730c:	f7f8 fefc 	bl	8000108 <strlen>
 8007310:	2600      	movs	r6, #0
 8007312:	0004      	movs	r4, r0
 8007314:	2700      	movs	r7, #0
 8007316:	9b08      	ldr	r3, [sp, #32]
 8007318:	9321      	str	r3, [sp, #132]	; 0x84
 800731a:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800731c:	7813      	ldrb	r3, [r2, #0]
 800731e:	2b2b      	cmp	r3, #43	; 0x2b
 8007320:	d058      	beq.n	80073d4 <_strtod_l+0xe0>
 8007322:	d844      	bhi.n	80073ae <_strtod_l+0xba>
 8007324:	2b0d      	cmp	r3, #13
 8007326:	d83d      	bhi.n	80073a4 <_strtod_l+0xb0>
 8007328:	2b08      	cmp	r3, #8
 800732a:	d83d      	bhi.n	80073a8 <_strtod_l+0xb4>
 800732c:	2b00      	cmp	r3, #0
 800732e:	d047      	beq.n	80073c0 <_strtod_l+0xcc>
 8007330:	2300      	movs	r3, #0
 8007332:	9310      	str	r3, [sp, #64]	; 0x40
 8007334:	2200      	movs	r2, #0
 8007336:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007338:	920a      	str	r2, [sp, #40]	; 0x28
 800733a:	9306      	str	r3, [sp, #24]
 800733c:	781b      	ldrb	r3, [r3, #0]
 800733e:	2b30      	cmp	r3, #48	; 0x30
 8007340:	d000      	beq.n	8007344 <_strtod_l+0x50>
 8007342:	e083      	b.n	800744c <_strtod_l+0x158>
 8007344:	9b06      	ldr	r3, [sp, #24]
 8007346:	3220      	adds	r2, #32
 8007348:	785b      	ldrb	r3, [r3, #1]
 800734a:	4393      	bics	r3, r2
 800734c:	2b58      	cmp	r3, #88	; 0x58
 800734e:	d000      	beq.n	8007352 <_strtod_l+0x5e>
 8007350:	e072      	b.n	8007438 <_strtod_l+0x144>
 8007352:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007354:	9502      	str	r5, [sp, #8]
 8007356:	9301      	str	r3, [sp, #4]
 8007358:	ab22      	add	r3, sp, #136	; 0x88
 800735a:	9300      	str	r3, [sp, #0]
 800735c:	4a97      	ldr	r2, [pc, #604]	; (80075bc <_strtod_l+0x2c8>)
 800735e:	ab23      	add	r3, sp, #140	; 0x8c
 8007360:	9805      	ldr	r0, [sp, #20]
 8007362:	a921      	add	r1, sp, #132	; 0x84
 8007364:	f000 fe62 	bl	800802c <__gethex>
 8007368:	2307      	movs	r3, #7
 800736a:	0005      	movs	r5, r0
 800736c:	0004      	movs	r4, r0
 800736e:	401d      	ands	r5, r3
 8007370:	4218      	tst	r0, r3
 8007372:	d006      	beq.n	8007382 <_strtod_l+0x8e>
 8007374:	2d06      	cmp	r5, #6
 8007376:	d12f      	bne.n	80073d8 <_strtod_l+0xe4>
 8007378:	9b06      	ldr	r3, [sp, #24]
 800737a:	3301      	adds	r3, #1
 800737c:	9321      	str	r3, [sp, #132]	; 0x84
 800737e:	2300      	movs	r3, #0
 8007380:	9310      	str	r3, [sp, #64]	; 0x40
 8007382:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8007384:	2b00      	cmp	r3, #0
 8007386:	d002      	beq.n	800738e <_strtod_l+0x9a>
 8007388:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800738a:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800738c:	601a      	str	r2, [r3, #0]
 800738e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007390:	2b00      	cmp	r3, #0
 8007392:	d01c      	beq.n	80073ce <_strtod_l+0xda>
 8007394:	2380      	movs	r3, #128	; 0x80
 8007396:	0032      	movs	r2, r6
 8007398:	061b      	lsls	r3, r3, #24
 800739a:	18fb      	adds	r3, r7, r3
 800739c:	0010      	movs	r0, r2
 800739e:	0019      	movs	r1, r3
 80073a0:	b027      	add	sp, #156	; 0x9c
 80073a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80073a4:	2b20      	cmp	r3, #32
 80073a6:	d1c3      	bne.n	8007330 <_strtod_l+0x3c>
 80073a8:	3201      	adds	r2, #1
 80073aa:	9221      	str	r2, [sp, #132]	; 0x84
 80073ac:	e7b5      	b.n	800731a <_strtod_l+0x26>
 80073ae:	2b2d      	cmp	r3, #45	; 0x2d
 80073b0:	d1be      	bne.n	8007330 <_strtod_l+0x3c>
 80073b2:	3b2c      	subs	r3, #44	; 0x2c
 80073b4:	9310      	str	r3, [sp, #64]	; 0x40
 80073b6:	1c53      	adds	r3, r2, #1
 80073b8:	9321      	str	r3, [sp, #132]	; 0x84
 80073ba:	7853      	ldrb	r3, [r2, #1]
 80073bc:	2b00      	cmp	r3, #0
 80073be:	d1b9      	bne.n	8007334 <_strtod_l+0x40>
 80073c0:	9b08      	ldr	r3, [sp, #32]
 80073c2:	9321      	str	r3, [sp, #132]	; 0x84
 80073c4:	2300      	movs	r3, #0
 80073c6:	9310      	str	r3, [sp, #64]	; 0x40
 80073c8:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80073ca:	2b00      	cmp	r3, #0
 80073cc:	d1dc      	bne.n	8007388 <_strtod_l+0x94>
 80073ce:	0032      	movs	r2, r6
 80073d0:	003b      	movs	r3, r7
 80073d2:	e7e3      	b.n	800739c <_strtod_l+0xa8>
 80073d4:	2300      	movs	r3, #0
 80073d6:	e7ed      	b.n	80073b4 <_strtod_l+0xc0>
 80073d8:	9a22      	ldr	r2, [sp, #136]	; 0x88
 80073da:	2a00      	cmp	r2, #0
 80073dc:	d007      	beq.n	80073ee <_strtod_l+0xfa>
 80073de:	2135      	movs	r1, #53	; 0x35
 80073e0:	a824      	add	r0, sp, #144	; 0x90
 80073e2:	f001 fdc2 	bl	8008f6a <__copybits>
 80073e6:	9922      	ldr	r1, [sp, #136]	; 0x88
 80073e8:	9805      	ldr	r0, [sp, #20]
 80073ea:	f001 f97d 	bl	80086e8 <_Bfree>
 80073ee:	1e68      	subs	r0, r5, #1
 80073f0:	2805      	cmp	r0, #5
 80073f2:	d806      	bhi.n	8007402 <_strtod_l+0x10e>
 80073f4:	f7f8 fe90 	bl	8000118 <__gnu_thumb1_case_uqi>
 80073f8:	1c190b0e 	.word	0x1c190b0e
 80073fc:	030e      	.short	0x030e
 80073fe:	2700      	movs	r7, #0
 8007400:	003e      	movs	r6, r7
 8007402:	0723      	lsls	r3, r4, #28
 8007404:	d5bd      	bpl.n	8007382 <_strtod_l+0x8e>
 8007406:	2380      	movs	r3, #128	; 0x80
 8007408:	061b      	lsls	r3, r3, #24
 800740a:	431f      	orrs	r7, r3
 800740c:	e7b9      	b.n	8007382 <_strtod_l+0x8e>
 800740e:	9e24      	ldr	r6, [sp, #144]	; 0x90
 8007410:	9f25      	ldr	r7, [sp, #148]	; 0x94
 8007412:	e7f6      	b.n	8007402 <_strtod_l+0x10e>
 8007414:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8007416:	4a6a      	ldr	r2, [pc, #424]	; (80075c0 <_strtod_l+0x2cc>)
 8007418:	496a      	ldr	r1, [pc, #424]	; (80075c4 <_strtod_l+0x2d0>)
 800741a:	401a      	ands	r2, r3
 800741c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800741e:	9e24      	ldr	r6, [sp, #144]	; 0x90
 8007420:	185b      	adds	r3, r3, r1
 8007422:	051b      	lsls	r3, r3, #20
 8007424:	431a      	orrs	r2, r3
 8007426:	0017      	movs	r7, r2
 8007428:	e7eb      	b.n	8007402 <_strtod_l+0x10e>
 800742a:	2600      	movs	r6, #0
 800742c:	4f66      	ldr	r7, [pc, #408]	; (80075c8 <_strtod_l+0x2d4>)
 800742e:	e7e8      	b.n	8007402 <_strtod_l+0x10e>
 8007430:	2601      	movs	r6, #1
 8007432:	4f66      	ldr	r7, [pc, #408]	; (80075cc <_strtod_l+0x2d8>)
 8007434:	4276      	negs	r6, r6
 8007436:	e7e4      	b.n	8007402 <_strtod_l+0x10e>
 8007438:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800743a:	1c5a      	adds	r2, r3, #1
 800743c:	9221      	str	r2, [sp, #132]	; 0x84
 800743e:	785b      	ldrb	r3, [r3, #1]
 8007440:	2b30      	cmp	r3, #48	; 0x30
 8007442:	d0f9      	beq.n	8007438 <_strtod_l+0x144>
 8007444:	2b00      	cmp	r3, #0
 8007446:	d09c      	beq.n	8007382 <_strtod_l+0x8e>
 8007448:	2301      	movs	r3, #1
 800744a:	930a      	str	r3, [sp, #40]	; 0x28
 800744c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800744e:	220a      	movs	r2, #10
 8007450:	9311      	str	r3, [sp, #68]	; 0x44
 8007452:	2300      	movs	r3, #0
 8007454:	930e      	str	r3, [sp, #56]	; 0x38
 8007456:	930b      	str	r3, [sp, #44]	; 0x2c
 8007458:	9309      	str	r3, [sp, #36]	; 0x24
 800745a:	9821      	ldr	r0, [sp, #132]	; 0x84
 800745c:	7805      	ldrb	r5, [r0, #0]
 800745e:	002b      	movs	r3, r5
 8007460:	3b30      	subs	r3, #48	; 0x30
 8007462:	b2d9      	uxtb	r1, r3
 8007464:	2909      	cmp	r1, #9
 8007466:	d927      	bls.n	80074b8 <_strtod_l+0x1c4>
 8007468:	0022      	movs	r2, r4
 800746a:	9907      	ldr	r1, [sp, #28]
 800746c:	f002 f92a 	bl	80096c4 <strncmp>
 8007470:	2800      	cmp	r0, #0
 8007472:	d033      	beq.n	80074dc <_strtod_l+0x1e8>
 8007474:	2000      	movs	r0, #0
 8007476:	002b      	movs	r3, r5
 8007478:	4684      	mov	ip, r0
 800747a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800747c:	900c      	str	r0, [sp, #48]	; 0x30
 800747e:	9206      	str	r2, [sp, #24]
 8007480:	2220      	movs	r2, #32
 8007482:	0019      	movs	r1, r3
 8007484:	4391      	bics	r1, r2
 8007486:	000a      	movs	r2, r1
 8007488:	2100      	movs	r1, #0
 800748a:	9107      	str	r1, [sp, #28]
 800748c:	2a45      	cmp	r2, #69	; 0x45
 800748e:	d000      	beq.n	8007492 <_strtod_l+0x19e>
 8007490:	e0c5      	b.n	800761e <_strtod_l+0x32a>
 8007492:	9b06      	ldr	r3, [sp, #24]
 8007494:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007496:	4303      	orrs	r3, r0
 8007498:	4313      	orrs	r3, r2
 800749a:	428b      	cmp	r3, r1
 800749c:	d090      	beq.n	80073c0 <_strtod_l+0xcc>
 800749e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80074a0:	9308      	str	r3, [sp, #32]
 80074a2:	3301      	adds	r3, #1
 80074a4:	9321      	str	r3, [sp, #132]	; 0x84
 80074a6:	9b08      	ldr	r3, [sp, #32]
 80074a8:	785b      	ldrb	r3, [r3, #1]
 80074aa:	2b2b      	cmp	r3, #43	; 0x2b
 80074ac:	d075      	beq.n	800759a <_strtod_l+0x2a6>
 80074ae:	000c      	movs	r4, r1
 80074b0:	2b2d      	cmp	r3, #45	; 0x2d
 80074b2:	d178      	bne.n	80075a6 <_strtod_l+0x2b2>
 80074b4:	2401      	movs	r4, #1
 80074b6:	e071      	b.n	800759c <_strtod_l+0x2a8>
 80074b8:	9909      	ldr	r1, [sp, #36]	; 0x24
 80074ba:	2908      	cmp	r1, #8
 80074bc:	dc09      	bgt.n	80074d2 <_strtod_l+0x1de>
 80074be:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80074c0:	4351      	muls	r1, r2
 80074c2:	185b      	adds	r3, r3, r1
 80074c4:	930b      	str	r3, [sp, #44]	; 0x2c
 80074c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80074c8:	3001      	adds	r0, #1
 80074ca:	3301      	adds	r3, #1
 80074cc:	9309      	str	r3, [sp, #36]	; 0x24
 80074ce:	9021      	str	r0, [sp, #132]	; 0x84
 80074d0:	e7c3      	b.n	800745a <_strtod_l+0x166>
 80074d2:	990e      	ldr	r1, [sp, #56]	; 0x38
 80074d4:	4351      	muls	r1, r2
 80074d6:	185b      	adds	r3, r3, r1
 80074d8:	930e      	str	r3, [sp, #56]	; 0x38
 80074da:	e7f4      	b.n	80074c6 <_strtod_l+0x1d2>
 80074dc:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80074de:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80074e0:	191c      	adds	r4, r3, r4
 80074e2:	9421      	str	r4, [sp, #132]	; 0x84
 80074e4:	7823      	ldrb	r3, [r4, #0]
 80074e6:	2a00      	cmp	r2, #0
 80074e8:	d039      	beq.n	800755e <_strtod_l+0x26a>
 80074ea:	900c      	str	r0, [sp, #48]	; 0x30
 80074ec:	9206      	str	r2, [sp, #24]
 80074ee:	001a      	movs	r2, r3
 80074f0:	3a30      	subs	r2, #48	; 0x30
 80074f2:	2a09      	cmp	r2, #9
 80074f4:	d912      	bls.n	800751c <_strtod_l+0x228>
 80074f6:	2201      	movs	r2, #1
 80074f8:	4694      	mov	ip, r2
 80074fa:	e7c1      	b.n	8007480 <_strtod_l+0x18c>
 80074fc:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80074fe:	3001      	adds	r0, #1
 8007500:	1c5a      	adds	r2, r3, #1
 8007502:	9221      	str	r2, [sp, #132]	; 0x84
 8007504:	785b      	ldrb	r3, [r3, #1]
 8007506:	2b30      	cmp	r3, #48	; 0x30
 8007508:	d0f8      	beq.n	80074fc <_strtod_l+0x208>
 800750a:	001a      	movs	r2, r3
 800750c:	3a31      	subs	r2, #49	; 0x31
 800750e:	2a08      	cmp	r2, #8
 8007510:	d83e      	bhi.n	8007590 <_strtod_l+0x29c>
 8007512:	900c      	str	r0, [sp, #48]	; 0x30
 8007514:	2000      	movs	r0, #0
 8007516:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8007518:	9006      	str	r0, [sp, #24]
 800751a:	9211      	str	r2, [sp, #68]	; 0x44
 800751c:	001a      	movs	r2, r3
 800751e:	9906      	ldr	r1, [sp, #24]
 8007520:	1c44      	adds	r4, r0, #1
 8007522:	3a30      	subs	r2, #48	; 0x30
 8007524:	2b30      	cmp	r3, #48	; 0x30
 8007526:	d013      	beq.n	8007550 <_strtod_l+0x25c>
 8007528:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800752a:	191b      	adds	r3, r3, r4
 800752c:	930c      	str	r3, [sp, #48]	; 0x30
 800752e:	1844      	adds	r4, r0, r1
 8007530:	000b      	movs	r3, r1
 8007532:	210a      	movs	r1, #10
 8007534:	429c      	cmp	r4, r3
 8007536:	d114      	bne.n	8007562 <_strtod_l+0x26e>
 8007538:	9b06      	ldr	r3, [sp, #24]
 800753a:	1c59      	adds	r1, r3, #1
 800753c:	1809      	adds	r1, r1, r0
 800753e:	1818      	adds	r0, r3, r0
 8007540:	2808      	cmp	r0, #8
 8007542:	dc1c      	bgt.n	800757e <_strtod_l+0x28a>
 8007544:	230a      	movs	r3, #10
 8007546:	2400      	movs	r4, #0
 8007548:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800754a:	4343      	muls	r3, r0
 800754c:	18d3      	adds	r3, r2, r3
 800754e:	930b      	str	r3, [sp, #44]	; 0x2c
 8007550:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007552:	0020      	movs	r0, r4
 8007554:	1c5a      	adds	r2, r3, #1
 8007556:	9221      	str	r2, [sp, #132]	; 0x84
 8007558:	785b      	ldrb	r3, [r3, #1]
 800755a:	9106      	str	r1, [sp, #24]
 800755c:	e7c7      	b.n	80074ee <_strtod_l+0x1fa>
 800755e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007560:	e7d1      	b.n	8007506 <_strtod_l+0x212>
 8007562:	2b08      	cmp	r3, #8
 8007564:	dc04      	bgt.n	8007570 <_strtod_l+0x27c>
 8007566:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8007568:	434d      	muls	r5, r1
 800756a:	950b      	str	r5, [sp, #44]	; 0x2c
 800756c:	3301      	adds	r3, #1
 800756e:	e7e1      	b.n	8007534 <_strtod_l+0x240>
 8007570:	1c5d      	adds	r5, r3, #1
 8007572:	2d10      	cmp	r5, #16
 8007574:	dcfa      	bgt.n	800756c <_strtod_l+0x278>
 8007576:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8007578:	434d      	muls	r5, r1
 800757a:	950e      	str	r5, [sp, #56]	; 0x38
 800757c:	e7f6      	b.n	800756c <_strtod_l+0x278>
 800757e:	2400      	movs	r4, #0
 8007580:	2910      	cmp	r1, #16
 8007582:	dce5      	bgt.n	8007550 <_strtod_l+0x25c>
 8007584:	230a      	movs	r3, #10
 8007586:	980e      	ldr	r0, [sp, #56]	; 0x38
 8007588:	4343      	muls	r3, r0
 800758a:	18d3      	adds	r3, r2, r3
 800758c:	930e      	str	r3, [sp, #56]	; 0x38
 800758e:	e7df      	b.n	8007550 <_strtod_l+0x25c>
 8007590:	2200      	movs	r2, #0
 8007592:	920c      	str	r2, [sp, #48]	; 0x30
 8007594:	9206      	str	r2, [sp, #24]
 8007596:	3201      	adds	r2, #1
 8007598:	e7ae      	b.n	80074f8 <_strtod_l+0x204>
 800759a:	2400      	movs	r4, #0
 800759c:	9b08      	ldr	r3, [sp, #32]
 800759e:	3302      	adds	r3, #2
 80075a0:	9321      	str	r3, [sp, #132]	; 0x84
 80075a2:	9b08      	ldr	r3, [sp, #32]
 80075a4:	789b      	ldrb	r3, [r3, #2]
 80075a6:	001a      	movs	r2, r3
 80075a8:	3a30      	subs	r2, #48	; 0x30
 80075aa:	2a09      	cmp	r2, #9
 80075ac:	d914      	bls.n	80075d8 <_strtod_l+0x2e4>
 80075ae:	9a08      	ldr	r2, [sp, #32]
 80075b0:	9221      	str	r2, [sp, #132]	; 0x84
 80075b2:	2200      	movs	r2, #0
 80075b4:	e032      	b.n	800761c <_strtod_l+0x328>
 80075b6:	46c0      	nop			; (mov r8, r8)
 80075b8:	0800a61c 	.word	0x0800a61c
 80075bc:	0800a54c 	.word	0x0800a54c
 80075c0:	ffefffff 	.word	0xffefffff
 80075c4:	00000433 	.word	0x00000433
 80075c8:	7ff00000 	.word	0x7ff00000
 80075cc:	7fffffff 	.word	0x7fffffff
 80075d0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80075d2:	1c5a      	adds	r2, r3, #1
 80075d4:	9221      	str	r2, [sp, #132]	; 0x84
 80075d6:	785b      	ldrb	r3, [r3, #1]
 80075d8:	2b30      	cmp	r3, #48	; 0x30
 80075da:	d0f9      	beq.n	80075d0 <_strtod_l+0x2dc>
 80075dc:	2200      	movs	r2, #0
 80075de:	9207      	str	r2, [sp, #28]
 80075e0:	001a      	movs	r2, r3
 80075e2:	3a31      	subs	r2, #49	; 0x31
 80075e4:	2a08      	cmp	r2, #8
 80075e6:	d81a      	bhi.n	800761e <_strtod_l+0x32a>
 80075e8:	3b30      	subs	r3, #48	; 0x30
 80075ea:	001a      	movs	r2, r3
 80075ec:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80075ee:	9307      	str	r3, [sp, #28]
 80075f0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80075f2:	1c59      	adds	r1, r3, #1
 80075f4:	9121      	str	r1, [sp, #132]	; 0x84
 80075f6:	785b      	ldrb	r3, [r3, #1]
 80075f8:	001d      	movs	r5, r3
 80075fa:	3d30      	subs	r5, #48	; 0x30
 80075fc:	2d09      	cmp	r5, #9
 80075fe:	d939      	bls.n	8007674 <_strtod_l+0x380>
 8007600:	9d07      	ldr	r5, [sp, #28]
 8007602:	1b49      	subs	r1, r1, r5
 8007604:	4daf      	ldr	r5, [pc, #700]	; (80078c4 <_strtod_l+0x5d0>)
 8007606:	9507      	str	r5, [sp, #28]
 8007608:	2908      	cmp	r1, #8
 800760a:	dc03      	bgt.n	8007614 <_strtod_l+0x320>
 800760c:	9207      	str	r2, [sp, #28]
 800760e:	42aa      	cmp	r2, r5
 8007610:	dd00      	ble.n	8007614 <_strtod_l+0x320>
 8007612:	9507      	str	r5, [sp, #28]
 8007614:	2c00      	cmp	r4, #0
 8007616:	d002      	beq.n	800761e <_strtod_l+0x32a>
 8007618:	9a07      	ldr	r2, [sp, #28]
 800761a:	4252      	negs	r2, r2
 800761c:	9207      	str	r2, [sp, #28]
 800761e:	9a06      	ldr	r2, [sp, #24]
 8007620:	2a00      	cmp	r2, #0
 8007622:	d14b      	bne.n	80076bc <_strtod_l+0x3c8>
 8007624:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007626:	4310      	orrs	r0, r2
 8007628:	d000      	beq.n	800762c <_strtod_l+0x338>
 800762a:	e6aa      	b.n	8007382 <_strtod_l+0x8e>
 800762c:	4662      	mov	r2, ip
 800762e:	2a00      	cmp	r2, #0
 8007630:	d000      	beq.n	8007634 <_strtod_l+0x340>
 8007632:	e6c5      	b.n	80073c0 <_strtod_l+0xcc>
 8007634:	2b69      	cmp	r3, #105	; 0x69
 8007636:	d025      	beq.n	8007684 <_strtod_l+0x390>
 8007638:	dc21      	bgt.n	800767e <_strtod_l+0x38a>
 800763a:	2b49      	cmp	r3, #73	; 0x49
 800763c:	d022      	beq.n	8007684 <_strtod_l+0x390>
 800763e:	2b4e      	cmp	r3, #78	; 0x4e
 8007640:	d000      	beq.n	8007644 <_strtod_l+0x350>
 8007642:	e6bd      	b.n	80073c0 <_strtod_l+0xcc>
 8007644:	49a0      	ldr	r1, [pc, #640]	; (80078c8 <_strtod_l+0x5d4>)
 8007646:	a821      	add	r0, sp, #132	; 0x84
 8007648:	f000 ff3e 	bl	80084c8 <__match>
 800764c:	2800      	cmp	r0, #0
 800764e:	d100      	bne.n	8007652 <_strtod_l+0x35e>
 8007650:	e6b6      	b.n	80073c0 <_strtod_l+0xcc>
 8007652:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007654:	781b      	ldrb	r3, [r3, #0]
 8007656:	2b28      	cmp	r3, #40	; 0x28
 8007658:	d12a      	bne.n	80076b0 <_strtod_l+0x3bc>
 800765a:	499c      	ldr	r1, [pc, #624]	; (80078cc <_strtod_l+0x5d8>)
 800765c:	aa24      	add	r2, sp, #144	; 0x90
 800765e:	a821      	add	r0, sp, #132	; 0x84
 8007660:	f000 ff46 	bl	80084f0 <__hexnan>
 8007664:	2805      	cmp	r0, #5
 8007666:	d123      	bne.n	80076b0 <_strtod_l+0x3bc>
 8007668:	9b25      	ldr	r3, [sp, #148]	; 0x94
 800766a:	4a99      	ldr	r2, [pc, #612]	; (80078d0 <_strtod_l+0x5dc>)
 800766c:	9e24      	ldr	r6, [sp, #144]	; 0x90
 800766e:	431a      	orrs	r2, r3
 8007670:	0017      	movs	r7, r2
 8007672:	e686      	b.n	8007382 <_strtod_l+0x8e>
 8007674:	210a      	movs	r1, #10
 8007676:	434a      	muls	r2, r1
 8007678:	18d2      	adds	r2, r2, r3
 800767a:	3a30      	subs	r2, #48	; 0x30
 800767c:	e7b8      	b.n	80075f0 <_strtod_l+0x2fc>
 800767e:	2b6e      	cmp	r3, #110	; 0x6e
 8007680:	d0e0      	beq.n	8007644 <_strtod_l+0x350>
 8007682:	e69d      	b.n	80073c0 <_strtod_l+0xcc>
 8007684:	4993      	ldr	r1, [pc, #588]	; (80078d4 <_strtod_l+0x5e0>)
 8007686:	a821      	add	r0, sp, #132	; 0x84
 8007688:	f000 ff1e 	bl	80084c8 <__match>
 800768c:	2800      	cmp	r0, #0
 800768e:	d100      	bne.n	8007692 <_strtod_l+0x39e>
 8007690:	e696      	b.n	80073c0 <_strtod_l+0xcc>
 8007692:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007694:	4990      	ldr	r1, [pc, #576]	; (80078d8 <_strtod_l+0x5e4>)
 8007696:	3b01      	subs	r3, #1
 8007698:	a821      	add	r0, sp, #132	; 0x84
 800769a:	9321      	str	r3, [sp, #132]	; 0x84
 800769c:	f000 ff14 	bl	80084c8 <__match>
 80076a0:	2800      	cmp	r0, #0
 80076a2:	d102      	bne.n	80076aa <_strtod_l+0x3b6>
 80076a4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80076a6:	3301      	adds	r3, #1
 80076a8:	9321      	str	r3, [sp, #132]	; 0x84
 80076aa:	2600      	movs	r6, #0
 80076ac:	4f88      	ldr	r7, [pc, #544]	; (80078d0 <_strtod_l+0x5dc>)
 80076ae:	e668      	b.n	8007382 <_strtod_l+0x8e>
 80076b0:	488a      	ldr	r0, [pc, #552]	; (80078dc <_strtod_l+0x5e8>)
 80076b2:	f001 ffef 	bl	8009694 <nan>
 80076b6:	0006      	movs	r6, r0
 80076b8:	000f      	movs	r7, r1
 80076ba:	e662      	b.n	8007382 <_strtod_l+0x8e>
 80076bc:	9b07      	ldr	r3, [sp, #28]
 80076be:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80076c0:	1a9b      	subs	r3, r3, r2
 80076c2:	930a      	str	r3, [sp, #40]	; 0x28
 80076c4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80076c6:	2b00      	cmp	r3, #0
 80076c8:	d101      	bne.n	80076ce <_strtod_l+0x3da>
 80076ca:	9b06      	ldr	r3, [sp, #24]
 80076cc:	9309      	str	r3, [sp, #36]	; 0x24
 80076ce:	9c06      	ldr	r4, [sp, #24]
 80076d0:	2c10      	cmp	r4, #16
 80076d2:	dd00      	ble.n	80076d6 <_strtod_l+0x3e2>
 80076d4:	2410      	movs	r4, #16
 80076d6:	980b      	ldr	r0, [sp, #44]	; 0x2c
 80076d8:	f7fb fa50 	bl	8002b7c <__aeabi_ui2d>
 80076dc:	9b06      	ldr	r3, [sp, #24]
 80076de:	0006      	movs	r6, r0
 80076e0:	000f      	movs	r7, r1
 80076e2:	2b09      	cmp	r3, #9
 80076e4:	dd15      	ble.n	8007712 <_strtod_l+0x41e>
 80076e6:	0022      	movs	r2, r4
 80076e8:	4b7d      	ldr	r3, [pc, #500]	; (80078e0 <_strtod_l+0x5ec>)
 80076ea:	3a09      	subs	r2, #9
 80076ec:	00d2      	lsls	r2, r2, #3
 80076ee:	189b      	adds	r3, r3, r2
 80076f0:	681a      	ldr	r2, [r3, #0]
 80076f2:	685b      	ldr	r3, [r3, #4]
 80076f4:	f7fa fbde 	bl	8001eb4 <__aeabi_dmul>
 80076f8:	0006      	movs	r6, r0
 80076fa:	980e      	ldr	r0, [sp, #56]	; 0x38
 80076fc:	000f      	movs	r7, r1
 80076fe:	f7fb fa3d 	bl	8002b7c <__aeabi_ui2d>
 8007702:	0002      	movs	r2, r0
 8007704:	000b      	movs	r3, r1
 8007706:	0030      	movs	r0, r6
 8007708:	0039      	movs	r1, r7
 800770a:	f7f9 fc63 	bl	8000fd4 <__aeabi_dadd>
 800770e:	0006      	movs	r6, r0
 8007710:	000f      	movs	r7, r1
 8007712:	9b06      	ldr	r3, [sp, #24]
 8007714:	2b0f      	cmp	r3, #15
 8007716:	dc39      	bgt.n	800778c <_strtod_l+0x498>
 8007718:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800771a:	2b00      	cmp	r3, #0
 800771c:	d100      	bne.n	8007720 <_strtod_l+0x42c>
 800771e:	e630      	b.n	8007382 <_strtod_l+0x8e>
 8007720:	dd24      	ble.n	800776c <_strtod_l+0x478>
 8007722:	2b16      	cmp	r3, #22
 8007724:	dc09      	bgt.n	800773a <_strtod_l+0x446>
 8007726:	00dd      	lsls	r5, r3, #3
 8007728:	0032      	movs	r2, r6
 800772a:	003b      	movs	r3, r7
 800772c:	4c6c      	ldr	r4, [pc, #432]	; (80078e0 <_strtod_l+0x5ec>)
 800772e:	1964      	adds	r4, r4, r5
 8007730:	6820      	ldr	r0, [r4, #0]
 8007732:	6861      	ldr	r1, [r4, #4]
 8007734:	f7fa fbbe 	bl	8001eb4 <__aeabi_dmul>
 8007738:	e7bd      	b.n	80076b6 <_strtod_l+0x3c2>
 800773a:	2325      	movs	r3, #37	; 0x25
 800773c:	9a06      	ldr	r2, [sp, #24]
 800773e:	1a9b      	subs	r3, r3, r2
 8007740:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007742:	4293      	cmp	r3, r2
 8007744:	db22      	blt.n	800778c <_strtod_l+0x498>
 8007746:	240f      	movs	r4, #15
 8007748:	9b06      	ldr	r3, [sp, #24]
 800774a:	4d65      	ldr	r5, [pc, #404]	; (80078e0 <_strtod_l+0x5ec>)
 800774c:	1ae4      	subs	r4, r4, r3
 800774e:	00e1      	lsls	r1, r4, #3
 8007750:	1869      	adds	r1, r5, r1
 8007752:	0032      	movs	r2, r6
 8007754:	6808      	ldr	r0, [r1, #0]
 8007756:	6849      	ldr	r1, [r1, #4]
 8007758:	003b      	movs	r3, r7
 800775a:	f7fa fbab 	bl	8001eb4 <__aeabi_dmul>
 800775e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007760:	1b1c      	subs	r4, r3, r4
 8007762:	00e4      	lsls	r4, r4, #3
 8007764:	192c      	adds	r4, r5, r4
 8007766:	6822      	ldr	r2, [r4, #0]
 8007768:	6863      	ldr	r3, [r4, #4]
 800776a:	e7e3      	b.n	8007734 <_strtod_l+0x440>
 800776c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800776e:	3316      	adds	r3, #22
 8007770:	db0c      	blt.n	800778c <_strtod_l+0x498>
 8007772:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007774:	9a07      	ldr	r2, [sp, #28]
 8007776:	0030      	movs	r0, r6
 8007778:	1a9a      	subs	r2, r3, r2
 800777a:	4b59      	ldr	r3, [pc, #356]	; (80078e0 <_strtod_l+0x5ec>)
 800777c:	00d2      	lsls	r2, r2, #3
 800777e:	189b      	adds	r3, r3, r2
 8007780:	0039      	movs	r1, r7
 8007782:	681a      	ldr	r2, [r3, #0]
 8007784:	685b      	ldr	r3, [r3, #4]
 8007786:	f7f9 ff8f 	bl	80016a8 <__aeabi_ddiv>
 800778a:	e794      	b.n	80076b6 <_strtod_l+0x3c2>
 800778c:	9b06      	ldr	r3, [sp, #24]
 800778e:	1b1c      	subs	r4, r3, r4
 8007790:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007792:	18e4      	adds	r4, r4, r3
 8007794:	2c00      	cmp	r4, #0
 8007796:	dd70      	ble.n	800787a <_strtod_l+0x586>
 8007798:	230f      	movs	r3, #15
 800779a:	0021      	movs	r1, r4
 800779c:	4019      	ands	r1, r3
 800779e:	421c      	tst	r4, r3
 80077a0:	d00a      	beq.n	80077b8 <_strtod_l+0x4c4>
 80077a2:	00cb      	lsls	r3, r1, #3
 80077a4:	494e      	ldr	r1, [pc, #312]	; (80078e0 <_strtod_l+0x5ec>)
 80077a6:	0032      	movs	r2, r6
 80077a8:	18c9      	adds	r1, r1, r3
 80077aa:	6808      	ldr	r0, [r1, #0]
 80077ac:	6849      	ldr	r1, [r1, #4]
 80077ae:	003b      	movs	r3, r7
 80077b0:	f7fa fb80 	bl	8001eb4 <__aeabi_dmul>
 80077b4:	0006      	movs	r6, r0
 80077b6:	000f      	movs	r7, r1
 80077b8:	230f      	movs	r3, #15
 80077ba:	439c      	bics	r4, r3
 80077bc:	d048      	beq.n	8007850 <_strtod_l+0x55c>
 80077be:	3326      	adds	r3, #38	; 0x26
 80077c0:	33ff      	adds	r3, #255	; 0xff
 80077c2:	429c      	cmp	r4, r3
 80077c4:	dd22      	ble.n	800780c <_strtod_l+0x518>
 80077c6:	2300      	movs	r3, #0
 80077c8:	9306      	str	r3, [sp, #24]
 80077ca:	9307      	str	r3, [sp, #28]
 80077cc:	930b      	str	r3, [sp, #44]	; 0x2c
 80077ce:	9309      	str	r3, [sp, #36]	; 0x24
 80077d0:	2322      	movs	r3, #34	; 0x22
 80077d2:	2600      	movs	r6, #0
 80077d4:	9a05      	ldr	r2, [sp, #20]
 80077d6:	4f3e      	ldr	r7, [pc, #248]	; (80078d0 <_strtod_l+0x5dc>)
 80077d8:	6013      	str	r3, [r2, #0]
 80077da:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80077dc:	42b3      	cmp	r3, r6
 80077de:	d100      	bne.n	80077e2 <_strtod_l+0x4ee>
 80077e0:	e5cf      	b.n	8007382 <_strtod_l+0x8e>
 80077e2:	9922      	ldr	r1, [sp, #136]	; 0x88
 80077e4:	9805      	ldr	r0, [sp, #20]
 80077e6:	f000 ff7f 	bl	80086e8 <_Bfree>
 80077ea:	9909      	ldr	r1, [sp, #36]	; 0x24
 80077ec:	9805      	ldr	r0, [sp, #20]
 80077ee:	f000 ff7b 	bl	80086e8 <_Bfree>
 80077f2:	9907      	ldr	r1, [sp, #28]
 80077f4:	9805      	ldr	r0, [sp, #20]
 80077f6:	f000 ff77 	bl	80086e8 <_Bfree>
 80077fa:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80077fc:	9805      	ldr	r0, [sp, #20]
 80077fe:	f000 ff73 	bl	80086e8 <_Bfree>
 8007802:	9906      	ldr	r1, [sp, #24]
 8007804:	9805      	ldr	r0, [sp, #20]
 8007806:	f000 ff6f 	bl	80086e8 <_Bfree>
 800780a:	e5ba      	b.n	8007382 <_strtod_l+0x8e>
 800780c:	2300      	movs	r3, #0
 800780e:	0030      	movs	r0, r6
 8007810:	0039      	movs	r1, r7
 8007812:	001d      	movs	r5, r3
 8007814:	1124      	asrs	r4, r4, #4
 8007816:	2c01      	cmp	r4, #1
 8007818:	dc1d      	bgt.n	8007856 <_strtod_l+0x562>
 800781a:	2b00      	cmp	r3, #0
 800781c:	d001      	beq.n	8007822 <_strtod_l+0x52e>
 800781e:	0006      	movs	r6, r0
 8007820:	000f      	movs	r7, r1
 8007822:	4b30      	ldr	r3, [pc, #192]	; (80078e4 <_strtod_l+0x5f0>)
 8007824:	00ed      	lsls	r5, r5, #3
 8007826:	18ff      	adds	r7, r7, r3
 8007828:	4b2f      	ldr	r3, [pc, #188]	; (80078e8 <_strtod_l+0x5f4>)
 800782a:	0032      	movs	r2, r6
 800782c:	195d      	adds	r5, r3, r5
 800782e:	6828      	ldr	r0, [r5, #0]
 8007830:	6869      	ldr	r1, [r5, #4]
 8007832:	003b      	movs	r3, r7
 8007834:	f7fa fb3e 	bl	8001eb4 <__aeabi_dmul>
 8007838:	4b25      	ldr	r3, [pc, #148]	; (80078d0 <_strtod_l+0x5dc>)
 800783a:	4a2c      	ldr	r2, [pc, #176]	; (80078ec <_strtod_l+0x5f8>)
 800783c:	0006      	movs	r6, r0
 800783e:	400b      	ands	r3, r1
 8007840:	4293      	cmp	r3, r2
 8007842:	d8c0      	bhi.n	80077c6 <_strtod_l+0x4d2>
 8007844:	4a2a      	ldr	r2, [pc, #168]	; (80078f0 <_strtod_l+0x5fc>)
 8007846:	4293      	cmp	r3, r2
 8007848:	d913      	bls.n	8007872 <_strtod_l+0x57e>
 800784a:	2601      	movs	r6, #1
 800784c:	4f29      	ldr	r7, [pc, #164]	; (80078f4 <_strtod_l+0x600>)
 800784e:	4276      	negs	r6, r6
 8007850:	2300      	movs	r3, #0
 8007852:	9308      	str	r3, [sp, #32]
 8007854:	e087      	b.n	8007966 <_strtod_l+0x672>
 8007856:	2201      	movs	r2, #1
 8007858:	4214      	tst	r4, r2
 800785a:	d007      	beq.n	800786c <_strtod_l+0x578>
 800785c:	4a22      	ldr	r2, [pc, #136]	; (80078e8 <_strtod_l+0x5f4>)
 800785e:	00eb      	lsls	r3, r5, #3
 8007860:	189b      	adds	r3, r3, r2
 8007862:	681a      	ldr	r2, [r3, #0]
 8007864:	685b      	ldr	r3, [r3, #4]
 8007866:	f7fa fb25 	bl	8001eb4 <__aeabi_dmul>
 800786a:	2301      	movs	r3, #1
 800786c:	3501      	adds	r5, #1
 800786e:	1064      	asrs	r4, r4, #1
 8007870:	e7d1      	b.n	8007816 <_strtod_l+0x522>
 8007872:	23d4      	movs	r3, #212	; 0xd4
 8007874:	049b      	lsls	r3, r3, #18
 8007876:	18cf      	adds	r7, r1, r3
 8007878:	e7ea      	b.n	8007850 <_strtod_l+0x55c>
 800787a:	2c00      	cmp	r4, #0
 800787c:	d0e8      	beq.n	8007850 <_strtod_l+0x55c>
 800787e:	4264      	negs	r4, r4
 8007880:	220f      	movs	r2, #15
 8007882:	0023      	movs	r3, r4
 8007884:	4013      	ands	r3, r2
 8007886:	4214      	tst	r4, r2
 8007888:	d00a      	beq.n	80078a0 <_strtod_l+0x5ac>
 800788a:	00da      	lsls	r2, r3, #3
 800788c:	4b14      	ldr	r3, [pc, #80]	; (80078e0 <_strtod_l+0x5ec>)
 800788e:	0030      	movs	r0, r6
 8007890:	189b      	adds	r3, r3, r2
 8007892:	0039      	movs	r1, r7
 8007894:	681a      	ldr	r2, [r3, #0]
 8007896:	685b      	ldr	r3, [r3, #4]
 8007898:	f7f9 ff06 	bl	80016a8 <__aeabi_ddiv>
 800789c:	0006      	movs	r6, r0
 800789e:	000f      	movs	r7, r1
 80078a0:	1124      	asrs	r4, r4, #4
 80078a2:	d0d5      	beq.n	8007850 <_strtod_l+0x55c>
 80078a4:	2c1f      	cmp	r4, #31
 80078a6:	dd27      	ble.n	80078f8 <_strtod_l+0x604>
 80078a8:	2300      	movs	r3, #0
 80078aa:	9306      	str	r3, [sp, #24]
 80078ac:	9307      	str	r3, [sp, #28]
 80078ae:	930b      	str	r3, [sp, #44]	; 0x2c
 80078b0:	9309      	str	r3, [sp, #36]	; 0x24
 80078b2:	2322      	movs	r3, #34	; 0x22
 80078b4:	9a05      	ldr	r2, [sp, #20]
 80078b6:	2600      	movs	r6, #0
 80078b8:	6013      	str	r3, [r2, #0]
 80078ba:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80078bc:	2700      	movs	r7, #0
 80078be:	2b00      	cmp	r3, #0
 80078c0:	d18f      	bne.n	80077e2 <_strtod_l+0x4ee>
 80078c2:	e55e      	b.n	8007382 <_strtod_l+0x8e>
 80078c4:	00004e1f 	.word	0x00004e1f
 80078c8:	0800a549 	.word	0x0800a549
 80078cc:	0800a560 	.word	0x0800a560
 80078d0:	7ff00000 	.word	0x7ff00000
 80078d4:	0800a540 	.word	0x0800a540
 80078d8:	0800a543 	.word	0x0800a543
 80078dc:	0800a812 	.word	0x0800a812
 80078e0:	0800a6d0 	.word	0x0800a6d0
 80078e4:	fcb00000 	.word	0xfcb00000
 80078e8:	0800a6a8 	.word	0x0800a6a8
 80078ec:	7ca00000 	.word	0x7ca00000
 80078f0:	7c900000 	.word	0x7c900000
 80078f4:	7fefffff 	.word	0x7fefffff
 80078f8:	2310      	movs	r3, #16
 80078fa:	0022      	movs	r2, r4
 80078fc:	401a      	ands	r2, r3
 80078fe:	9208      	str	r2, [sp, #32]
 8007900:	421c      	tst	r4, r3
 8007902:	d001      	beq.n	8007908 <_strtod_l+0x614>
 8007904:	335a      	adds	r3, #90	; 0x5a
 8007906:	9308      	str	r3, [sp, #32]
 8007908:	0030      	movs	r0, r6
 800790a:	0039      	movs	r1, r7
 800790c:	2300      	movs	r3, #0
 800790e:	4dca      	ldr	r5, [pc, #808]	; (8007c38 <_strtod_l+0x944>)
 8007910:	2201      	movs	r2, #1
 8007912:	4214      	tst	r4, r2
 8007914:	d004      	beq.n	8007920 <_strtod_l+0x62c>
 8007916:	682a      	ldr	r2, [r5, #0]
 8007918:	686b      	ldr	r3, [r5, #4]
 800791a:	f7fa facb 	bl	8001eb4 <__aeabi_dmul>
 800791e:	2301      	movs	r3, #1
 8007920:	1064      	asrs	r4, r4, #1
 8007922:	3508      	adds	r5, #8
 8007924:	2c00      	cmp	r4, #0
 8007926:	d1f3      	bne.n	8007910 <_strtod_l+0x61c>
 8007928:	2b00      	cmp	r3, #0
 800792a:	d001      	beq.n	8007930 <_strtod_l+0x63c>
 800792c:	0006      	movs	r6, r0
 800792e:	000f      	movs	r7, r1
 8007930:	9b08      	ldr	r3, [sp, #32]
 8007932:	2b00      	cmp	r3, #0
 8007934:	d00f      	beq.n	8007956 <_strtod_l+0x662>
 8007936:	236b      	movs	r3, #107	; 0x6b
 8007938:	0079      	lsls	r1, r7, #1
 800793a:	0d49      	lsrs	r1, r1, #21
 800793c:	003a      	movs	r2, r7
 800793e:	1a5b      	subs	r3, r3, r1
 8007940:	2b00      	cmp	r3, #0
 8007942:	dd08      	ble.n	8007956 <_strtod_l+0x662>
 8007944:	2b1f      	cmp	r3, #31
 8007946:	dc00      	bgt.n	800794a <_strtod_l+0x656>
 8007948:	e126      	b.n	8007b98 <_strtod_l+0x8a4>
 800794a:	2600      	movs	r6, #0
 800794c:	2b34      	cmp	r3, #52	; 0x34
 800794e:	dc00      	bgt.n	8007952 <_strtod_l+0x65e>
 8007950:	e11b      	b.n	8007b8a <_strtod_l+0x896>
 8007952:	27dc      	movs	r7, #220	; 0xdc
 8007954:	04bf      	lsls	r7, r7, #18
 8007956:	2200      	movs	r2, #0
 8007958:	2300      	movs	r3, #0
 800795a:	0030      	movs	r0, r6
 800795c:	0039      	movs	r1, r7
 800795e:	f7f8 fd75 	bl	800044c <__aeabi_dcmpeq>
 8007962:	2800      	cmp	r0, #0
 8007964:	d1a0      	bne.n	80078a8 <_strtod_l+0x5b4>
 8007966:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007968:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800796a:	9300      	str	r3, [sp, #0]
 800796c:	9911      	ldr	r1, [sp, #68]	; 0x44
 800796e:	9b06      	ldr	r3, [sp, #24]
 8007970:	9805      	ldr	r0, [sp, #20]
 8007972:	f000 ff21 	bl	80087b8 <__s2b>
 8007976:	900b      	str	r0, [sp, #44]	; 0x2c
 8007978:	2800      	cmp	r0, #0
 800797a:	d100      	bne.n	800797e <_strtod_l+0x68a>
 800797c:	e723      	b.n	80077c6 <_strtod_l+0x4d2>
 800797e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007980:	9907      	ldr	r1, [sp, #28]
 8007982:	17da      	asrs	r2, r3, #31
 8007984:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007986:	1a5b      	subs	r3, r3, r1
 8007988:	401a      	ands	r2, r3
 800798a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800798c:	9215      	str	r2, [sp, #84]	; 0x54
 800798e:	43db      	mvns	r3, r3
 8007990:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007992:	17db      	asrs	r3, r3, #31
 8007994:	401a      	ands	r2, r3
 8007996:	2300      	movs	r3, #0
 8007998:	921c      	str	r2, [sp, #112]	; 0x70
 800799a:	9306      	str	r3, [sp, #24]
 800799c:	9307      	str	r3, [sp, #28]
 800799e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80079a0:	9805      	ldr	r0, [sp, #20]
 80079a2:	6859      	ldr	r1, [r3, #4]
 80079a4:	f000 fe5c 	bl	8008660 <_Balloc>
 80079a8:	9009      	str	r0, [sp, #36]	; 0x24
 80079aa:	2800      	cmp	r0, #0
 80079ac:	d100      	bne.n	80079b0 <_strtod_l+0x6bc>
 80079ae:	e70f      	b.n	80077d0 <_strtod_l+0x4dc>
 80079b0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80079b2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80079b4:	691b      	ldr	r3, [r3, #16]
 80079b6:	310c      	adds	r1, #12
 80079b8:	1c9a      	adds	r2, r3, #2
 80079ba:	0092      	lsls	r2, r2, #2
 80079bc:	300c      	adds	r0, #12
 80079be:	930c      	str	r3, [sp, #48]	; 0x30
 80079c0:	f7ff fc4e 	bl	8007260 <memcpy>
 80079c4:	ab24      	add	r3, sp, #144	; 0x90
 80079c6:	9301      	str	r3, [sp, #4]
 80079c8:	ab23      	add	r3, sp, #140	; 0x8c
 80079ca:	9300      	str	r3, [sp, #0]
 80079cc:	0032      	movs	r2, r6
 80079ce:	003b      	movs	r3, r7
 80079d0:	9805      	ldr	r0, [sp, #20]
 80079d2:	960e      	str	r6, [sp, #56]	; 0x38
 80079d4:	970f      	str	r7, [sp, #60]	; 0x3c
 80079d6:	f001 fa3d 	bl	8008e54 <__d2b>
 80079da:	9022      	str	r0, [sp, #136]	; 0x88
 80079dc:	2800      	cmp	r0, #0
 80079de:	d100      	bne.n	80079e2 <_strtod_l+0x6ee>
 80079e0:	e6f6      	b.n	80077d0 <_strtod_l+0x4dc>
 80079e2:	2101      	movs	r1, #1
 80079e4:	9805      	ldr	r0, [sp, #20]
 80079e6:	f000 ff7b 	bl	80088e0 <__i2b>
 80079ea:	9007      	str	r0, [sp, #28]
 80079ec:	2800      	cmp	r0, #0
 80079ee:	d100      	bne.n	80079f2 <_strtod_l+0x6fe>
 80079f0:	e6ee      	b.n	80077d0 <_strtod_l+0x4dc>
 80079f2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80079f4:	2b00      	cmp	r3, #0
 80079f6:	da00      	bge.n	80079fa <_strtod_l+0x706>
 80079f8:	e0d3      	b.n	8007ba2 <_strtod_l+0x8ae>
 80079fa:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80079fc:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 80079fe:	189d      	adds	r5, r3, r2
 8007a00:	9908      	ldr	r1, [sp, #32]
 8007a02:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8007a04:	1a5b      	subs	r3, r3, r1
 8007a06:	2136      	movs	r1, #54	; 0x36
 8007a08:	189b      	adds	r3, r3, r2
 8007a0a:	1a8a      	subs	r2, r1, r2
 8007a0c:	498b      	ldr	r1, [pc, #556]	; (8007c3c <_strtod_l+0x948>)
 8007a0e:	3b01      	subs	r3, #1
 8007a10:	2001      	movs	r0, #1
 8007a12:	428b      	cmp	r3, r1
 8007a14:	db00      	blt.n	8007a18 <_strtod_l+0x724>
 8007a16:	e0cf      	b.n	8007bb8 <_strtod_l+0x8c4>
 8007a18:	1ac9      	subs	r1, r1, r3
 8007a1a:	1a52      	subs	r2, r2, r1
 8007a1c:	291f      	cmp	r1, #31
 8007a1e:	dd00      	ble.n	8007a22 <_strtod_l+0x72e>
 8007a20:	e0c3      	b.n	8007baa <_strtod_l+0x8b6>
 8007a22:	4088      	lsls	r0, r1
 8007a24:	2300      	movs	r3, #0
 8007a26:	9014      	str	r0, [sp, #80]	; 0x50
 8007a28:	9312      	str	r3, [sp, #72]	; 0x48
 8007a2a:	18ab      	adds	r3, r5, r2
 8007a2c:	930c      	str	r3, [sp, #48]	; 0x30
 8007a2e:	18a4      	adds	r4, r4, r2
 8007a30:	9b08      	ldr	r3, [sp, #32]
 8007a32:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007a34:	191c      	adds	r4, r3, r4
 8007a36:	002b      	movs	r3, r5
 8007a38:	4295      	cmp	r5, r2
 8007a3a:	dd00      	ble.n	8007a3e <_strtod_l+0x74a>
 8007a3c:	0013      	movs	r3, r2
 8007a3e:	42a3      	cmp	r3, r4
 8007a40:	dd00      	ble.n	8007a44 <_strtod_l+0x750>
 8007a42:	0023      	movs	r3, r4
 8007a44:	2b00      	cmp	r3, #0
 8007a46:	dd04      	ble.n	8007a52 <_strtod_l+0x75e>
 8007a48:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007a4a:	1ae4      	subs	r4, r4, r3
 8007a4c:	1ad2      	subs	r2, r2, r3
 8007a4e:	920c      	str	r2, [sp, #48]	; 0x30
 8007a50:	1aed      	subs	r5, r5, r3
 8007a52:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007a54:	2b00      	cmp	r3, #0
 8007a56:	dd17      	ble.n	8007a88 <_strtod_l+0x794>
 8007a58:	001a      	movs	r2, r3
 8007a5a:	9907      	ldr	r1, [sp, #28]
 8007a5c:	9805      	ldr	r0, [sp, #20]
 8007a5e:	f001 f805 	bl	8008a6c <__pow5mult>
 8007a62:	9007      	str	r0, [sp, #28]
 8007a64:	2800      	cmp	r0, #0
 8007a66:	d100      	bne.n	8007a6a <_strtod_l+0x776>
 8007a68:	e6b2      	b.n	80077d0 <_strtod_l+0x4dc>
 8007a6a:	0001      	movs	r1, r0
 8007a6c:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8007a6e:	9805      	ldr	r0, [sp, #20]
 8007a70:	f000 ff4c 	bl	800890c <__multiply>
 8007a74:	9011      	str	r0, [sp, #68]	; 0x44
 8007a76:	2800      	cmp	r0, #0
 8007a78:	d100      	bne.n	8007a7c <_strtod_l+0x788>
 8007a7a:	e6a9      	b.n	80077d0 <_strtod_l+0x4dc>
 8007a7c:	9922      	ldr	r1, [sp, #136]	; 0x88
 8007a7e:	9805      	ldr	r0, [sp, #20]
 8007a80:	f000 fe32 	bl	80086e8 <_Bfree>
 8007a84:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007a86:	9322      	str	r3, [sp, #136]	; 0x88
 8007a88:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007a8a:	2b00      	cmp	r3, #0
 8007a8c:	dd00      	ble.n	8007a90 <_strtod_l+0x79c>
 8007a8e:	e096      	b.n	8007bbe <_strtod_l+0x8ca>
 8007a90:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007a92:	2b00      	cmp	r3, #0
 8007a94:	dd08      	ble.n	8007aa8 <_strtod_l+0x7b4>
 8007a96:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8007a98:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007a9a:	9805      	ldr	r0, [sp, #20]
 8007a9c:	f000 ffe6 	bl	8008a6c <__pow5mult>
 8007aa0:	9009      	str	r0, [sp, #36]	; 0x24
 8007aa2:	2800      	cmp	r0, #0
 8007aa4:	d100      	bne.n	8007aa8 <_strtod_l+0x7b4>
 8007aa6:	e693      	b.n	80077d0 <_strtod_l+0x4dc>
 8007aa8:	2c00      	cmp	r4, #0
 8007aaa:	dd08      	ble.n	8007abe <_strtod_l+0x7ca>
 8007aac:	0022      	movs	r2, r4
 8007aae:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007ab0:	9805      	ldr	r0, [sp, #20]
 8007ab2:	f001 f837 	bl	8008b24 <__lshift>
 8007ab6:	9009      	str	r0, [sp, #36]	; 0x24
 8007ab8:	2800      	cmp	r0, #0
 8007aba:	d100      	bne.n	8007abe <_strtod_l+0x7ca>
 8007abc:	e688      	b.n	80077d0 <_strtod_l+0x4dc>
 8007abe:	2d00      	cmp	r5, #0
 8007ac0:	dd08      	ble.n	8007ad4 <_strtod_l+0x7e0>
 8007ac2:	002a      	movs	r2, r5
 8007ac4:	9907      	ldr	r1, [sp, #28]
 8007ac6:	9805      	ldr	r0, [sp, #20]
 8007ac8:	f001 f82c 	bl	8008b24 <__lshift>
 8007acc:	9007      	str	r0, [sp, #28]
 8007ace:	2800      	cmp	r0, #0
 8007ad0:	d100      	bne.n	8007ad4 <_strtod_l+0x7e0>
 8007ad2:	e67d      	b.n	80077d0 <_strtod_l+0x4dc>
 8007ad4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007ad6:	9922      	ldr	r1, [sp, #136]	; 0x88
 8007ad8:	9805      	ldr	r0, [sp, #20]
 8007ada:	f001 f8af 	bl	8008c3c <__mdiff>
 8007ade:	9006      	str	r0, [sp, #24]
 8007ae0:	2800      	cmp	r0, #0
 8007ae2:	d100      	bne.n	8007ae6 <_strtod_l+0x7f2>
 8007ae4:	e674      	b.n	80077d0 <_strtod_l+0x4dc>
 8007ae6:	2200      	movs	r2, #0
 8007ae8:	68c3      	ldr	r3, [r0, #12]
 8007aea:	9907      	ldr	r1, [sp, #28]
 8007aec:	60c2      	str	r2, [r0, #12]
 8007aee:	9311      	str	r3, [sp, #68]	; 0x44
 8007af0:	f001 f888 	bl	8008c04 <__mcmp>
 8007af4:	2800      	cmp	r0, #0
 8007af6:	da6c      	bge.n	8007bd2 <_strtod_l+0x8de>
 8007af8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007afa:	4333      	orrs	r3, r6
 8007afc:	d000      	beq.n	8007b00 <_strtod_l+0x80c>
 8007afe:	e097      	b.n	8007c30 <_strtod_l+0x93c>
 8007b00:	033b      	lsls	r3, r7, #12
 8007b02:	d000      	beq.n	8007b06 <_strtod_l+0x812>
 8007b04:	e094      	b.n	8007c30 <_strtod_l+0x93c>
 8007b06:	22d6      	movs	r2, #214	; 0xd6
 8007b08:	4b4d      	ldr	r3, [pc, #308]	; (8007c40 <_strtod_l+0x94c>)
 8007b0a:	04d2      	lsls	r2, r2, #19
 8007b0c:	403b      	ands	r3, r7
 8007b0e:	4293      	cmp	r3, r2
 8007b10:	d800      	bhi.n	8007b14 <_strtod_l+0x820>
 8007b12:	e08d      	b.n	8007c30 <_strtod_l+0x93c>
 8007b14:	9b06      	ldr	r3, [sp, #24]
 8007b16:	695b      	ldr	r3, [r3, #20]
 8007b18:	930a      	str	r3, [sp, #40]	; 0x28
 8007b1a:	2b00      	cmp	r3, #0
 8007b1c:	d105      	bne.n	8007b2a <_strtod_l+0x836>
 8007b1e:	9b06      	ldr	r3, [sp, #24]
 8007b20:	691b      	ldr	r3, [r3, #16]
 8007b22:	930a      	str	r3, [sp, #40]	; 0x28
 8007b24:	2b01      	cmp	r3, #1
 8007b26:	dc00      	bgt.n	8007b2a <_strtod_l+0x836>
 8007b28:	e082      	b.n	8007c30 <_strtod_l+0x93c>
 8007b2a:	9906      	ldr	r1, [sp, #24]
 8007b2c:	2201      	movs	r2, #1
 8007b2e:	9805      	ldr	r0, [sp, #20]
 8007b30:	f000 fff8 	bl	8008b24 <__lshift>
 8007b34:	9907      	ldr	r1, [sp, #28]
 8007b36:	9006      	str	r0, [sp, #24]
 8007b38:	f001 f864 	bl	8008c04 <__mcmp>
 8007b3c:	2800      	cmp	r0, #0
 8007b3e:	dd77      	ble.n	8007c30 <_strtod_l+0x93c>
 8007b40:	9908      	ldr	r1, [sp, #32]
 8007b42:	003b      	movs	r3, r7
 8007b44:	4a3e      	ldr	r2, [pc, #248]	; (8007c40 <_strtod_l+0x94c>)
 8007b46:	2900      	cmp	r1, #0
 8007b48:	d100      	bne.n	8007b4c <_strtod_l+0x858>
 8007b4a:	e09e      	b.n	8007c8a <_strtod_l+0x996>
 8007b4c:	0011      	movs	r1, r2
 8007b4e:	20d6      	movs	r0, #214	; 0xd6
 8007b50:	4039      	ands	r1, r7
 8007b52:	04c0      	lsls	r0, r0, #19
 8007b54:	4281      	cmp	r1, r0
 8007b56:	dd00      	ble.n	8007b5a <_strtod_l+0x866>
 8007b58:	e097      	b.n	8007c8a <_strtod_l+0x996>
 8007b5a:	23dc      	movs	r3, #220	; 0xdc
 8007b5c:	049b      	lsls	r3, r3, #18
 8007b5e:	4299      	cmp	r1, r3
 8007b60:	dc00      	bgt.n	8007b64 <_strtod_l+0x870>
 8007b62:	e6a6      	b.n	80078b2 <_strtod_l+0x5be>
 8007b64:	4b37      	ldr	r3, [pc, #220]	; (8007c44 <_strtod_l+0x950>)
 8007b66:	0030      	movs	r0, r6
 8007b68:	931b      	str	r3, [sp, #108]	; 0x6c
 8007b6a:	2300      	movs	r3, #0
 8007b6c:	931a      	str	r3, [sp, #104]	; 0x68
 8007b6e:	0039      	movs	r1, r7
 8007b70:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8007b72:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007b74:	f7fa f99e 	bl	8001eb4 <__aeabi_dmul>
 8007b78:	0006      	movs	r6, r0
 8007b7a:	000f      	movs	r7, r1
 8007b7c:	4308      	orrs	r0, r1
 8007b7e:	d000      	beq.n	8007b82 <_strtod_l+0x88e>
 8007b80:	e62f      	b.n	80077e2 <_strtod_l+0x4ee>
 8007b82:	2322      	movs	r3, #34	; 0x22
 8007b84:	9a05      	ldr	r2, [sp, #20]
 8007b86:	6013      	str	r3, [r2, #0]
 8007b88:	e62b      	b.n	80077e2 <_strtod_l+0x4ee>
 8007b8a:	2101      	movs	r1, #1
 8007b8c:	3b20      	subs	r3, #32
 8007b8e:	4249      	negs	r1, r1
 8007b90:	4099      	lsls	r1, r3
 8007b92:	400a      	ands	r2, r1
 8007b94:	0017      	movs	r7, r2
 8007b96:	e6de      	b.n	8007956 <_strtod_l+0x662>
 8007b98:	2201      	movs	r2, #1
 8007b9a:	4252      	negs	r2, r2
 8007b9c:	409a      	lsls	r2, r3
 8007b9e:	4016      	ands	r6, r2
 8007ba0:	e6d9      	b.n	8007956 <_strtod_l+0x662>
 8007ba2:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8007ba4:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8007ba6:	1ad4      	subs	r4, r2, r3
 8007ba8:	e72a      	b.n	8007a00 <_strtod_l+0x70c>
 8007baa:	4927      	ldr	r1, [pc, #156]	; (8007c48 <_strtod_l+0x954>)
 8007bac:	1acb      	subs	r3, r1, r3
 8007bae:	0001      	movs	r1, r0
 8007bb0:	4099      	lsls	r1, r3
 8007bb2:	9112      	str	r1, [sp, #72]	; 0x48
 8007bb4:	9014      	str	r0, [sp, #80]	; 0x50
 8007bb6:	e738      	b.n	8007a2a <_strtod_l+0x736>
 8007bb8:	2300      	movs	r3, #0
 8007bba:	9312      	str	r3, [sp, #72]	; 0x48
 8007bbc:	e7fa      	b.n	8007bb4 <_strtod_l+0x8c0>
 8007bbe:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007bc0:	9922      	ldr	r1, [sp, #136]	; 0x88
 8007bc2:	9805      	ldr	r0, [sp, #20]
 8007bc4:	f000 ffae 	bl	8008b24 <__lshift>
 8007bc8:	9022      	str	r0, [sp, #136]	; 0x88
 8007bca:	2800      	cmp	r0, #0
 8007bcc:	d000      	beq.n	8007bd0 <_strtod_l+0x8dc>
 8007bce:	e75f      	b.n	8007a90 <_strtod_l+0x79c>
 8007bd0:	e5fe      	b.n	80077d0 <_strtod_l+0x4dc>
 8007bd2:	970c      	str	r7, [sp, #48]	; 0x30
 8007bd4:	2800      	cmp	r0, #0
 8007bd6:	d176      	bne.n	8007cc6 <_strtod_l+0x9d2>
 8007bd8:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8007bda:	033b      	lsls	r3, r7, #12
 8007bdc:	0b1b      	lsrs	r3, r3, #12
 8007bde:	2a00      	cmp	r2, #0
 8007be0:	d038      	beq.n	8007c54 <_strtod_l+0x960>
 8007be2:	4a1a      	ldr	r2, [pc, #104]	; (8007c4c <_strtod_l+0x958>)
 8007be4:	4293      	cmp	r3, r2
 8007be6:	d138      	bne.n	8007c5a <_strtod_l+0x966>
 8007be8:	2201      	movs	r2, #1
 8007bea:	9b08      	ldr	r3, [sp, #32]
 8007bec:	4252      	negs	r2, r2
 8007bee:	0031      	movs	r1, r6
 8007bf0:	0010      	movs	r0, r2
 8007bf2:	2b00      	cmp	r3, #0
 8007bf4:	d00b      	beq.n	8007c0e <_strtod_l+0x91a>
 8007bf6:	24d4      	movs	r4, #212	; 0xd4
 8007bf8:	4b11      	ldr	r3, [pc, #68]	; (8007c40 <_strtod_l+0x94c>)
 8007bfa:	0010      	movs	r0, r2
 8007bfc:	403b      	ands	r3, r7
 8007bfe:	04e4      	lsls	r4, r4, #19
 8007c00:	42a3      	cmp	r3, r4
 8007c02:	d804      	bhi.n	8007c0e <_strtod_l+0x91a>
 8007c04:	306c      	adds	r0, #108	; 0x6c
 8007c06:	0d1b      	lsrs	r3, r3, #20
 8007c08:	1ac3      	subs	r3, r0, r3
 8007c0a:	409a      	lsls	r2, r3
 8007c0c:	0010      	movs	r0, r2
 8007c0e:	4281      	cmp	r1, r0
 8007c10:	d123      	bne.n	8007c5a <_strtod_l+0x966>
 8007c12:	4b0f      	ldr	r3, [pc, #60]	; (8007c50 <_strtod_l+0x95c>)
 8007c14:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007c16:	429a      	cmp	r2, r3
 8007c18:	d102      	bne.n	8007c20 <_strtod_l+0x92c>
 8007c1a:	1c4b      	adds	r3, r1, #1
 8007c1c:	d100      	bne.n	8007c20 <_strtod_l+0x92c>
 8007c1e:	e5d7      	b.n	80077d0 <_strtod_l+0x4dc>
 8007c20:	4b07      	ldr	r3, [pc, #28]	; (8007c40 <_strtod_l+0x94c>)
 8007c22:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007c24:	2600      	movs	r6, #0
 8007c26:	401a      	ands	r2, r3
 8007c28:	0013      	movs	r3, r2
 8007c2a:	2280      	movs	r2, #128	; 0x80
 8007c2c:	0352      	lsls	r2, r2, #13
 8007c2e:	189f      	adds	r7, r3, r2
 8007c30:	9b08      	ldr	r3, [sp, #32]
 8007c32:	2b00      	cmp	r3, #0
 8007c34:	d196      	bne.n	8007b64 <_strtod_l+0x870>
 8007c36:	e5d4      	b.n	80077e2 <_strtod_l+0x4ee>
 8007c38:	0800a578 	.word	0x0800a578
 8007c3c:	fffffc02 	.word	0xfffffc02
 8007c40:	7ff00000 	.word	0x7ff00000
 8007c44:	39500000 	.word	0x39500000
 8007c48:	fffffbe2 	.word	0xfffffbe2
 8007c4c:	000fffff 	.word	0x000fffff
 8007c50:	7fefffff 	.word	0x7fefffff
 8007c54:	4333      	orrs	r3, r6
 8007c56:	d100      	bne.n	8007c5a <_strtod_l+0x966>
 8007c58:	e772      	b.n	8007b40 <_strtod_l+0x84c>
 8007c5a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007c5c:	2b00      	cmp	r3, #0
 8007c5e:	d01d      	beq.n	8007c9c <_strtod_l+0x9a8>
 8007c60:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007c62:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8007c64:	4213      	tst	r3, r2
 8007c66:	d0e3      	beq.n	8007c30 <_strtod_l+0x93c>
 8007c68:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007c6a:	0030      	movs	r0, r6
 8007c6c:	0039      	movs	r1, r7
 8007c6e:	9a08      	ldr	r2, [sp, #32]
 8007c70:	2b00      	cmp	r3, #0
 8007c72:	d017      	beq.n	8007ca4 <_strtod_l+0x9b0>
 8007c74:	f7ff fb26 	bl	80072c4 <sulp>
 8007c78:	0002      	movs	r2, r0
 8007c7a:	000b      	movs	r3, r1
 8007c7c:	980e      	ldr	r0, [sp, #56]	; 0x38
 8007c7e:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8007c80:	f7f9 f9a8 	bl	8000fd4 <__aeabi_dadd>
 8007c84:	0006      	movs	r6, r0
 8007c86:	000f      	movs	r7, r1
 8007c88:	e7d2      	b.n	8007c30 <_strtod_l+0x93c>
 8007c8a:	2601      	movs	r6, #1
 8007c8c:	4013      	ands	r3, r2
 8007c8e:	4a9b      	ldr	r2, [pc, #620]	; (8007efc <_strtod_l+0xc08>)
 8007c90:	4276      	negs	r6, r6
 8007c92:	189b      	adds	r3, r3, r2
 8007c94:	4a9a      	ldr	r2, [pc, #616]	; (8007f00 <_strtod_l+0xc0c>)
 8007c96:	431a      	orrs	r2, r3
 8007c98:	0017      	movs	r7, r2
 8007c9a:	e7c9      	b.n	8007c30 <_strtod_l+0x93c>
 8007c9c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8007c9e:	4233      	tst	r3, r6
 8007ca0:	d0c6      	beq.n	8007c30 <_strtod_l+0x93c>
 8007ca2:	e7e1      	b.n	8007c68 <_strtod_l+0x974>
 8007ca4:	f7ff fb0e 	bl	80072c4 <sulp>
 8007ca8:	0002      	movs	r2, r0
 8007caa:	000b      	movs	r3, r1
 8007cac:	980e      	ldr	r0, [sp, #56]	; 0x38
 8007cae:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8007cb0:	f7fa fb6c 	bl	800238c <__aeabi_dsub>
 8007cb4:	2200      	movs	r2, #0
 8007cb6:	2300      	movs	r3, #0
 8007cb8:	0006      	movs	r6, r0
 8007cba:	000f      	movs	r7, r1
 8007cbc:	f7f8 fbc6 	bl	800044c <__aeabi_dcmpeq>
 8007cc0:	2800      	cmp	r0, #0
 8007cc2:	d0b5      	beq.n	8007c30 <_strtod_l+0x93c>
 8007cc4:	e5f5      	b.n	80078b2 <_strtod_l+0x5be>
 8007cc6:	9907      	ldr	r1, [sp, #28]
 8007cc8:	9806      	ldr	r0, [sp, #24]
 8007cca:	f001 f927 	bl	8008f1c <__ratio>
 8007cce:	2380      	movs	r3, #128	; 0x80
 8007cd0:	2200      	movs	r2, #0
 8007cd2:	05db      	lsls	r3, r3, #23
 8007cd4:	0004      	movs	r4, r0
 8007cd6:	000d      	movs	r5, r1
 8007cd8:	f7f8 fbc8 	bl	800046c <__aeabi_dcmple>
 8007cdc:	2800      	cmp	r0, #0
 8007cde:	d079      	beq.n	8007dd4 <_strtod_l+0xae0>
 8007ce0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007ce2:	2b00      	cmp	r3, #0
 8007ce4:	d04b      	beq.n	8007d7e <_strtod_l+0xa8a>
 8007ce6:	2300      	movs	r3, #0
 8007ce8:	4c86      	ldr	r4, [pc, #536]	; (8007f04 <_strtod_l+0xc10>)
 8007cea:	2500      	movs	r5, #0
 8007cec:	9312      	str	r3, [sp, #72]	; 0x48
 8007cee:	9413      	str	r4, [sp, #76]	; 0x4c
 8007cf0:	4c84      	ldr	r4, [pc, #528]	; (8007f04 <_strtod_l+0xc10>)
 8007cf2:	4a85      	ldr	r2, [pc, #532]	; (8007f08 <_strtod_l+0xc14>)
 8007cf4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007cf6:	4013      	ands	r3, r2
 8007cf8:	9314      	str	r3, [sp, #80]	; 0x50
 8007cfa:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8007cfc:	4b83      	ldr	r3, [pc, #524]	; (8007f0c <_strtod_l+0xc18>)
 8007cfe:	429a      	cmp	r2, r3
 8007d00:	d000      	beq.n	8007d04 <_strtod_l+0xa10>
 8007d02:	e0b0      	b.n	8007e66 <_strtod_l+0xb72>
 8007d04:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007d06:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007d08:	921a      	str	r2, [sp, #104]	; 0x68
 8007d0a:	931b      	str	r3, [sp, #108]	; 0x6c
 8007d0c:	4a80      	ldr	r2, [pc, #512]	; (8007f10 <_strtod_l+0xc1c>)
 8007d0e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007d10:	4694      	mov	ip, r2
 8007d12:	4463      	add	r3, ip
 8007d14:	001f      	movs	r7, r3
 8007d16:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8007d18:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8007d1a:	0030      	movs	r0, r6
 8007d1c:	0039      	movs	r1, r7
 8007d1e:	920c      	str	r2, [sp, #48]	; 0x30
 8007d20:	930d      	str	r3, [sp, #52]	; 0x34
 8007d22:	f001 f823 	bl	8008d6c <__ulp>
 8007d26:	0002      	movs	r2, r0
 8007d28:	000b      	movs	r3, r1
 8007d2a:	980c      	ldr	r0, [sp, #48]	; 0x30
 8007d2c:	990d      	ldr	r1, [sp, #52]	; 0x34
 8007d2e:	f7fa f8c1 	bl	8001eb4 <__aeabi_dmul>
 8007d32:	0032      	movs	r2, r6
 8007d34:	003b      	movs	r3, r7
 8007d36:	f7f9 f94d 	bl	8000fd4 <__aeabi_dadd>
 8007d3a:	4a73      	ldr	r2, [pc, #460]	; (8007f08 <_strtod_l+0xc14>)
 8007d3c:	4b75      	ldr	r3, [pc, #468]	; (8007f14 <_strtod_l+0xc20>)
 8007d3e:	0006      	movs	r6, r0
 8007d40:	400a      	ands	r2, r1
 8007d42:	429a      	cmp	r2, r3
 8007d44:	d95e      	bls.n	8007e04 <_strtod_l+0xb10>
 8007d46:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007d48:	4a73      	ldr	r2, [pc, #460]	; (8007f18 <_strtod_l+0xc24>)
 8007d4a:	4293      	cmp	r3, r2
 8007d4c:	d103      	bne.n	8007d56 <_strtod_l+0xa62>
 8007d4e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007d50:	3301      	adds	r3, #1
 8007d52:	d100      	bne.n	8007d56 <_strtod_l+0xa62>
 8007d54:	e53c      	b.n	80077d0 <_strtod_l+0x4dc>
 8007d56:	2601      	movs	r6, #1
 8007d58:	4f6f      	ldr	r7, [pc, #444]	; (8007f18 <_strtod_l+0xc24>)
 8007d5a:	4276      	negs	r6, r6
 8007d5c:	9922      	ldr	r1, [sp, #136]	; 0x88
 8007d5e:	9805      	ldr	r0, [sp, #20]
 8007d60:	f000 fcc2 	bl	80086e8 <_Bfree>
 8007d64:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007d66:	9805      	ldr	r0, [sp, #20]
 8007d68:	f000 fcbe 	bl	80086e8 <_Bfree>
 8007d6c:	9907      	ldr	r1, [sp, #28]
 8007d6e:	9805      	ldr	r0, [sp, #20]
 8007d70:	f000 fcba 	bl	80086e8 <_Bfree>
 8007d74:	9906      	ldr	r1, [sp, #24]
 8007d76:	9805      	ldr	r0, [sp, #20]
 8007d78:	f000 fcb6 	bl	80086e8 <_Bfree>
 8007d7c:	e60f      	b.n	800799e <_strtod_l+0x6aa>
 8007d7e:	2e00      	cmp	r6, #0
 8007d80:	d11c      	bne.n	8007dbc <_strtod_l+0xac8>
 8007d82:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007d84:	031b      	lsls	r3, r3, #12
 8007d86:	d11f      	bne.n	8007dc8 <_strtod_l+0xad4>
 8007d88:	2200      	movs	r2, #0
 8007d8a:	0020      	movs	r0, r4
 8007d8c:	0029      	movs	r1, r5
 8007d8e:	4b5d      	ldr	r3, [pc, #372]	; (8007f04 <_strtod_l+0xc10>)
 8007d90:	f7f8 fb62 	bl	8000458 <__aeabi_dcmplt>
 8007d94:	2800      	cmp	r0, #0
 8007d96:	d11a      	bne.n	8007dce <_strtod_l+0xada>
 8007d98:	0020      	movs	r0, r4
 8007d9a:	0029      	movs	r1, r5
 8007d9c:	2200      	movs	r2, #0
 8007d9e:	4b5f      	ldr	r3, [pc, #380]	; (8007f1c <_strtod_l+0xc28>)
 8007da0:	f7fa f888 	bl	8001eb4 <__aeabi_dmul>
 8007da4:	0005      	movs	r5, r0
 8007da6:	000c      	movs	r4, r1
 8007da8:	2380      	movs	r3, #128	; 0x80
 8007daa:	061b      	lsls	r3, r3, #24
 8007dac:	18e3      	adds	r3, r4, r3
 8007dae:	951e      	str	r5, [sp, #120]	; 0x78
 8007db0:	931f      	str	r3, [sp, #124]	; 0x7c
 8007db2:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8007db4:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8007db6:	9212      	str	r2, [sp, #72]	; 0x48
 8007db8:	9313      	str	r3, [sp, #76]	; 0x4c
 8007dba:	e79a      	b.n	8007cf2 <_strtod_l+0x9fe>
 8007dbc:	2e01      	cmp	r6, #1
 8007dbe:	d103      	bne.n	8007dc8 <_strtod_l+0xad4>
 8007dc0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007dc2:	2b00      	cmp	r3, #0
 8007dc4:	d100      	bne.n	8007dc8 <_strtod_l+0xad4>
 8007dc6:	e574      	b.n	80078b2 <_strtod_l+0x5be>
 8007dc8:	2300      	movs	r3, #0
 8007dca:	4c55      	ldr	r4, [pc, #340]	; (8007f20 <_strtod_l+0xc2c>)
 8007dcc:	e78d      	b.n	8007cea <_strtod_l+0x9f6>
 8007dce:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8007dd0:	4c52      	ldr	r4, [pc, #328]	; (8007f1c <_strtod_l+0xc28>)
 8007dd2:	e7e9      	b.n	8007da8 <_strtod_l+0xab4>
 8007dd4:	2200      	movs	r2, #0
 8007dd6:	0020      	movs	r0, r4
 8007dd8:	0029      	movs	r1, r5
 8007dda:	4b50      	ldr	r3, [pc, #320]	; (8007f1c <_strtod_l+0xc28>)
 8007ddc:	f7fa f86a 	bl	8001eb4 <__aeabi_dmul>
 8007de0:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8007de2:	0005      	movs	r5, r0
 8007de4:	000b      	movs	r3, r1
 8007de6:	000c      	movs	r4, r1
 8007de8:	2a00      	cmp	r2, #0
 8007dea:	d107      	bne.n	8007dfc <_strtod_l+0xb08>
 8007dec:	2280      	movs	r2, #128	; 0x80
 8007dee:	0612      	lsls	r2, r2, #24
 8007df0:	188b      	adds	r3, r1, r2
 8007df2:	9016      	str	r0, [sp, #88]	; 0x58
 8007df4:	9317      	str	r3, [sp, #92]	; 0x5c
 8007df6:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8007df8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007dfa:	e7dc      	b.n	8007db6 <_strtod_l+0xac2>
 8007dfc:	0002      	movs	r2, r0
 8007dfe:	9216      	str	r2, [sp, #88]	; 0x58
 8007e00:	9317      	str	r3, [sp, #92]	; 0x5c
 8007e02:	e7f8      	b.n	8007df6 <_strtod_l+0xb02>
 8007e04:	23d4      	movs	r3, #212	; 0xd4
 8007e06:	049b      	lsls	r3, r3, #18
 8007e08:	18cf      	adds	r7, r1, r3
 8007e0a:	9b08      	ldr	r3, [sp, #32]
 8007e0c:	2b00      	cmp	r3, #0
 8007e0e:	d1a5      	bne.n	8007d5c <_strtod_l+0xa68>
 8007e10:	4b3d      	ldr	r3, [pc, #244]	; (8007f08 <_strtod_l+0xc14>)
 8007e12:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8007e14:	403b      	ands	r3, r7
 8007e16:	429a      	cmp	r2, r3
 8007e18:	d1a0      	bne.n	8007d5c <_strtod_l+0xa68>
 8007e1a:	0028      	movs	r0, r5
 8007e1c:	0021      	movs	r1, r4
 8007e1e:	f7f8 fbfb 	bl	8000618 <__aeabi_d2lz>
 8007e22:	f7f8 fc35 	bl	8000690 <__aeabi_l2d>
 8007e26:	0002      	movs	r2, r0
 8007e28:	000b      	movs	r3, r1
 8007e2a:	0028      	movs	r0, r5
 8007e2c:	0021      	movs	r1, r4
 8007e2e:	f7fa faad 	bl	800238c <__aeabi_dsub>
 8007e32:	033b      	lsls	r3, r7, #12
 8007e34:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8007e36:	0b1b      	lsrs	r3, r3, #12
 8007e38:	4333      	orrs	r3, r6
 8007e3a:	4313      	orrs	r3, r2
 8007e3c:	0004      	movs	r4, r0
 8007e3e:	000d      	movs	r5, r1
 8007e40:	4a38      	ldr	r2, [pc, #224]	; (8007f24 <_strtod_l+0xc30>)
 8007e42:	2b00      	cmp	r3, #0
 8007e44:	d055      	beq.n	8007ef2 <_strtod_l+0xbfe>
 8007e46:	4b38      	ldr	r3, [pc, #224]	; (8007f28 <_strtod_l+0xc34>)
 8007e48:	f7f8 fb06 	bl	8000458 <__aeabi_dcmplt>
 8007e4c:	2800      	cmp	r0, #0
 8007e4e:	d000      	beq.n	8007e52 <_strtod_l+0xb5e>
 8007e50:	e4c7      	b.n	80077e2 <_strtod_l+0x4ee>
 8007e52:	0020      	movs	r0, r4
 8007e54:	0029      	movs	r1, r5
 8007e56:	4a35      	ldr	r2, [pc, #212]	; (8007f2c <_strtod_l+0xc38>)
 8007e58:	4b30      	ldr	r3, [pc, #192]	; (8007f1c <_strtod_l+0xc28>)
 8007e5a:	f7f8 fb11 	bl	8000480 <__aeabi_dcmpgt>
 8007e5e:	2800      	cmp	r0, #0
 8007e60:	d100      	bne.n	8007e64 <_strtod_l+0xb70>
 8007e62:	e77b      	b.n	8007d5c <_strtod_l+0xa68>
 8007e64:	e4bd      	b.n	80077e2 <_strtod_l+0x4ee>
 8007e66:	9b08      	ldr	r3, [sp, #32]
 8007e68:	2b00      	cmp	r3, #0
 8007e6a:	d02b      	beq.n	8007ec4 <_strtod_l+0xbd0>
 8007e6c:	23d4      	movs	r3, #212	; 0xd4
 8007e6e:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8007e70:	04db      	lsls	r3, r3, #19
 8007e72:	429a      	cmp	r2, r3
 8007e74:	d826      	bhi.n	8007ec4 <_strtod_l+0xbd0>
 8007e76:	0028      	movs	r0, r5
 8007e78:	0021      	movs	r1, r4
 8007e7a:	4a2d      	ldr	r2, [pc, #180]	; (8007f30 <_strtod_l+0xc3c>)
 8007e7c:	4b2d      	ldr	r3, [pc, #180]	; (8007f34 <_strtod_l+0xc40>)
 8007e7e:	f7f8 faf5 	bl	800046c <__aeabi_dcmple>
 8007e82:	2800      	cmp	r0, #0
 8007e84:	d017      	beq.n	8007eb6 <_strtod_l+0xbc2>
 8007e86:	0028      	movs	r0, r5
 8007e88:	0021      	movs	r1, r4
 8007e8a:	f7f8 fba7 	bl	80005dc <__aeabi_d2uiz>
 8007e8e:	2800      	cmp	r0, #0
 8007e90:	d100      	bne.n	8007e94 <_strtod_l+0xba0>
 8007e92:	3001      	adds	r0, #1
 8007e94:	f7fa fe72 	bl	8002b7c <__aeabi_ui2d>
 8007e98:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8007e9a:	0005      	movs	r5, r0
 8007e9c:	000b      	movs	r3, r1
 8007e9e:	000c      	movs	r4, r1
 8007ea0:	2a00      	cmp	r2, #0
 8007ea2:	d122      	bne.n	8007eea <_strtod_l+0xbf6>
 8007ea4:	2280      	movs	r2, #128	; 0x80
 8007ea6:	0612      	lsls	r2, r2, #24
 8007ea8:	188b      	adds	r3, r1, r2
 8007eaa:	9018      	str	r0, [sp, #96]	; 0x60
 8007eac:	9319      	str	r3, [sp, #100]	; 0x64
 8007eae:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8007eb0:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007eb2:	9212      	str	r2, [sp, #72]	; 0x48
 8007eb4:	9313      	str	r3, [sp, #76]	; 0x4c
 8007eb6:	22d6      	movs	r2, #214	; 0xd6
 8007eb8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8007eba:	04d2      	lsls	r2, r2, #19
 8007ebc:	189b      	adds	r3, r3, r2
 8007ebe:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8007ec0:	1a9b      	subs	r3, r3, r2
 8007ec2:	9313      	str	r3, [sp, #76]	; 0x4c
 8007ec4:	980e      	ldr	r0, [sp, #56]	; 0x38
 8007ec6:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8007ec8:	9e12      	ldr	r6, [sp, #72]	; 0x48
 8007eca:	9f13      	ldr	r7, [sp, #76]	; 0x4c
 8007ecc:	f000 ff4e 	bl	8008d6c <__ulp>
 8007ed0:	0002      	movs	r2, r0
 8007ed2:	000b      	movs	r3, r1
 8007ed4:	0030      	movs	r0, r6
 8007ed6:	0039      	movs	r1, r7
 8007ed8:	f7f9 ffec 	bl	8001eb4 <__aeabi_dmul>
 8007edc:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007ede:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007ee0:	f7f9 f878 	bl	8000fd4 <__aeabi_dadd>
 8007ee4:	0006      	movs	r6, r0
 8007ee6:	000f      	movs	r7, r1
 8007ee8:	e78f      	b.n	8007e0a <_strtod_l+0xb16>
 8007eea:	0002      	movs	r2, r0
 8007eec:	9218      	str	r2, [sp, #96]	; 0x60
 8007eee:	9319      	str	r3, [sp, #100]	; 0x64
 8007ef0:	e7dd      	b.n	8007eae <_strtod_l+0xbba>
 8007ef2:	4b11      	ldr	r3, [pc, #68]	; (8007f38 <_strtod_l+0xc44>)
 8007ef4:	f7f8 fab0 	bl	8000458 <__aeabi_dcmplt>
 8007ef8:	e7b1      	b.n	8007e5e <_strtod_l+0xb6a>
 8007efa:	46c0      	nop			; (mov r8, r8)
 8007efc:	fff00000 	.word	0xfff00000
 8007f00:	000fffff 	.word	0x000fffff
 8007f04:	3ff00000 	.word	0x3ff00000
 8007f08:	7ff00000 	.word	0x7ff00000
 8007f0c:	7fe00000 	.word	0x7fe00000
 8007f10:	fcb00000 	.word	0xfcb00000
 8007f14:	7c9fffff 	.word	0x7c9fffff
 8007f18:	7fefffff 	.word	0x7fefffff
 8007f1c:	3fe00000 	.word	0x3fe00000
 8007f20:	bff00000 	.word	0xbff00000
 8007f24:	94a03595 	.word	0x94a03595
 8007f28:	3fdfffff 	.word	0x3fdfffff
 8007f2c:	35afe535 	.word	0x35afe535
 8007f30:	ffc00000 	.word	0xffc00000
 8007f34:	41dfffff 	.word	0x41dfffff
 8007f38:	3fcfffff 	.word	0x3fcfffff

08007f3c <strtod>:
 8007f3c:	b510      	push	{r4, lr}
 8007f3e:	000a      	movs	r2, r1
 8007f40:	0001      	movs	r1, r0
 8007f42:	4803      	ldr	r0, [pc, #12]	; (8007f50 <strtod+0x14>)
 8007f44:	4b03      	ldr	r3, [pc, #12]	; (8007f54 <strtod+0x18>)
 8007f46:	6800      	ldr	r0, [r0, #0]
 8007f48:	f7ff f9d4 	bl	80072f4 <_strtod_l>
 8007f4c:	bd10      	pop	{r4, pc}
 8007f4e:	46c0      	nop			; (mov r8, r8)
 8007f50:	2000000c 	.word	0x2000000c
 8007f54:	20000074 	.word	0x20000074

08007f58 <rshift>:
 8007f58:	0002      	movs	r2, r0
 8007f5a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007f5c:	6907      	ldr	r7, [r0, #16]
 8007f5e:	3214      	adds	r2, #20
 8007f60:	0013      	movs	r3, r2
 8007f62:	b085      	sub	sp, #20
 8007f64:	114e      	asrs	r6, r1, #5
 8007f66:	42b7      	cmp	r7, r6
 8007f68:	dd31      	ble.n	8007fce <rshift+0x76>
 8007f6a:	00b3      	lsls	r3, r6, #2
 8007f6c:	18d3      	adds	r3, r2, r3
 8007f6e:	251f      	movs	r5, #31
 8007f70:	9301      	str	r3, [sp, #4]
 8007f72:	000b      	movs	r3, r1
 8007f74:	00bc      	lsls	r4, r7, #2
 8007f76:	402b      	ands	r3, r5
 8007f78:	1914      	adds	r4, r2, r4
 8007f7a:	9302      	str	r3, [sp, #8]
 8007f7c:	4229      	tst	r1, r5
 8007f7e:	d10c      	bne.n	8007f9a <rshift+0x42>
 8007f80:	0015      	movs	r5, r2
 8007f82:	9901      	ldr	r1, [sp, #4]
 8007f84:	428c      	cmp	r4, r1
 8007f86:	d838      	bhi.n	8007ffa <rshift+0xa2>
 8007f88:	9901      	ldr	r1, [sp, #4]
 8007f8a:	2300      	movs	r3, #0
 8007f8c:	3903      	subs	r1, #3
 8007f8e:	428c      	cmp	r4, r1
 8007f90:	d301      	bcc.n	8007f96 <rshift+0x3e>
 8007f92:	1bbb      	subs	r3, r7, r6
 8007f94:	009b      	lsls	r3, r3, #2
 8007f96:	18d3      	adds	r3, r2, r3
 8007f98:	e019      	b.n	8007fce <rshift+0x76>
 8007f9a:	2120      	movs	r1, #32
 8007f9c:	9b02      	ldr	r3, [sp, #8]
 8007f9e:	9d01      	ldr	r5, [sp, #4]
 8007fa0:	1acb      	subs	r3, r1, r3
 8007fa2:	9303      	str	r3, [sp, #12]
 8007fa4:	cd02      	ldmia	r5!, {r1}
 8007fa6:	9b02      	ldr	r3, [sp, #8]
 8007fa8:	4694      	mov	ip, r2
 8007faa:	40d9      	lsrs	r1, r3
 8007fac:	9100      	str	r1, [sp, #0]
 8007fae:	42ac      	cmp	r4, r5
 8007fb0:	d816      	bhi.n	8007fe0 <rshift+0x88>
 8007fb2:	9d01      	ldr	r5, [sp, #4]
 8007fb4:	2300      	movs	r3, #0
 8007fb6:	3501      	adds	r5, #1
 8007fb8:	42ac      	cmp	r4, r5
 8007fba:	d302      	bcc.n	8007fc2 <rshift+0x6a>
 8007fbc:	1bbb      	subs	r3, r7, r6
 8007fbe:	009b      	lsls	r3, r3, #2
 8007fc0:	3b04      	subs	r3, #4
 8007fc2:	9900      	ldr	r1, [sp, #0]
 8007fc4:	18d3      	adds	r3, r2, r3
 8007fc6:	6019      	str	r1, [r3, #0]
 8007fc8:	2900      	cmp	r1, #0
 8007fca:	d000      	beq.n	8007fce <rshift+0x76>
 8007fcc:	3304      	adds	r3, #4
 8007fce:	1a99      	subs	r1, r3, r2
 8007fd0:	1089      	asrs	r1, r1, #2
 8007fd2:	6101      	str	r1, [r0, #16]
 8007fd4:	4293      	cmp	r3, r2
 8007fd6:	d101      	bne.n	8007fdc <rshift+0x84>
 8007fd8:	2300      	movs	r3, #0
 8007fda:	6143      	str	r3, [r0, #20]
 8007fdc:	b005      	add	sp, #20
 8007fde:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007fe0:	682b      	ldr	r3, [r5, #0]
 8007fe2:	9903      	ldr	r1, [sp, #12]
 8007fe4:	408b      	lsls	r3, r1
 8007fe6:	9900      	ldr	r1, [sp, #0]
 8007fe8:	4319      	orrs	r1, r3
 8007fea:	4663      	mov	r3, ip
 8007fec:	c302      	stmia	r3!, {r1}
 8007fee:	469c      	mov	ip, r3
 8007ff0:	cd02      	ldmia	r5!, {r1}
 8007ff2:	9b02      	ldr	r3, [sp, #8]
 8007ff4:	40d9      	lsrs	r1, r3
 8007ff6:	9100      	str	r1, [sp, #0]
 8007ff8:	e7d9      	b.n	8007fae <rshift+0x56>
 8007ffa:	c908      	ldmia	r1!, {r3}
 8007ffc:	c508      	stmia	r5!, {r3}
 8007ffe:	e7c1      	b.n	8007f84 <rshift+0x2c>

08008000 <__hexdig_fun>:
 8008000:	0002      	movs	r2, r0
 8008002:	3a30      	subs	r2, #48	; 0x30
 8008004:	0003      	movs	r3, r0
 8008006:	2a09      	cmp	r2, #9
 8008008:	d802      	bhi.n	8008010 <__hexdig_fun+0x10>
 800800a:	3b20      	subs	r3, #32
 800800c:	b2d8      	uxtb	r0, r3
 800800e:	4770      	bx	lr
 8008010:	0002      	movs	r2, r0
 8008012:	3a61      	subs	r2, #97	; 0x61
 8008014:	2a05      	cmp	r2, #5
 8008016:	d801      	bhi.n	800801c <__hexdig_fun+0x1c>
 8008018:	3b47      	subs	r3, #71	; 0x47
 800801a:	e7f7      	b.n	800800c <__hexdig_fun+0xc>
 800801c:	001a      	movs	r2, r3
 800801e:	3a41      	subs	r2, #65	; 0x41
 8008020:	2000      	movs	r0, #0
 8008022:	2a05      	cmp	r2, #5
 8008024:	d8f3      	bhi.n	800800e <__hexdig_fun+0xe>
 8008026:	3b27      	subs	r3, #39	; 0x27
 8008028:	e7f0      	b.n	800800c <__hexdig_fun+0xc>
	...

0800802c <__gethex>:
 800802c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800802e:	b08d      	sub	sp, #52	; 0x34
 8008030:	930a      	str	r3, [sp, #40]	; 0x28
 8008032:	4bbd      	ldr	r3, [pc, #756]	; (8008328 <__gethex+0x2fc>)
 8008034:	9005      	str	r0, [sp, #20]
 8008036:	681b      	ldr	r3, [r3, #0]
 8008038:	9109      	str	r1, [sp, #36]	; 0x24
 800803a:	0018      	movs	r0, r3
 800803c:	9202      	str	r2, [sp, #8]
 800803e:	9307      	str	r3, [sp, #28]
 8008040:	f7f8 f862 	bl	8000108 <strlen>
 8008044:	2202      	movs	r2, #2
 8008046:	9b07      	ldr	r3, [sp, #28]
 8008048:	4252      	negs	r2, r2
 800804a:	181b      	adds	r3, r3, r0
 800804c:	3b01      	subs	r3, #1
 800804e:	781b      	ldrb	r3, [r3, #0]
 8008050:	9003      	str	r0, [sp, #12]
 8008052:	930b      	str	r3, [sp, #44]	; 0x2c
 8008054:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008056:	6819      	ldr	r1, [r3, #0]
 8008058:	1c8b      	adds	r3, r1, #2
 800805a:	1a52      	subs	r2, r2, r1
 800805c:	18d1      	adds	r1, r2, r3
 800805e:	9301      	str	r3, [sp, #4]
 8008060:	9108      	str	r1, [sp, #32]
 8008062:	9901      	ldr	r1, [sp, #4]
 8008064:	3301      	adds	r3, #1
 8008066:	7808      	ldrb	r0, [r1, #0]
 8008068:	2830      	cmp	r0, #48	; 0x30
 800806a:	d0f7      	beq.n	800805c <__gethex+0x30>
 800806c:	f7ff ffc8 	bl	8008000 <__hexdig_fun>
 8008070:	1e04      	subs	r4, r0, #0
 8008072:	d13e      	bne.n	80080f2 <__gethex+0xc6>
 8008074:	9a03      	ldr	r2, [sp, #12]
 8008076:	9907      	ldr	r1, [sp, #28]
 8008078:	9801      	ldr	r0, [sp, #4]
 800807a:	f001 fb23 	bl	80096c4 <strncmp>
 800807e:	1e07      	subs	r7, r0, #0
 8008080:	d000      	beq.n	8008084 <__gethex+0x58>
 8008082:	e06f      	b.n	8008164 <__gethex+0x138>
 8008084:	9b01      	ldr	r3, [sp, #4]
 8008086:	9a03      	ldr	r2, [sp, #12]
 8008088:	5c98      	ldrb	r0, [r3, r2]
 800808a:	189d      	adds	r5, r3, r2
 800808c:	f7ff ffb8 	bl	8008000 <__hexdig_fun>
 8008090:	2301      	movs	r3, #1
 8008092:	9304      	str	r3, [sp, #16]
 8008094:	2800      	cmp	r0, #0
 8008096:	d034      	beq.n	8008102 <__gethex+0xd6>
 8008098:	9501      	str	r5, [sp, #4]
 800809a:	9b01      	ldr	r3, [sp, #4]
 800809c:	7818      	ldrb	r0, [r3, #0]
 800809e:	2830      	cmp	r0, #48	; 0x30
 80080a0:	d009      	beq.n	80080b6 <__gethex+0x8a>
 80080a2:	f7ff ffad 	bl	8008000 <__hexdig_fun>
 80080a6:	4243      	negs	r3, r0
 80080a8:	4143      	adcs	r3, r0
 80080aa:	9304      	str	r3, [sp, #16]
 80080ac:	2301      	movs	r3, #1
 80080ae:	002c      	movs	r4, r5
 80080b0:	9308      	str	r3, [sp, #32]
 80080b2:	9d01      	ldr	r5, [sp, #4]
 80080b4:	e004      	b.n	80080c0 <__gethex+0x94>
 80080b6:	9b01      	ldr	r3, [sp, #4]
 80080b8:	3301      	adds	r3, #1
 80080ba:	9301      	str	r3, [sp, #4]
 80080bc:	e7ed      	b.n	800809a <__gethex+0x6e>
 80080be:	3501      	adds	r5, #1
 80080c0:	7828      	ldrb	r0, [r5, #0]
 80080c2:	f7ff ff9d 	bl	8008000 <__hexdig_fun>
 80080c6:	1e07      	subs	r7, r0, #0
 80080c8:	d1f9      	bne.n	80080be <__gethex+0x92>
 80080ca:	0028      	movs	r0, r5
 80080cc:	9a03      	ldr	r2, [sp, #12]
 80080ce:	9907      	ldr	r1, [sp, #28]
 80080d0:	f001 faf8 	bl	80096c4 <strncmp>
 80080d4:	2800      	cmp	r0, #0
 80080d6:	d112      	bne.n	80080fe <__gethex+0xd2>
 80080d8:	2c00      	cmp	r4, #0
 80080da:	d107      	bne.n	80080ec <__gethex+0xc0>
 80080dc:	9b03      	ldr	r3, [sp, #12]
 80080de:	18ed      	adds	r5, r5, r3
 80080e0:	002c      	movs	r4, r5
 80080e2:	7828      	ldrb	r0, [r5, #0]
 80080e4:	f7ff ff8c 	bl	8008000 <__hexdig_fun>
 80080e8:	2800      	cmp	r0, #0
 80080ea:	d106      	bne.n	80080fa <__gethex+0xce>
 80080ec:	1b67      	subs	r7, r4, r5
 80080ee:	00bf      	lsls	r7, r7, #2
 80080f0:	e007      	b.n	8008102 <__gethex+0xd6>
 80080f2:	2300      	movs	r3, #0
 80080f4:	001c      	movs	r4, r3
 80080f6:	9304      	str	r3, [sp, #16]
 80080f8:	e7db      	b.n	80080b2 <__gethex+0x86>
 80080fa:	3501      	adds	r5, #1
 80080fc:	e7f1      	b.n	80080e2 <__gethex+0xb6>
 80080fe:	2c00      	cmp	r4, #0
 8008100:	d1f4      	bne.n	80080ec <__gethex+0xc0>
 8008102:	2220      	movs	r2, #32
 8008104:	782b      	ldrb	r3, [r5, #0]
 8008106:	002e      	movs	r6, r5
 8008108:	4393      	bics	r3, r2
 800810a:	2b50      	cmp	r3, #80	; 0x50
 800810c:	d11d      	bne.n	800814a <__gethex+0x11e>
 800810e:	786b      	ldrb	r3, [r5, #1]
 8008110:	2b2b      	cmp	r3, #43	; 0x2b
 8008112:	d02c      	beq.n	800816e <__gethex+0x142>
 8008114:	2b2d      	cmp	r3, #45	; 0x2d
 8008116:	d02e      	beq.n	8008176 <__gethex+0x14a>
 8008118:	2300      	movs	r3, #0
 800811a:	1c6e      	adds	r6, r5, #1
 800811c:	9306      	str	r3, [sp, #24]
 800811e:	7830      	ldrb	r0, [r6, #0]
 8008120:	f7ff ff6e 	bl	8008000 <__hexdig_fun>
 8008124:	1e43      	subs	r3, r0, #1
 8008126:	b2db      	uxtb	r3, r3
 8008128:	2b18      	cmp	r3, #24
 800812a:	d82b      	bhi.n	8008184 <__gethex+0x158>
 800812c:	3810      	subs	r0, #16
 800812e:	0004      	movs	r4, r0
 8008130:	7870      	ldrb	r0, [r6, #1]
 8008132:	f7ff ff65 	bl	8008000 <__hexdig_fun>
 8008136:	1e43      	subs	r3, r0, #1
 8008138:	b2db      	uxtb	r3, r3
 800813a:	3601      	adds	r6, #1
 800813c:	2b18      	cmp	r3, #24
 800813e:	d91c      	bls.n	800817a <__gethex+0x14e>
 8008140:	9b06      	ldr	r3, [sp, #24]
 8008142:	2b00      	cmp	r3, #0
 8008144:	d000      	beq.n	8008148 <__gethex+0x11c>
 8008146:	4264      	negs	r4, r4
 8008148:	193f      	adds	r7, r7, r4
 800814a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800814c:	601e      	str	r6, [r3, #0]
 800814e:	9b04      	ldr	r3, [sp, #16]
 8008150:	2b00      	cmp	r3, #0
 8008152:	d019      	beq.n	8008188 <__gethex+0x15c>
 8008154:	2600      	movs	r6, #0
 8008156:	9b08      	ldr	r3, [sp, #32]
 8008158:	42b3      	cmp	r3, r6
 800815a:	d100      	bne.n	800815e <__gethex+0x132>
 800815c:	3606      	adds	r6, #6
 800815e:	0030      	movs	r0, r6
 8008160:	b00d      	add	sp, #52	; 0x34
 8008162:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008164:	2301      	movs	r3, #1
 8008166:	0027      	movs	r7, r4
 8008168:	9d01      	ldr	r5, [sp, #4]
 800816a:	9304      	str	r3, [sp, #16]
 800816c:	e7c9      	b.n	8008102 <__gethex+0xd6>
 800816e:	2300      	movs	r3, #0
 8008170:	9306      	str	r3, [sp, #24]
 8008172:	1cae      	adds	r6, r5, #2
 8008174:	e7d3      	b.n	800811e <__gethex+0xf2>
 8008176:	2301      	movs	r3, #1
 8008178:	e7fa      	b.n	8008170 <__gethex+0x144>
 800817a:	230a      	movs	r3, #10
 800817c:	435c      	muls	r4, r3
 800817e:	1824      	adds	r4, r4, r0
 8008180:	3c10      	subs	r4, #16
 8008182:	e7d5      	b.n	8008130 <__gethex+0x104>
 8008184:	002e      	movs	r6, r5
 8008186:	e7e0      	b.n	800814a <__gethex+0x11e>
 8008188:	9b01      	ldr	r3, [sp, #4]
 800818a:	9904      	ldr	r1, [sp, #16]
 800818c:	1aeb      	subs	r3, r5, r3
 800818e:	3b01      	subs	r3, #1
 8008190:	2b07      	cmp	r3, #7
 8008192:	dc0a      	bgt.n	80081aa <__gethex+0x17e>
 8008194:	9805      	ldr	r0, [sp, #20]
 8008196:	f000 fa63 	bl	8008660 <_Balloc>
 800819a:	1e04      	subs	r4, r0, #0
 800819c:	d108      	bne.n	80081b0 <__gethex+0x184>
 800819e:	0002      	movs	r2, r0
 80081a0:	21de      	movs	r1, #222	; 0xde
 80081a2:	4b62      	ldr	r3, [pc, #392]	; (800832c <__gethex+0x300>)
 80081a4:	4862      	ldr	r0, [pc, #392]	; (8008330 <__gethex+0x304>)
 80081a6:	f001 faab 	bl	8009700 <__assert_func>
 80081aa:	3101      	adds	r1, #1
 80081ac:	105b      	asrs	r3, r3, #1
 80081ae:	e7ef      	b.n	8008190 <__gethex+0x164>
 80081b0:	0003      	movs	r3, r0
 80081b2:	3314      	adds	r3, #20
 80081b4:	9304      	str	r3, [sp, #16]
 80081b6:	9309      	str	r3, [sp, #36]	; 0x24
 80081b8:	2300      	movs	r3, #0
 80081ba:	001e      	movs	r6, r3
 80081bc:	9306      	str	r3, [sp, #24]
 80081be:	9b01      	ldr	r3, [sp, #4]
 80081c0:	42ab      	cmp	r3, r5
 80081c2:	d340      	bcc.n	8008246 <__gethex+0x21a>
 80081c4:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80081c6:	9b04      	ldr	r3, [sp, #16]
 80081c8:	c540      	stmia	r5!, {r6}
 80081ca:	1aed      	subs	r5, r5, r3
 80081cc:	10ad      	asrs	r5, r5, #2
 80081ce:	0030      	movs	r0, r6
 80081d0:	6125      	str	r5, [r4, #16]
 80081d2:	f000 fb3d 	bl	8008850 <__hi0bits>
 80081d6:	9b02      	ldr	r3, [sp, #8]
 80081d8:	016d      	lsls	r5, r5, #5
 80081da:	681b      	ldr	r3, [r3, #0]
 80081dc:	1a2e      	subs	r6, r5, r0
 80081de:	9301      	str	r3, [sp, #4]
 80081e0:	429e      	cmp	r6, r3
 80081e2:	dd5a      	ble.n	800829a <__gethex+0x26e>
 80081e4:	1af6      	subs	r6, r6, r3
 80081e6:	0031      	movs	r1, r6
 80081e8:	0020      	movs	r0, r4
 80081ea:	f000 fee0 	bl	8008fae <__any_on>
 80081ee:	1e05      	subs	r5, r0, #0
 80081f0:	d016      	beq.n	8008220 <__gethex+0x1f4>
 80081f2:	2501      	movs	r5, #1
 80081f4:	211f      	movs	r1, #31
 80081f6:	0028      	movs	r0, r5
 80081f8:	1e73      	subs	r3, r6, #1
 80081fa:	4019      	ands	r1, r3
 80081fc:	4088      	lsls	r0, r1
 80081fe:	0001      	movs	r1, r0
 8008200:	115a      	asrs	r2, r3, #5
 8008202:	9804      	ldr	r0, [sp, #16]
 8008204:	0092      	lsls	r2, r2, #2
 8008206:	5812      	ldr	r2, [r2, r0]
 8008208:	420a      	tst	r2, r1
 800820a:	d009      	beq.n	8008220 <__gethex+0x1f4>
 800820c:	42ab      	cmp	r3, r5
 800820e:	dd06      	ble.n	800821e <__gethex+0x1f2>
 8008210:	0020      	movs	r0, r4
 8008212:	1eb1      	subs	r1, r6, #2
 8008214:	f000 fecb 	bl	8008fae <__any_on>
 8008218:	3502      	adds	r5, #2
 800821a:	2800      	cmp	r0, #0
 800821c:	d100      	bne.n	8008220 <__gethex+0x1f4>
 800821e:	2502      	movs	r5, #2
 8008220:	0031      	movs	r1, r6
 8008222:	0020      	movs	r0, r4
 8008224:	f7ff fe98 	bl	8007f58 <rshift>
 8008228:	19bf      	adds	r7, r7, r6
 800822a:	9b02      	ldr	r3, [sp, #8]
 800822c:	689b      	ldr	r3, [r3, #8]
 800822e:	9303      	str	r3, [sp, #12]
 8008230:	42bb      	cmp	r3, r7
 8008232:	da42      	bge.n	80082ba <__gethex+0x28e>
 8008234:	0021      	movs	r1, r4
 8008236:	9805      	ldr	r0, [sp, #20]
 8008238:	f000 fa56 	bl	80086e8 <_Bfree>
 800823c:	2300      	movs	r3, #0
 800823e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008240:	26a3      	movs	r6, #163	; 0xa3
 8008242:	6013      	str	r3, [r2, #0]
 8008244:	e78b      	b.n	800815e <__gethex+0x132>
 8008246:	1e6b      	subs	r3, r5, #1
 8008248:	9308      	str	r3, [sp, #32]
 800824a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800824c:	781b      	ldrb	r3, [r3, #0]
 800824e:	4293      	cmp	r3, r2
 8008250:	d014      	beq.n	800827c <__gethex+0x250>
 8008252:	9b06      	ldr	r3, [sp, #24]
 8008254:	2b20      	cmp	r3, #32
 8008256:	d104      	bne.n	8008262 <__gethex+0x236>
 8008258:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800825a:	c340      	stmia	r3!, {r6}
 800825c:	2600      	movs	r6, #0
 800825e:	9309      	str	r3, [sp, #36]	; 0x24
 8008260:	9606      	str	r6, [sp, #24]
 8008262:	9b08      	ldr	r3, [sp, #32]
 8008264:	7818      	ldrb	r0, [r3, #0]
 8008266:	f7ff fecb 	bl	8008000 <__hexdig_fun>
 800826a:	230f      	movs	r3, #15
 800826c:	4018      	ands	r0, r3
 800826e:	9b06      	ldr	r3, [sp, #24]
 8008270:	9d08      	ldr	r5, [sp, #32]
 8008272:	4098      	lsls	r0, r3
 8008274:	3304      	adds	r3, #4
 8008276:	4306      	orrs	r6, r0
 8008278:	9306      	str	r3, [sp, #24]
 800827a:	e7a0      	b.n	80081be <__gethex+0x192>
 800827c:	2301      	movs	r3, #1
 800827e:	9a03      	ldr	r2, [sp, #12]
 8008280:	1a9d      	subs	r5, r3, r2
 8008282:	9b08      	ldr	r3, [sp, #32]
 8008284:	195d      	adds	r5, r3, r5
 8008286:	9b01      	ldr	r3, [sp, #4]
 8008288:	429d      	cmp	r5, r3
 800828a:	d3e2      	bcc.n	8008252 <__gethex+0x226>
 800828c:	0028      	movs	r0, r5
 800828e:	9907      	ldr	r1, [sp, #28]
 8008290:	f001 fa18 	bl	80096c4 <strncmp>
 8008294:	2800      	cmp	r0, #0
 8008296:	d1dc      	bne.n	8008252 <__gethex+0x226>
 8008298:	e791      	b.n	80081be <__gethex+0x192>
 800829a:	9b01      	ldr	r3, [sp, #4]
 800829c:	2500      	movs	r5, #0
 800829e:	429e      	cmp	r6, r3
 80082a0:	dac3      	bge.n	800822a <__gethex+0x1fe>
 80082a2:	1b9e      	subs	r6, r3, r6
 80082a4:	0021      	movs	r1, r4
 80082a6:	0032      	movs	r2, r6
 80082a8:	9805      	ldr	r0, [sp, #20]
 80082aa:	f000 fc3b 	bl	8008b24 <__lshift>
 80082ae:	0003      	movs	r3, r0
 80082b0:	3314      	adds	r3, #20
 80082b2:	0004      	movs	r4, r0
 80082b4:	1bbf      	subs	r7, r7, r6
 80082b6:	9304      	str	r3, [sp, #16]
 80082b8:	e7b7      	b.n	800822a <__gethex+0x1fe>
 80082ba:	9b02      	ldr	r3, [sp, #8]
 80082bc:	685e      	ldr	r6, [r3, #4]
 80082be:	42be      	cmp	r6, r7
 80082c0:	dd71      	ble.n	80083a6 <__gethex+0x37a>
 80082c2:	9b01      	ldr	r3, [sp, #4]
 80082c4:	1bf6      	subs	r6, r6, r7
 80082c6:	42b3      	cmp	r3, r6
 80082c8:	dc38      	bgt.n	800833c <__gethex+0x310>
 80082ca:	9b02      	ldr	r3, [sp, #8]
 80082cc:	68db      	ldr	r3, [r3, #12]
 80082ce:	2b02      	cmp	r3, #2
 80082d0:	d026      	beq.n	8008320 <__gethex+0x2f4>
 80082d2:	2b03      	cmp	r3, #3
 80082d4:	d02e      	beq.n	8008334 <__gethex+0x308>
 80082d6:	2b01      	cmp	r3, #1
 80082d8:	d119      	bne.n	800830e <__gethex+0x2e2>
 80082da:	9b01      	ldr	r3, [sp, #4]
 80082dc:	42b3      	cmp	r3, r6
 80082de:	d116      	bne.n	800830e <__gethex+0x2e2>
 80082e0:	2b01      	cmp	r3, #1
 80082e2:	d10d      	bne.n	8008300 <__gethex+0x2d4>
 80082e4:	9b02      	ldr	r3, [sp, #8]
 80082e6:	2662      	movs	r6, #98	; 0x62
 80082e8:	685b      	ldr	r3, [r3, #4]
 80082ea:	9301      	str	r3, [sp, #4]
 80082ec:	9a01      	ldr	r2, [sp, #4]
 80082ee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80082f0:	601a      	str	r2, [r3, #0]
 80082f2:	2301      	movs	r3, #1
 80082f4:	9a04      	ldr	r2, [sp, #16]
 80082f6:	6123      	str	r3, [r4, #16]
 80082f8:	6013      	str	r3, [r2, #0]
 80082fa:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80082fc:	601c      	str	r4, [r3, #0]
 80082fe:	e72e      	b.n	800815e <__gethex+0x132>
 8008300:	9901      	ldr	r1, [sp, #4]
 8008302:	0020      	movs	r0, r4
 8008304:	3901      	subs	r1, #1
 8008306:	f000 fe52 	bl	8008fae <__any_on>
 800830a:	2800      	cmp	r0, #0
 800830c:	d1ea      	bne.n	80082e4 <__gethex+0x2b8>
 800830e:	0021      	movs	r1, r4
 8008310:	9805      	ldr	r0, [sp, #20]
 8008312:	f000 f9e9 	bl	80086e8 <_Bfree>
 8008316:	2300      	movs	r3, #0
 8008318:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800831a:	2650      	movs	r6, #80	; 0x50
 800831c:	6013      	str	r3, [r2, #0]
 800831e:	e71e      	b.n	800815e <__gethex+0x132>
 8008320:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8008322:	2b00      	cmp	r3, #0
 8008324:	d1f3      	bne.n	800830e <__gethex+0x2e2>
 8008326:	e7dd      	b.n	80082e4 <__gethex+0x2b8>
 8008328:	0800a61c 	.word	0x0800a61c
 800832c:	0800a5a0 	.word	0x0800a5a0
 8008330:	0800a5b1 	.word	0x0800a5b1
 8008334:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8008336:	2b00      	cmp	r3, #0
 8008338:	d1d4      	bne.n	80082e4 <__gethex+0x2b8>
 800833a:	e7e8      	b.n	800830e <__gethex+0x2e2>
 800833c:	1e77      	subs	r7, r6, #1
 800833e:	2d00      	cmp	r5, #0
 8008340:	d12f      	bne.n	80083a2 <__gethex+0x376>
 8008342:	2f00      	cmp	r7, #0
 8008344:	d004      	beq.n	8008350 <__gethex+0x324>
 8008346:	0039      	movs	r1, r7
 8008348:	0020      	movs	r0, r4
 800834a:	f000 fe30 	bl	8008fae <__any_on>
 800834e:	0005      	movs	r5, r0
 8008350:	231f      	movs	r3, #31
 8008352:	117a      	asrs	r2, r7, #5
 8008354:	401f      	ands	r7, r3
 8008356:	3b1e      	subs	r3, #30
 8008358:	40bb      	lsls	r3, r7
 800835a:	9904      	ldr	r1, [sp, #16]
 800835c:	0092      	lsls	r2, r2, #2
 800835e:	5852      	ldr	r2, [r2, r1]
 8008360:	421a      	tst	r2, r3
 8008362:	d001      	beq.n	8008368 <__gethex+0x33c>
 8008364:	2302      	movs	r3, #2
 8008366:	431d      	orrs	r5, r3
 8008368:	9b01      	ldr	r3, [sp, #4]
 800836a:	0031      	movs	r1, r6
 800836c:	1b9b      	subs	r3, r3, r6
 800836e:	2602      	movs	r6, #2
 8008370:	0020      	movs	r0, r4
 8008372:	9301      	str	r3, [sp, #4]
 8008374:	f7ff fdf0 	bl	8007f58 <rshift>
 8008378:	9b02      	ldr	r3, [sp, #8]
 800837a:	685f      	ldr	r7, [r3, #4]
 800837c:	2d00      	cmp	r5, #0
 800837e:	d041      	beq.n	8008404 <__gethex+0x3d8>
 8008380:	9b02      	ldr	r3, [sp, #8]
 8008382:	68db      	ldr	r3, [r3, #12]
 8008384:	2b02      	cmp	r3, #2
 8008386:	d010      	beq.n	80083aa <__gethex+0x37e>
 8008388:	2b03      	cmp	r3, #3
 800838a:	d012      	beq.n	80083b2 <__gethex+0x386>
 800838c:	2b01      	cmp	r3, #1
 800838e:	d106      	bne.n	800839e <__gethex+0x372>
 8008390:	07aa      	lsls	r2, r5, #30
 8008392:	d504      	bpl.n	800839e <__gethex+0x372>
 8008394:	9a04      	ldr	r2, [sp, #16]
 8008396:	6810      	ldr	r0, [r2, #0]
 8008398:	4305      	orrs	r5, r0
 800839a:	421d      	tst	r5, r3
 800839c:	d10c      	bne.n	80083b8 <__gethex+0x38c>
 800839e:	2310      	movs	r3, #16
 80083a0:	e02f      	b.n	8008402 <__gethex+0x3d6>
 80083a2:	2501      	movs	r5, #1
 80083a4:	e7d4      	b.n	8008350 <__gethex+0x324>
 80083a6:	2601      	movs	r6, #1
 80083a8:	e7e8      	b.n	800837c <__gethex+0x350>
 80083aa:	2301      	movs	r3, #1
 80083ac:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80083ae:	1a9b      	subs	r3, r3, r2
 80083b0:	9313      	str	r3, [sp, #76]	; 0x4c
 80083b2:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80083b4:	2b00      	cmp	r3, #0
 80083b6:	d0f2      	beq.n	800839e <__gethex+0x372>
 80083b8:	6923      	ldr	r3, [r4, #16]
 80083ba:	2000      	movs	r0, #0
 80083bc:	9303      	str	r3, [sp, #12]
 80083be:	009b      	lsls	r3, r3, #2
 80083c0:	9304      	str	r3, [sp, #16]
 80083c2:	0023      	movs	r3, r4
 80083c4:	9a04      	ldr	r2, [sp, #16]
 80083c6:	3314      	adds	r3, #20
 80083c8:	1899      	adds	r1, r3, r2
 80083ca:	681a      	ldr	r2, [r3, #0]
 80083cc:	1c55      	adds	r5, r2, #1
 80083ce:	d01e      	beq.n	800840e <__gethex+0x3e2>
 80083d0:	3201      	adds	r2, #1
 80083d2:	601a      	str	r2, [r3, #0]
 80083d4:	0023      	movs	r3, r4
 80083d6:	3314      	adds	r3, #20
 80083d8:	2e02      	cmp	r6, #2
 80083da:	d140      	bne.n	800845e <__gethex+0x432>
 80083dc:	9a02      	ldr	r2, [sp, #8]
 80083de:	9901      	ldr	r1, [sp, #4]
 80083e0:	6812      	ldr	r2, [r2, #0]
 80083e2:	3a01      	subs	r2, #1
 80083e4:	428a      	cmp	r2, r1
 80083e6:	d10b      	bne.n	8008400 <__gethex+0x3d4>
 80083e8:	114a      	asrs	r2, r1, #5
 80083ea:	211f      	movs	r1, #31
 80083ec:	9801      	ldr	r0, [sp, #4]
 80083ee:	0092      	lsls	r2, r2, #2
 80083f0:	4001      	ands	r1, r0
 80083f2:	2001      	movs	r0, #1
 80083f4:	0005      	movs	r5, r0
 80083f6:	408d      	lsls	r5, r1
 80083f8:	58d3      	ldr	r3, [r2, r3]
 80083fa:	422b      	tst	r3, r5
 80083fc:	d000      	beq.n	8008400 <__gethex+0x3d4>
 80083fe:	2601      	movs	r6, #1
 8008400:	2320      	movs	r3, #32
 8008402:	431e      	orrs	r6, r3
 8008404:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008406:	601c      	str	r4, [r3, #0]
 8008408:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800840a:	601f      	str	r7, [r3, #0]
 800840c:	e6a7      	b.n	800815e <__gethex+0x132>
 800840e:	c301      	stmia	r3!, {r0}
 8008410:	4299      	cmp	r1, r3
 8008412:	d8da      	bhi.n	80083ca <__gethex+0x39e>
 8008414:	9b03      	ldr	r3, [sp, #12]
 8008416:	68a2      	ldr	r2, [r4, #8]
 8008418:	4293      	cmp	r3, r2
 800841a:	db17      	blt.n	800844c <__gethex+0x420>
 800841c:	6863      	ldr	r3, [r4, #4]
 800841e:	9805      	ldr	r0, [sp, #20]
 8008420:	1c59      	adds	r1, r3, #1
 8008422:	f000 f91d 	bl	8008660 <_Balloc>
 8008426:	1e05      	subs	r5, r0, #0
 8008428:	d103      	bne.n	8008432 <__gethex+0x406>
 800842a:	0002      	movs	r2, r0
 800842c:	2184      	movs	r1, #132	; 0x84
 800842e:	4b1c      	ldr	r3, [pc, #112]	; (80084a0 <__gethex+0x474>)
 8008430:	e6b8      	b.n	80081a4 <__gethex+0x178>
 8008432:	0021      	movs	r1, r4
 8008434:	6923      	ldr	r3, [r4, #16]
 8008436:	310c      	adds	r1, #12
 8008438:	1c9a      	adds	r2, r3, #2
 800843a:	0092      	lsls	r2, r2, #2
 800843c:	300c      	adds	r0, #12
 800843e:	f7fe ff0f 	bl	8007260 <memcpy>
 8008442:	0021      	movs	r1, r4
 8008444:	9805      	ldr	r0, [sp, #20]
 8008446:	f000 f94f 	bl	80086e8 <_Bfree>
 800844a:	002c      	movs	r4, r5
 800844c:	6923      	ldr	r3, [r4, #16]
 800844e:	1c5a      	adds	r2, r3, #1
 8008450:	6122      	str	r2, [r4, #16]
 8008452:	2201      	movs	r2, #1
 8008454:	3304      	adds	r3, #4
 8008456:	009b      	lsls	r3, r3, #2
 8008458:	18e3      	adds	r3, r4, r3
 800845a:	605a      	str	r2, [r3, #4]
 800845c:	e7ba      	b.n	80083d4 <__gethex+0x3a8>
 800845e:	6922      	ldr	r2, [r4, #16]
 8008460:	9903      	ldr	r1, [sp, #12]
 8008462:	428a      	cmp	r2, r1
 8008464:	dd09      	ble.n	800847a <__gethex+0x44e>
 8008466:	2101      	movs	r1, #1
 8008468:	0020      	movs	r0, r4
 800846a:	f7ff fd75 	bl	8007f58 <rshift>
 800846e:	9b02      	ldr	r3, [sp, #8]
 8008470:	3701      	adds	r7, #1
 8008472:	689b      	ldr	r3, [r3, #8]
 8008474:	42bb      	cmp	r3, r7
 8008476:	dac2      	bge.n	80083fe <__gethex+0x3d2>
 8008478:	e6dc      	b.n	8008234 <__gethex+0x208>
 800847a:	221f      	movs	r2, #31
 800847c:	9d01      	ldr	r5, [sp, #4]
 800847e:	9901      	ldr	r1, [sp, #4]
 8008480:	2601      	movs	r6, #1
 8008482:	4015      	ands	r5, r2
 8008484:	4211      	tst	r1, r2
 8008486:	d0bb      	beq.n	8008400 <__gethex+0x3d4>
 8008488:	9a04      	ldr	r2, [sp, #16]
 800848a:	189b      	adds	r3, r3, r2
 800848c:	3b04      	subs	r3, #4
 800848e:	6818      	ldr	r0, [r3, #0]
 8008490:	f000 f9de 	bl	8008850 <__hi0bits>
 8008494:	2320      	movs	r3, #32
 8008496:	1b5d      	subs	r5, r3, r5
 8008498:	42a8      	cmp	r0, r5
 800849a:	dbe4      	blt.n	8008466 <__gethex+0x43a>
 800849c:	e7b0      	b.n	8008400 <__gethex+0x3d4>
 800849e:	46c0      	nop			; (mov r8, r8)
 80084a0:	0800a5a0 	.word	0x0800a5a0

080084a4 <L_shift>:
 80084a4:	2308      	movs	r3, #8
 80084a6:	b570      	push	{r4, r5, r6, lr}
 80084a8:	2520      	movs	r5, #32
 80084aa:	1a9a      	subs	r2, r3, r2
 80084ac:	0092      	lsls	r2, r2, #2
 80084ae:	1aad      	subs	r5, r5, r2
 80084b0:	6843      	ldr	r3, [r0, #4]
 80084b2:	6806      	ldr	r6, [r0, #0]
 80084b4:	001c      	movs	r4, r3
 80084b6:	40ac      	lsls	r4, r5
 80084b8:	40d3      	lsrs	r3, r2
 80084ba:	4334      	orrs	r4, r6
 80084bc:	6004      	str	r4, [r0, #0]
 80084be:	6043      	str	r3, [r0, #4]
 80084c0:	3004      	adds	r0, #4
 80084c2:	4288      	cmp	r0, r1
 80084c4:	d3f4      	bcc.n	80084b0 <L_shift+0xc>
 80084c6:	bd70      	pop	{r4, r5, r6, pc}

080084c8 <__match>:
 80084c8:	b530      	push	{r4, r5, lr}
 80084ca:	6803      	ldr	r3, [r0, #0]
 80084cc:	780c      	ldrb	r4, [r1, #0]
 80084ce:	3301      	adds	r3, #1
 80084d0:	2c00      	cmp	r4, #0
 80084d2:	d102      	bne.n	80084da <__match+0x12>
 80084d4:	6003      	str	r3, [r0, #0]
 80084d6:	2001      	movs	r0, #1
 80084d8:	bd30      	pop	{r4, r5, pc}
 80084da:	781a      	ldrb	r2, [r3, #0]
 80084dc:	0015      	movs	r5, r2
 80084de:	3d41      	subs	r5, #65	; 0x41
 80084e0:	2d19      	cmp	r5, #25
 80084e2:	d800      	bhi.n	80084e6 <__match+0x1e>
 80084e4:	3220      	adds	r2, #32
 80084e6:	3101      	adds	r1, #1
 80084e8:	42a2      	cmp	r2, r4
 80084ea:	d0ef      	beq.n	80084cc <__match+0x4>
 80084ec:	2000      	movs	r0, #0
 80084ee:	e7f3      	b.n	80084d8 <__match+0x10>

080084f0 <__hexnan>:
 80084f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80084f2:	680b      	ldr	r3, [r1, #0]
 80084f4:	b08b      	sub	sp, #44	; 0x2c
 80084f6:	115c      	asrs	r4, r3, #5
 80084f8:	00a4      	lsls	r4, r4, #2
 80084fa:	9201      	str	r2, [sp, #4]
 80084fc:	1912      	adds	r2, r2, r4
 80084fe:	0019      	movs	r1, r3
 8008500:	9202      	str	r2, [sp, #8]
 8008502:	221f      	movs	r2, #31
 8008504:	4011      	ands	r1, r2
 8008506:	9008      	str	r0, [sp, #32]
 8008508:	9106      	str	r1, [sp, #24]
 800850a:	4213      	tst	r3, r2
 800850c:	d002      	beq.n	8008514 <__hexnan+0x24>
 800850e:	9b02      	ldr	r3, [sp, #8]
 8008510:	3304      	adds	r3, #4
 8008512:	9302      	str	r3, [sp, #8]
 8008514:	9b02      	ldr	r3, [sp, #8]
 8008516:	2500      	movs	r5, #0
 8008518:	1f1e      	subs	r6, r3, #4
 800851a:	0037      	movs	r7, r6
 800851c:	0034      	movs	r4, r6
 800851e:	9b08      	ldr	r3, [sp, #32]
 8008520:	6035      	str	r5, [r6, #0]
 8008522:	681b      	ldr	r3, [r3, #0]
 8008524:	9507      	str	r5, [sp, #28]
 8008526:	9305      	str	r3, [sp, #20]
 8008528:	9503      	str	r5, [sp, #12]
 800852a:	9b05      	ldr	r3, [sp, #20]
 800852c:	3301      	adds	r3, #1
 800852e:	9309      	str	r3, [sp, #36]	; 0x24
 8008530:	9b05      	ldr	r3, [sp, #20]
 8008532:	785b      	ldrb	r3, [r3, #1]
 8008534:	9304      	str	r3, [sp, #16]
 8008536:	2b00      	cmp	r3, #0
 8008538:	d028      	beq.n	800858c <__hexnan+0x9c>
 800853a:	9804      	ldr	r0, [sp, #16]
 800853c:	f7ff fd60 	bl	8008000 <__hexdig_fun>
 8008540:	2800      	cmp	r0, #0
 8008542:	d154      	bne.n	80085ee <__hexnan+0xfe>
 8008544:	9b04      	ldr	r3, [sp, #16]
 8008546:	2b20      	cmp	r3, #32
 8008548:	d819      	bhi.n	800857e <__hexnan+0x8e>
 800854a:	9b03      	ldr	r3, [sp, #12]
 800854c:	9a07      	ldr	r2, [sp, #28]
 800854e:	4293      	cmp	r3, r2
 8008550:	dd12      	ble.n	8008578 <__hexnan+0x88>
 8008552:	42bc      	cmp	r4, r7
 8008554:	d206      	bcs.n	8008564 <__hexnan+0x74>
 8008556:	2d07      	cmp	r5, #7
 8008558:	dc04      	bgt.n	8008564 <__hexnan+0x74>
 800855a:	002a      	movs	r2, r5
 800855c:	0039      	movs	r1, r7
 800855e:	0020      	movs	r0, r4
 8008560:	f7ff ffa0 	bl	80084a4 <L_shift>
 8008564:	9b01      	ldr	r3, [sp, #4]
 8008566:	2508      	movs	r5, #8
 8008568:	429c      	cmp	r4, r3
 800856a:	d905      	bls.n	8008578 <__hexnan+0x88>
 800856c:	1f27      	subs	r7, r4, #4
 800856e:	2500      	movs	r5, #0
 8008570:	003c      	movs	r4, r7
 8008572:	9b03      	ldr	r3, [sp, #12]
 8008574:	603d      	str	r5, [r7, #0]
 8008576:	9307      	str	r3, [sp, #28]
 8008578:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800857a:	9305      	str	r3, [sp, #20]
 800857c:	e7d5      	b.n	800852a <__hexnan+0x3a>
 800857e:	9b04      	ldr	r3, [sp, #16]
 8008580:	2b29      	cmp	r3, #41	; 0x29
 8008582:	d158      	bne.n	8008636 <__hexnan+0x146>
 8008584:	9b05      	ldr	r3, [sp, #20]
 8008586:	9a08      	ldr	r2, [sp, #32]
 8008588:	3302      	adds	r3, #2
 800858a:	6013      	str	r3, [r2, #0]
 800858c:	9b03      	ldr	r3, [sp, #12]
 800858e:	2b00      	cmp	r3, #0
 8008590:	d051      	beq.n	8008636 <__hexnan+0x146>
 8008592:	42bc      	cmp	r4, r7
 8008594:	d206      	bcs.n	80085a4 <__hexnan+0xb4>
 8008596:	2d07      	cmp	r5, #7
 8008598:	dc04      	bgt.n	80085a4 <__hexnan+0xb4>
 800859a:	002a      	movs	r2, r5
 800859c:	0039      	movs	r1, r7
 800859e:	0020      	movs	r0, r4
 80085a0:	f7ff ff80 	bl	80084a4 <L_shift>
 80085a4:	9b01      	ldr	r3, [sp, #4]
 80085a6:	429c      	cmp	r4, r3
 80085a8:	d935      	bls.n	8008616 <__hexnan+0x126>
 80085aa:	001a      	movs	r2, r3
 80085ac:	0023      	movs	r3, r4
 80085ae:	cb02      	ldmia	r3!, {r1}
 80085b0:	c202      	stmia	r2!, {r1}
 80085b2:	429e      	cmp	r6, r3
 80085b4:	d2fb      	bcs.n	80085ae <__hexnan+0xbe>
 80085b6:	9b02      	ldr	r3, [sp, #8]
 80085b8:	1c61      	adds	r1, r4, #1
 80085ba:	1eda      	subs	r2, r3, #3
 80085bc:	2304      	movs	r3, #4
 80085be:	4291      	cmp	r1, r2
 80085c0:	d805      	bhi.n	80085ce <__hexnan+0xde>
 80085c2:	9b02      	ldr	r3, [sp, #8]
 80085c4:	3b04      	subs	r3, #4
 80085c6:	1b1c      	subs	r4, r3, r4
 80085c8:	08a4      	lsrs	r4, r4, #2
 80085ca:	3401      	adds	r4, #1
 80085cc:	00a3      	lsls	r3, r4, #2
 80085ce:	9a01      	ldr	r2, [sp, #4]
 80085d0:	18d4      	adds	r4, r2, r3
 80085d2:	2300      	movs	r3, #0
 80085d4:	c408      	stmia	r4!, {r3}
 80085d6:	42a6      	cmp	r6, r4
 80085d8:	d2fc      	bcs.n	80085d4 <__hexnan+0xe4>
 80085da:	6833      	ldr	r3, [r6, #0]
 80085dc:	2b00      	cmp	r3, #0
 80085de:	d104      	bne.n	80085ea <__hexnan+0xfa>
 80085e0:	9b01      	ldr	r3, [sp, #4]
 80085e2:	429e      	cmp	r6, r3
 80085e4:	d125      	bne.n	8008632 <__hexnan+0x142>
 80085e6:	2301      	movs	r3, #1
 80085e8:	6033      	str	r3, [r6, #0]
 80085ea:	2005      	movs	r0, #5
 80085ec:	e024      	b.n	8008638 <__hexnan+0x148>
 80085ee:	9b03      	ldr	r3, [sp, #12]
 80085f0:	3501      	adds	r5, #1
 80085f2:	3301      	adds	r3, #1
 80085f4:	9303      	str	r3, [sp, #12]
 80085f6:	2d08      	cmp	r5, #8
 80085f8:	dd06      	ble.n	8008608 <__hexnan+0x118>
 80085fa:	9b01      	ldr	r3, [sp, #4]
 80085fc:	429c      	cmp	r4, r3
 80085fe:	d9bb      	bls.n	8008578 <__hexnan+0x88>
 8008600:	2300      	movs	r3, #0
 8008602:	2501      	movs	r5, #1
 8008604:	3c04      	subs	r4, #4
 8008606:	6023      	str	r3, [r4, #0]
 8008608:	220f      	movs	r2, #15
 800860a:	6823      	ldr	r3, [r4, #0]
 800860c:	4010      	ands	r0, r2
 800860e:	011b      	lsls	r3, r3, #4
 8008610:	4318      	orrs	r0, r3
 8008612:	6020      	str	r0, [r4, #0]
 8008614:	e7b0      	b.n	8008578 <__hexnan+0x88>
 8008616:	9b06      	ldr	r3, [sp, #24]
 8008618:	2b00      	cmp	r3, #0
 800861a:	d0de      	beq.n	80085da <__hexnan+0xea>
 800861c:	2220      	movs	r2, #32
 800861e:	1ad2      	subs	r2, r2, r3
 8008620:	2301      	movs	r3, #1
 8008622:	425b      	negs	r3, r3
 8008624:	40d3      	lsrs	r3, r2
 8008626:	9c02      	ldr	r4, [sp, #8]
 8008628:	3c04      	subs	r4, #4
 800862a:	6822      	ldr	r2, [r4, #0]
 800862c:	4013      	ands	r3, r2
 800862e:	6023      	str	r3, [r4, #0]
 8008630:	e7d3      	b.n	80085da <__hexnan+0xea>
 8008632:	3e04      	subs	r6, #4
 8008634:	e7d1      	b.n	80085da <__hexnan+0xea>
 8008636:	2004      	movs	r0, #4
 8008638:	b00b      	add	sp, #44	; 0x2c
 800863a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800863c <__ascii_mbtowc>:
 800863c:	b082      	sub	sp, #8
 800863e:	2900      	cmp	r1, #0
 8008640:	d100      	bne.n	8008644 <__ascii_mbtowc+0x8>
 8008642:	a901      	add	r1, sp, #4
 8008644:	1e10      	subs	r0, r2, #0
 8008646:	d006      	beq.n	8008656 <__ascii_mbtowc+0x1a>
 8008648:	2b00      	cmp	r3, #0
 800864a:	d006      	beq.n	800865a <__ascii_mbtowc+0x1e>
 800864c:	7813      	ldrb	r3, [r2, #0]
 800864e:	600b      	str	r3, [r1, #0]
 8008650:	7810      	ldrb	r0, [r2, #0]
 8008652:	1e43      	subs	r3, r0, #1
 8008654:	4198      	sbcs	r0, r3
 8008656:	b002      	add	sp, #8
 8008658:	4770      	bx	lr
 800865a:	2002      	movs	r0, #2
 800865c:	4240      	negs	r0, r0
 800865e:	e7fa      	b.n	8008656 <__ascii_mbtowc+0x1a>

08008660 <_Balloc>:
 8008660:	b570      	push	{r4, r5, r6, lr}
 8008662:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8008664:	0006      	movs	r6, r0
 8008666:	000c      	movs	r4, r1
 8008668:	2d00      	cmp	r5, #0
 800866a:	d10e      	bne.n	800868a <_Balloc+0x2a>
 800866c:	2010      	movs	r0, #16
 800866e:	f001 f875 	bl	800975c <malloc>
 8008672:	1e02      	subs	r2, r0, #0
 8008674:	6270      	str	r0, [r6, #36]	; 0x24
 8008676:	d104      	bne.n	8008682 <_Balloc+0x22>
 8008678:	2166      	movs	r1, #102	; 0x66
 800867a:	4b19      	ldr	r3, [pc, #100]	; (80086e0 <_Balloc+0x80>)
 800867c:	4819      	ldr	r0, [pc, #100]	; (80086e4 <_Balloc+0x84>)
 800867e:	f001 f83f 	bl	8009700 <__assert_func>
 8008682:	6045      	str	r5, [r0, #4]
 8008684:	6085      	str	r5, [r0, #8]
 8008686:	6005      	str	r5, [r0, #0]
 8008688:	60c5      	str	r5, [r0, #12]
 800868a:	6a75      	ldr	r5, [r6, #36]	; 0x24
 800868c:	68eb      	ldr	r3, [r5, #12]
 800868e:	2b00      	cmp	r3, #0
 8008690:	d013      	beq.n	80086ba <_Balloc+0x5a>
 8008692:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8008694:	00a2      	lsls	r2, r4, #2
 8008696:	68db      	ldr	r3, [r3, #12]
 8008698:	189b      	adds	r3, r3, r2
 800869a:	6818      	ldr	r0, [r3, #0]
 800869c:	2800      	cmp	r0, #0
 800869e:	d118      	bne.n	80086d2 <_Balloc+0x72>
 80086a0:	2101      	movs	r1, #1
 80086a2:	000d      	movs	r5, r1
 80086a4:	40a5      	lsls	r5, r4
 80086a6:	1d6a      	adds	r2, r5, #5
 80086a8:	0030      	movs	r0, r6
 80086aa:	0092      	lsls	r2, r2, #2
 80086ac:	f000 fca2 	bl	8008ff4 <_calloc_r>
 80086b0:	2800      	cmp	r0, #0
 80086b2:	d00c      	beq.n	80086ce <_Balloc+0x6e>
 80086b4:	6044      	str	r4, [r0, #4]
 80086b6:	6085      	str	r5, [r0, #8]
 80086b8:	e00d      	b.n	80086d6 <_Balloc+0x76>
 80086ba:	2221      	movs	r2, #33	; 0x21
 80086bc:	2104      	movs	r1, #4
 80086be:	0030      	movs	r0, r6
 80086c0:	f000 fc98 	bl	8008ff4 <_calloc_r>
 80086c4:	6a73      	ldr	r3, [r6, #36]	; 0x24
 80086c6:	60e8      	str	r0, [r5, #12]
 80086c8:	68db      	ldr	r3, [r3, #12]
 80086ca:	2b00      	cmp	r3, #0
 80086cc:	d1e1      	bne.n	8008692 <_Balloc+0x32>
 80086ce:	2000      	movs	r0, #0
 80086d0:	bd70      	pop	{r4, r5, r6, pc}
 80086d2:	6802      	ldr	r2, [r0, #0]
 80086d4:	601a      	str	r2, [r3, #0]
 80086d6:	2300      	movs	r3, #0
 80086d8:	6103      	str	r3, [r0, #16]
 80086da:	60c3      	str	r3, [r0, #12]
 80086dc:	e7f8      	b.n	80086d0 <_Balloc+0x70>
 80086de:	46c0      	nop			; (mov r8, r8)
 80086e0:	0800a630 	.word	0x0800a630
 80086e4:	0800a647 	.word	0x0800a647

080086e8 <_Bfree>:
 80086e8:	b570      	push	{r4, r5, r6, lr}
 80086ea:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80086ec:	0005      	movs	r5, r0
 80086ee:	000c      	movs	r4, r1
 80086f0:	2e00      	cmp	r6, #0
 80086f2:	d10e      	bne.n	8008712 <_Bfree+0x2a>
 80086f4:	2010      	movs	r0, #16
 80086f6:	f001 f831 	bl	800975c <malloc>
 80086fa:	1e02      	subs	r2, r0, #0
 80086fc:	6268      	str	r0, [r5, #36]	; 0x24
 80086fe:	d104      	bne.n	800870a <_Bfree+0x22>
 8008700:	218a      	movs	r1, #138	; 0x8a
 8008702:	4b09      	ldr	r3, [pc, #36]	; (8008728 <_Bfree+0x40>)
 8008704:	4809      	ldr	r0, [pc, #36]	; (800872c <_Bfree+0x44>)
 8008706:	f000 fffb 	bl	8009700 <__assert_func>
 800870a:	6046      	str	r6, [r0, #4]
 800870c:	6086      	str	r6, [r0, #8]
 800870e:	6006      	str	r6, [r0, #0]
 8008710:	60c6      	str	r6, [r0, #12]
 8008712:	2c00      	cmp	r4, #0
 8008714:	d007      	beq.n	8008726 <_Bfree+0x3e>
 8008716:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8008718:	6862      	ldr	r2, [r4, #4]
 800871a:	68db      	ldr	r3, [r3, #12]
 800871c:	0092      	lsls	r2, r2, #2
 800871e:	189b      	adds	r3, r3, r2
 8008720:	681a      	ldr	r2, [r3, #0]
 8008722:	6022      	str	r2, [r4, #0]
 8008724:	601c      	str	r4, [r3, #0]
 8008726:	bd70      	pop	{r4, r5, r6, pc}
 8008728:	0800a630 	.word	0x0800a630
 800872c:	0800a647 	.word	0x0800a647

08008730 <__multadd>:
 8008730:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008732:	000e      	movs	r6, r1
 8008734:	9001      	str	r0, [sp, #4]
 8008736:	000c      	movs	r4, r1
 8008738:	001d      	movs	r5, r3
 800873a:	2000      	movs	r0, #0
 800873c:	690f      	ldr	r7, [r1, #16]
 800873e:	3614      	adds	r6, #20
 8008740:	6833      	ldr	r3, [r6, #0]
 8008742:	3001      	adds	r0, #1
 8008744:	b299      	uxth	r1, r3
 8008746:	4351      	muls	r1, r2
 8008748:	0c1b      	lsrs	r3, r3, #16
 800874a:	4353      	muls	r3, r2
 800874c:	1949      	adds	r1, r1, r5
 800874e:	0c0d      	lsrs	r5, r1, #16
 8008750:	195b      	adds	r3, r3, r5
 8008752:	0c1d      	lsrs	r5, r3, #16
 8008754:	b289      	uxth	r1, r1
 8008756:	041b      	lsls	r3, r3, #16
 8008758:	185b      	adds	r3, r3, r1
 800875a:	c608      	stmia	r6!, {r3}
 800875c:	4287      	cmp	r7, r0
 800875e:	dcef      	bgt.n	8008740 <__multadd+0x10>
 8008760:	2d00      	cmp	r5, #0
 8008762:	d022      	beq.n	80087aa <__multadd+0x7a>
 8008764:	68a3      	ldr	r3, [r4, #8]
 8008766:	42bb      	cmp	r3, r7
 8008768:	dc19      	bgt.n	800879e <__multadd+0x6e>
 800876a:	6863      	ldr	r3, [r4, #4]
 800876c:	9801      	ldr	r0, [sp, #4]
 800876e:	1c59      	adds	r1, r3, #1
 8008770:	f7ff ff76 	bl	8008660 <_Balloc>
 8008774:	1e06      	subs	r6, r0, #0
 8008776:	d105      	bne.n	8008784 <__multadd+0x54>
 8008778:	0002      	movs	r2, r0
 800877a:	21b5      	movs	r1, #181	; 0xb5
 800877c:	4b0c      	ldr	r3, [pc, #48]	; (80087b0 <__multadd+0x80>)
 800877e:	480d      	ldr	r0, [pc, #52]	; (80087b4 <__multadd+0x84>)
 8008780:	f000 ffbe 	bl	8009700 <__assert_func>
 8008784:	0021      	movs	r1, r4
 8008786:	6923      	ldr	r3, [r4, #16]
 8008788:	310c      	adds	r1, #12
 800878a:	1c9a      	adds	r2, r3, #2
 800878c:	0092      	lsls	r2, r2, #2
 800878e:	300c      	adds	r0, #12
 8008790:	f7fe fd66 	bl	8007260 <memcpy>
 8008794:	0021      	movs	r1, r4
 8008796:	9801      	ldr	r0, [sp, #4]
 8008798:	f7ff ffa6 	bl	80086e8 <_Bfree>
 800879c:	0034      	movs	r4, r6
 800879e:	1d3b      	adds	r3, r7, #4
 80087a0:	009b      	lsls	r3, r3, #2
 80087a2:	18e3      	adds	r3, r4, r3
 80087a4:	605d      	str	r5, [r3, #4]
 80087a6:	1c7b      	adds	r3, r7, #1
 80087a8:	6123      	str	r3, [r4, #16]
 80087aa:	0020      	movs	r0, r4
 80087ac:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80087ae:	46c0      	nop			; (mov r8, r8)
 80087b0:	0800a5a0 	.word	0x0800a5a0
 80087b4:	0800a647 	.word	0x0800a647

080087b8 <__s2b>:
 80087b8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80087ba:	0006      	movs	r6, r0
 80087bc:	0018      	movs	r0, r3
 80087be:	000c      	movs	r4, r1
 80087c0:	3008      	adds	r0, #8
 80087c2:	2109      	movs	r1, #9
 80087c4:	9301      	str	r3, [sp, #4]
 80087c6:	0015      	movs	r5, r2
 80087c8:	f7f7 fd44 	bl	8000254 <__divsi3>
 80087cc:	2301      	movs	r3, #1
 80087ce:	2100      	movs	r1, #0
 80087d0:	4283      	cmp	r3, r0
 80087d2:	db0a      	blt.n	80087ea <__s2b+0x32>
 80087d4:	0030      	movs	r0, r6
 80087d6:	f7ff ff43 	bl	8008660 <_Balloc>
 80087da:	1e01      	subs	r1, r0, #0
 80087dc:	d108      	bne.n	80087f0 <__s2b+0x38>
 80087de:	0002      	movs	r2, r0
 80087e0:	4b19      	ldr	r3, [pc, #100]	; (8008848 <__s2b+0x90>)
 80087e2:	481a      	ldr	r0, [pc, #104]	; (800884c <__s2b+0x94>)
 80087e4:	31ce      	adds	r1, #206	; 0xce
 80087e6:	f000 ff8b 	bl	8009700 <__assert_func>
 80087ea:	005b      	lsls	r3, r3, #1
 80087ec:	3101      	adds	r1, #1
 80087ee:	e7ef      	b.n	80087d0 <__s2b+0x18>
 80087f0:	9b08      	ldr	r3, [sp, #32]
 80087f2:	6143      	str	r3, [r0, #20]
 80087f4:	2301      	movs	r3, #1
 80087f6:	6103      	str	r3, [r0, #16]
 80087f8:	2d09      	cmp	r5, #9
 80087fa:	dd18      	ble.n	800882e <__s2b+0x76>
 80087fc:	0023      	movs	r3, r4
 80087fe:	3309      	adds	r3, #9
 8008800:	001f      	movs	r7, r3
 8008802:	9300      	str	r3, [sp, #0]
 8008804:	1964      	adds	r4, r4, r5
 8008806:	783b      	ldrb	r3, [r7, #0]
 8008808:	220a      	movs	r2, #10
 800880a:	0030      	movs	r0, r6
 800880c:	3b30      	subs	r3, #48	; 0x30
 800880e:	f7ff ff8f 	bl	8008730 <__multadd>
 8008812:	3701      	adds	r7, #1
 8008814:	0001      	movs	r1, r0
 8008816:	42a7      	cmp	r7, r4
 8008818:	d1f5      	bne.n	8008806 <__s2b+0x4e>
 800881a:	002c      	movs	r4, r5
 800881c:	9b00      	ldr	r3, [sp, #0]
 800881e:	3c08      	subs	r4, #8
 8008820:	191c      	adds	r4, r3, r4
 8008822:	002f      	movs	r7, r5
 8008824:	9b01      	ldr	r3, [sp, #4]
 8008826:	429f      	cmp	r7, r3
 8008828:	db04      	blt.n	8008834 <__s2b+0x7c>
 800882a:	0008      	movs	r0, r1
 800882c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800882e:	2509      	movs	r5, #9
 8008830:	340a      	adds	r4, #10
 8008832:	e7f6      	b.n	8008822 <__s2b+0x6a>
 8008834:	1b63      	subs	r3, r4, r5
 8008836:	5ddb      	ldrb	r3, [r3, r7]
 8008838:	220a      	movs	r2, #10
 800883a:	0030      	movs	r0, r6
 800883c:	3b30      	subs	r3, #48	; 0x30
 800883e:	f7ff ff77 	bl	8008730 <__multadd>
 8008842:	3701      	adds	r7, #1
 8008844:	0001      	movs	r1, r0
 8008846:	e7ed      	b.n	8008824 <__s2b+0x6c>
 8008848:	0800a5a0 	.word	0x0800a5a0
 800884c:	0800a647 	.word	0x0800a647

08008850 <__hi0bits>:
 8008850:	0003      	movs	r3, r0
 8008852:	0c02      	lsrs	r2, r0, #16
 8008854:	2000      	movs	r0, #0
 8008856:	4282      	cmp	r2, r0
 8008858:	d101      	bne.n	800885e <__hi0bits+0xe>
 800885a:	041b      	lsls	r3, r3, #16
 800885c:	3010      	adds	r0, #16
 800885e:	0e1a      	lsrs	r2, r3, #24
 8008860:	d101      	bne.n	8008866 <__hi0bits+0x16>
 8008862:	3008      	adds	r0, #8
 8008864:	021b      	lsls	r3, r3, #8
 8008866:	0f1a      	lsrs	r2, r3, #28
 8008868:	d101      	bne.n	800886e <__hi0bits+0x1e>
 800886a:	3004      	adds	r0, #4
 800886c:	011b      	lsls	r3, r3, #4
 800886e:	0f9a      	lsrs	r2, r3, #30
 8008870:	d101      	bne.n	8008876 <__hi0bits+0x26>
 8008872:	3002      	adds	r0, #2
 8008874:	009b      	lsls	r3, r3, #2
 8008876:	2b00      	cmp	r3, #0
 8008878:	db03      	blt.n	8008882 <__hi0bits+0x32>
 800887a:	3001      	adds	r0, #1
 800887c:	005b      	lsls	r3, r3, #1
 800887e:	d400      	bmi.n	8008882 <__hi0bits+0x32>
 8008880:	2020      	movs	r0, #32
 8008882:	4770      	bx	lr

08008884 <__lo0bits>:
 8008884:	6803      	ldr	r3, [r0, #0]
 8008886:	0002      	movs	r2, r0
 8008888:	2107      	movs	r1, #7
 800888a:	0018      	movs	r0, r3
 800888c:	4008      	ands	r0, r1
 800888e:	420b      	tst	r3, r1
 8008890:	d00d      	beq.n	80088ae <__lo0bits+0x2a>
 8008892:	3906      	subs	r1, #6
 8008894:	2000      	movs	r0, #0
 8008896:	420b      	tst	r3, r1
 8008898:	d105      	bne.n	80088a6 <__lo0bits+0x22>
 800889a:	3002      	adds	r0, #2
 800889c:	4203      	tst	r3, r0
 800889e:	d003      	beq.n	80088a8 <__lo0bits+0x24>
 80088a0:	40cb      	lsrs	r3, r1
 80088a2:	0008      	movs	r0, r1
 80088a4:	6013      	str	r3, [r2, #0]
 80088a6:	4770      	bx	lr
 80088a8:	089b      	lsrs	r3, r3, #2
 80088aa:	6013      	str	r3, [r2, #0]
 80088ac:	e7fb      	b.n	80088a6 <__lo0bits+0x22>
 80088ae:	b299      	uxth	r1, r3
 80088b0:	2900      	cmp	r1, #0
 80088b2:	d101      	bne.n	80088b8 <__lo0bits+0x34>
 80088b4:	2010      	movs	r0, #16
 80088b6:	0c1b      	lsrs	r3, r3, #16
 80088b8:	b2d9      	uxtb	r1, r3
 80088ba:	2900      	cmp	r1, #0
 80088bc:	d101      	bne.n	80088c2 <__lo0bits+0x3e>
 80088be:	3008      	adds	r0, #8
 80088c0:	0a1b      	lsrs	r3, r3, #8
 80088c2:	0719      	lsls	r1, r3, #28
 80088c4:	d101      	bne.n	80088ca <__lo0bits+0x46>
 80088c6:	3004      	adds	r0, #4
 80088c8:	091b      	lsrs	r3, r3, #4
 80088ca:	0799      	lsls	r1, r3, #30
 80088cc:	d101      	bne.n	80088d2 <__lo0bits+0x4e>
 80088ce:	3002      	adds	r0, #2
 80088d0:	089b      	lsrs	r3, r3, #2
 80088d2:	07d9      	lsls	r1, r3, #31
 80088d4:	d4e9      	bmi.n	80088aa <__lo0bits+0x26>
 80088d6:	3001      	adds	r0, #1
 80088d8:	085b      	lsrs	r3, r3, #1
 80088da:	d1e6      	bne.n	80088aa <__lo0bits+0x26>
 80088dc:	2020      	movs	r0, #32
 80088de:	e7e2      	b.n	80088a6 <__lo0bits+0x22>

080088e0 <__i2b>:
 80088e0:	b510      	push	{r4, lr}
 80088e2:	000c      	movs	r4, r1
 80088e4:	2101      	movs	r1, #1
 80088e6:	f7ff febb 	bl	8008660 <_Balloc>
 80088ea:	2800      	cmp	r0, #0
 80088ec:	d106      	bne.n	80088fc <__i2b+0x1c>
 80088ee:	21a0      	movs	r1, #160	; 0xa0
 80088f0:	0002      	movs	r2, r0
 80088f2:	4b04      	ldr	r3, [pc, #16]	; (8008904 <__i2b+0x24>)
 80088f4:	4804      	ldr	r0, [pc, #16]	; (8008908 <__i2b+0x28>)
 80088f6:	0049      	lsls	r1, r1, #1
 80088f8:	f000 ff02 	bl	8009700 <__assert_func>
 80088fc:	2301      	movs	r3, #1
 80088fe:	6144      	str	r4, [r0, #20]
 8008900:	6103      	str	r3, [r0, #16]
 8008902:	bd10      	pop	{r4, pc}
 8008904:	0800a5a0 	.word	0x0800a5a0
 8008908:	0800a647 	.word	0x0800a647

0800890c <__multiply>:
 800890c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800890e:	690b      	ldr	r3, [r1, #16]
 8008910:	0014      	movs	r4, r2
 8008912:	6912      	ldr	r2, [r2, #16]
 8008914:	000d      	movs	r5, r1
 8008916:	b089      	sub	sp, #36	; 0x24
 8008918:	4293      	cmp	r3, r2
 800891a:	da01      	bge.n	8008920 <__multiply+0x14>
 800891c:	0025      	movs	r5, r4
 800891e:	000c      	movs	r4, r1
 8008920:	692f      	ldr	r7, [r5, #16]
 8008922:	6926      	ldr	r6, [r4, #16]
 8008924:	6869      	ldr	r1, [r5, #4]
 8008926:	19bb      	adds	r3, r7, r6
 8008928:	9302      	str	r3, [sp, #8]
 800892a:	68ab      	ldr	r3, [r5, #8]
 800892c:	19ba      	adds	r2, r7, r6
 800892e:	4293      	cmp	r3, r2
 8008930:	da00      	bge.n	8008934 <__multiply+0x28>
 8008932:	3101      	adds	r1, #1
 8008934:	f7ff fe94 	bl	8008660 <_Balloc>
 8008938:	9001      	str	r0, [sp, #4]
 800893a:	2800      	cmp	r0, #0
 800893c:	d106      	bne.n	800894c <__multiply+0x40>
 800893e:	215e      	movs	r1, #94	; 0x5e
 8008940:	0002      	movs	r2, r0
 8008942:	4b48      	ldr	r3, [pc, #288]	; (8008a64 <__multiply+0x158>)
 8008944:	4848      	ldr	r0, [pc, #288]	; (8008a68 <__multiply+0x15c>)
 8008946:	31ff      	adds	r1, #255	; 0xff
 8008948:	f000 feda 	bl	8009700 <__assert_func>
 800894c:	9b01      	ldr	r3, [sp, #4]
 800894e:	2200      	movs	r2, #0
 8008950:	3314      	adds	r3, #20
 8008952:	469c      	mov	ip, r3
 8008954:	19bb      	adds	r3, r7, r6
 8008956:	009b      	lsls	r3, r3, #2
 8008958:	4463      	add	r3, ip
 800895a:	9303      	str	r3, [sp, #12]
 800895c:	4663      	mov	r3, ip
 800895e:	9903      	ldr	r1, [sp, #12]
 8008960:	428b      	cmp	r3, r1
 8008962:	d32c      	bcc.n	80089be <__multiply+0xb2>
 8008964:	002b      	movs	r3, r5
 8008966:	0022      	movs	r2, r4
 8008968:	3314      	adds	r3, #20
 800896a:	00bf      	lsls	r7, r7, #2
 800896c:	3214      	adds	r2, #20
 800896e:	9306      	str	r3, [sp, #24]
 8008970:	00b6      	lsls	r6, r6, #2
 8008972:	19db      	adds	r3, r3, r7
 8008974:	9304      	str	r3, [sp, #16]
 8008976:	1993      	adds	r3, r2, r6
 8008978:	9307      	str	r3, [sp, #28]
 800897a:	2304      	movs	r3, #4
 800897c:	9305      	str	r3, [sp, #20]
 800897e:	002b      	movs	r3, r5
 8008980:	9904      	ldr	r1, [sp, #16]
 8008982:	3315      	adds	r3, #21
 8008984:	9200      	str	r2, [sp, #0]
 8008986:	4299      	cmp	r1, r3
 8008988:	d305      	bcc.n	8008996 <__multiply+0x8a>
 800898a:	1b4b      	subs	r3, r1, r5
 800898c:	3b15      	subs	r3, #21
 800898e:	089b      	lsrs	r3, r3, #2
 8008990:	3301      	adds	r3, #1
 8008992:	009b      	lsls	r3, r3, #2
 8008994:	9305      	str	r3, [sp, #20]
 8008996:	9b07      	ldr	r3, [sp, #28]
 8008998:	9a00      	ldr	r2, [sp, #0]
 800899a:	429a      	cmp	r2, r3
 800899c:	d311      	bcc.n	80089c2 <__multiply+0xb6>
 800899e:	9b02      	ldr	r3, [sp, #8]
 80089a0:	2b00      	cmp	r3, #0
 80089a2:	dd06      	ble.n	80089b2 <__multiply+0xa6>
 80089a4:	9b03      	ldr	r3, [sp, #12]
 80089a6:	3b04      	subs	r3, #4
 80089a8:	9303      	str	r3, [sp, #12]
 80089aa:	681b      	ldr	r3, [r3, #0]
 80089ac:	9300      	str	r3, [sp, #0]
 80089ae:	2b00      	cmp	r3, #0
 80089b0:	d054      	beq.n	8008a5c <__multiply+0x150>
 80089b2:	9b01      	ldr	r3, [sp, #4]
 80089b4:	9a02      	ldr	r2, [sp, #8]
 80089b6:	0018      	movs	r0, r3
 80089b8:	611a      	str	r2, [r3, #16]
 80089ba:	b009      	add	sp, #36	; 0x24
 80089bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80089be:	c304      	stmia	r3!, {r2}
 80089c0:	e7cd      	b.n	800895e <__multiply+0x52>
 80089c2:	9b00      	ldr	r3, [sp, #0]
 80089c4:	681b      	ldr	r3, [r3, #0]
 80089c6:	b298      	uxth	r0, r3
 80089c8:	2800      	cmp	r0, #0
 80089ca:	d01c      	beq.n	8008a06 <__multiply+0xfa>
 80089cc:	4667      	mov	r7, ip
 80089ce:	2400      	movs	r4, #0
 80089d0:	9e06      	ldr	r6, [sp, #24]
 80089d2:	ce02      	ldmia	r6!, {r1}
 80089d4:	683a      	ldr	r2, [r7, #0]
 80089d6:	b28b      	uxth	r3, r1
 80089d8:	4343      	muls	r3, r0
 80089da:	0c09      	lsrs	r1, r1, #16
 80089dc:	4341      	muls	r1, r0
 80089de:	b292      	uxth	r2, r2
 80089e0:	189b      	adds	r3, r3, r2
 80089e2:	191b      	adds	r3, r3, r4
 80089e4:	000c      	movs	r4, r1
 80089e6:	683a      	ldr	r2, [r7, #0]
 80089e8:	0c11      	lsrs	r1, r2, #16
 80089ea:	1861      	adds	r1, r4, r1
 80089ec:	0c1c      	lsrs	r4, r3, #16
 80089ee:	1909      	adds	r1, r1, r4
 80089f0:	0c0c      	lsrs	r4, r1, #16
 80089f2:	b29b      	uxth	r3, r3
 80089f4:	0409      	lsls	r1, r1, #16
 80089f6:	430b      	orrs	r3, r1
 80089f8:	c708      	stmia	r7!, {r3}
 80089fa:	9b04      	ldr	r3, [sp, #16]
 80089fc:	42b3      	cmp	r3, r6
 80089fe:	d8e8      	bhi.n	80089d2 <__multiply+0xc6>
 8008a00:	4663      	mov	r3, ip
 8008a02:	9a05      	ldr	r2, [sp, #20]
 8008a04:	509c      	str	r4, [r3, r2]
 8008a06:	9b00      	ldr	r3, [sp, #0]
 8008a08:	681b      	ldr	r3, [r3, #0]
 8008a0a:	0c1e      	lsrs	r6, r3, #16
 8008a0c:	d020      	beq.n	8008a50 <__multiply+0x144>
 8008a0e:	4663      	mov	r3, ip
 8008a10:	002c      	movs	r4, r5
 8008a12:	4660      	mov	r0, ip
 8008a14:	2700      	movs	r7, #0
 8008a16:	681b      	ldr	r3, [r3, #0]
 8008a18:	3414      	adds	r4, #20
 8008a1a:	6822      	ldr	r2, [r4, #0]
 8008a1c:	b29b      	uxth	r3, r3
 8008a1e:	b291      	uxth	r1, r2
 8008a20:	4371      	muls	r1, r6
 8008a22:	6802      	ldr	r2, [r0, #0]
 8008a24:	0c12      	lsrs	r2, r2, #16
 8008a26:	1889      	adds	r1, r1, r2
 8008a28:	19cf      	adds	r7, r1, r7
 8008a2a:	0439      	lsls	r1, r7, #16
 8008a2c:	430b      	orrs	r3, r1
 8008a2e:	6003      	str	r3, [r0, #0]
 8008a30:	cc02      	ldmia	r4!, {r1}
 8008a32:	6843      	ldr	r3, [r0, #4]
 8008a34:	0c09      	lsrs	r1, r1, #16
 8008a36:	4371      	muls	r1, r6
 8008a38:	b29b      	uxth	r3, r3
 8008a3a:	0c3f      	lsrs	r7, r7, #16
 8008a3c:	18cb      	adds	r3, r1, r3
 8008a3e:	9a04      	ldr	r2, [sp, #16]
 8008a40:	19db      	adds	r3, r3, r7
 8008a42:	0c1f      	lsrs	r7, r3, #16
 8008a44:	3004      	adds	r0, #4
 8008a46:	42a2      	cmp	r2, r4
 8008a48:	d8e7      	bhi.n	8008a1a <__multiply+0x10e>
 8008a4a:	4662      	mov	r2, ip
 8008a4c:	9905      	ldr	r1, [sp, #20]
 8008a4e:	5053      	str	r3, [r2, r1]
 8008a50:	9b00      	ldr	r3, [sp, #0]
 8008a52:	3304      	adds	r3, #4
 8008a54:	9300      	str	r3, [sp, #0]
 8008a56:	2304      	movs	r3, #4
 8008a58:	449c      	add	ip, r3
 8008a5a:	e79c      	b.n	8008996 <__multiply+0x8a>
 8008a5c:	9b02      	ldr	r3, [sp, #8]
 8008a5e:	3b01      	subs	r3, #1
 8008a60:	9302      	str	r3, [sp, #8]
 8008a62:	e79c      	b.n	800899e <__multiply+0x92>
 8008a64:	0800a5a0 	.word	0x0800a5a0
 8008a68:	0800a647 	.word	0x0800a647

08008a6c <__pow5mult>:
 8008a6c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008a6e:	2303      	movs	r3, #3
 8008a70:	0015      	movs	r5, r2
 8008a72:	0007      	movs	r7, r0
 8008a74:	000e      	movs	r6, r1
 8008a76:	401a      	ands	r2, r3
 8008a78:	421d      	tst	r5, r3
 8008a7a:	d008      	beq.n	8008a8e <__pow5mult+0x22>
 8008a7c:	4925      	ldr	r1, [pc, #148]	; (8008b14 <__pow5mult+0xa8>)
 8008a7e:	3a01      	subs	r2, #1
 8008a80:	0092      	lsls	r2, r2, #2
 8008a82:	5852      	ldr	r2, [r2, r1]
 8008a84:	2300      	movs	r3, #0
 8008a86:	0031      	movs	r1, r6
 8008a88:	f7ff fe52 	bl	8008730 <__multadd>
 8008a8c:	0006      	movs	r6, r0
 8008a8e:	10ad      	asrs	r5, r5, #2
 8008a90:	d03d      	beq.n	8008b0e <__pow5mult+0xa2>
 8008a92:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 8008a94:	2c00      	cmp	r4, #0
 8008a96:	d10f      	bne.n	8008ab8 <__pow5mult+0x4c>
 8008a98:	2010      	movs	r0, #16
 8008a9a:	f000 fe5f 	bl	800975c <malloc>
 8008a9e:	1e02      	subs	r2, r0, #0
 8008aa0:	6278      	str	r0, [r7, #36]	; 0x24
 8008aa2:	d105      	bne.n	8008ab0 <__pow5mult+0x44>
 8008aa4:	21d7      	movs	r1, #215	; 0xd7
 8008aa6:	4b1c      	ldr	r3, [pc, #112]	; (8008b18 <__pow5mult+0xac>)
 8008aa8:	481c      	ldr	r0, [pc, #112]	; (8008b1c <__pow5mult+0xb0>)
 8008aaa:	0049      	lsls	r1, r1, #1
 8008aac:	f000 fe28 	bl	8009700 <__assert_func>
 8008ab0:	6044      	str	r4, [r0, #4]
 8008ab2:	6084      	str	r4, [r0, #8]
 8008ab4:	6004      	str	r4, [r0, #0]
 8008ab6:	60c4      	str	r4, [r0, #12]
 8008ab8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008aba:	689c      	ldr	r4, [r3, #8]
 8008abc:	9301      	str	r3, [sp, #4]
 8008abe:	2c00      	cmp	r4, #0
 8008ac0:	d108      	bne.n	8008ad4 <__pow5mult+0x68>
 8008ac2:	0038      	movs	r0, r7
 8008ac4:	4916      	ldr	r1, [pc, #88]	; (8008b20 <__pow5mult+0xb4>)
 8008ac6:	f7ff ff0b 	bl	80088e0 <__i2b>
 8008aca:	9b01      	ldr	r3, [sp, #4]
 8008acc:	0004      	movs	r4, r0
 8008ace:	6098      	str	r0, [r3, #8]
 8008ad0:	2300      	movs	r3, #0
 8008ad2:	6003      	str	r3, [r0, #0]
 8008ad4:	2301      	movs	r3, #1
 8008ad6:	421d      	tst	r5, r3
 8008ad8:	d00a      	beq.n	8008af0 <__pow5mult+0x84>
 8008ada:	0031      	movs	r1, r6
 8008adc:	0022      	movs	r2, r4
 8008ade:	0038      	movs	r0, r7
 8008ae0:	f7ff ff14 	bl	800890c <__multiply>
 8008ae4:	0031      	movs	r1, r6
 8008ae6:	9001      	str	r0, [sp, #4]
 8008ae8:	0038      	movs	r0, r7
 8008aea:	f7ff fdfd 	bl	80086e8 <_Bfree>
 8008aee:	9e01      	ldr	r6, [sp, #4]
 8008af0:	106d      	asrs	r5, r5, #1
 8008af2:	d00c      	beq.n	8008b0e <__pow5mult+0xa2>
 8008af4:	6820      	ldr	r0, [r4, #0]
 8008af6:	2800      	cmp	r0, #0
 8008af8:	d107      	bne.n	8008b0a <__pow5mult+0x9e>
 8008afa:	0022      	movs	r2, r4
 8008afc:	0021      	movs	r1, r4
 8008afe:	0038      	movs	r0, r7
 8008b00:	f7ff ff04 	bl	800890c <__multiply>
 8008b04:	2300      	movs	r3, #0
 8008b06:	6020      	str	r0, [r4, #0]
 8008b08:	6003      	str	r3, [r0, #0]
 8008b0a:	0004      	movs	r4, r0
 8008b0c:	e7e2      	b.n	8008ad4 <__pow5mult+0x68>
 8008b0e:	0030      	movs	r0, r6
 8008b10:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8008b12:	46c0      	nop			; (mov r8, r8)
 8008b14:	0800a798 	.word	0x0800a798
 8008b18:	0800a630 	.word	0x0800a630
 8008b1c:	0800a647 	.word	0x0800a647
 8008b20:	00000271 	.word	0x00000271

08008b24 <__lshift>:
 8008b24:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008b26:	000c      	movs	r4, r1
 8008b28:	0017      	movs	r7, r2
 8008b2a:	6923      	ldr	r3, [r4, #16]
 8008b2c:	1155      	asrs	r5, r2, #5
 8008b2e:	b087      	sub	sp, #28
 8008b30:	18eb      	adds	r3, r5, r3
 8008b32:	9302      	str	r3, [sp, #8]
 8008b34:	3301      	adds	r3, #1
 8008b36:	9301      	str	r3, [sp, #4]
 8008b38:	6849      	ldr	r1, [r1, #4]
 8008b3a:	68a3      	ldr	r3, [r4, #8]
 8008b3c:	9004      	str	r0, [sp, #16]
 8008b3e:	9a01      	ldr	r2, [sp, #4]
 8008b40:	4293      	cmp	r3, r2
 8008b42:	db11      	blt.n	8008b68 <__lshift+0x44>
 8008b44:	9804      	ldr	r0, [sp, #16]
 8008b46:	f7ff fd8b 	bl	8008660 <_Balloc>
 8008b4a:	0002      	movs	r2, r0
 8008b4c:	2300      	movs	r3, #0
 8008b4e:	3214      	adds	r2, #20
 8008b50:	0006      	movs	r6, r0
 8008b52:	0011      	movs	r1, r2
 8008b54:	9203      	str	r2, [sp, #12]
 8008b56:	4298      	cmp	r0, r3
 8008b58:	d10d      	bne.n	8008b76 <__lshift+0x52>
 8008b5a:	21da      	movs	r1, #218	; 0xda
 8008b5c:	0002      	movs	r2, r0
 8008b5e:	4b27      	ldr	r3, [pc, #156]	; (8008bfc <__lshift+0xd8>)
 8008b60:	4827      	ldr	r0, [pc, #156]	; (8008c00 <__lshift+0xdc>)
 8008b62:	31ff      	adds	r1, #255	; 0xff
 8008b64:	f000 fdcc 	bl	8009700 <__assert_func>
 8008b68:	3101      	adds	r1, #1
 8008b6a:	005b      	lsls	r3, r3, #1
 8008b6c:	e7e7      	b.n	8008b3e <__lshift+0x1a>
 8008b6e:	2200      	movs	r2, #0
 8008b70:	0098      	lsls	r0, r3, #2
 8008b72:	500a      	str	r2, [r1, r0]
 8008b74:	3301      	adds	r3, #1
 8008b76:	42ab      	cmp	r3, r5
 8008b78:	dbf9      	blt.n	8008b6e <__lshift+0x4a>
 8008b7a:	43eb      	mvns	r3, r5
 8008b7c:	17db      	asrs	r3, r3, #31
 8008b7e:	401d      	ands	r5, r3
 8008b80:	9b03      	ldr	r3, [sp, #12]
 8008b82:	00ad      	lsls	r5, r5, #2
 8008b84:	211f      	movs	r1, #31
 8008b86:	0038      	movs	r0, r7
 8008b88:	195d      	adds	r5, r3, r5
 8008b8a:	0023      	movs	r3, r4
 8008b8c:	6922      	ldr	r2, [r4, #16]
 8008b8e:	3314      	adds	r3, #20
 8008b90:	0092      	lsls	r2, r2, #2
 8008b92:	4008      	ands	r0, r1
 8008b94:	4684      	mov	ip, r0
 8008b96:	189a      	adds	r2, r3, r2
 8008b98:	420f      	tst	r7, r1
 8008b9a:	d02a      	beq.n	8008bf2 <__lshift+0xce>
 8008b9c:	3101      	adds	r1, #1
 8008b9e:	1a09      	subs	r1, r1, r0
 8008ba0:	9105      	str	r1, [sp, #20]
 8008ba2:	2100      	movs	r1, #0
 8008ba4:	9503      	str	r5, [sp, #12]
 8008ba6:	4667      	mov	r7, ip
 8008ba8:	6818      	ldr	r0, [r3, #0]
 8008baa:	40b8      	lsls	r0, r7
 8008bac:	4301      	orrs	r1, r0
 8008bae:	9803      	ldr	r0, [sp, #12]
 8008bb0:	c002      	stmia	r0!, {r1}
 8008bb2:	cb02      	ldmia	r3!, {r1}
 8008bb4:	9003      	str	r0, [sp, #12]
 8008bb6:	9805      	ldr	r0, [sp, #20]
 8008bb8:	40c1      	lsrs	r1, r0
 8008bba:	429a      	cmp	r2, r3
 8008bbc:	d8f3      	bhi.n	8008ba6 <__lshift+0x82>
 8008bbe:	0020      	movs	r0, r4
 8008bc0:	3015      	adds	r0, #21
 8008bc2:	2304      	movs	r3, #4
 8008bc4:	4282      	cmp	r2, r0
 8008bc6:	d304      	bcc.n	8008bd2 <__lshift+0xae>
 8008bc8:	1b13      	subs	r3, r2, r4
 8008bca:	3b15      	subs	r3, #21
 8008bcc:	089b      	lsrs	r3, r3, #2
 8008bce:	3301      	adds	r3, #1
 8008bd0:	009b      	lsls	r3, r3, #2
 8008bd2:	50e9      	str	r1, [r5, r3]
 8008bd4:	2900      	cmp	r1, #0
 8008bd6:	d002      	beq.n	8008bde <__lshift+0xba>
 8008bd8:	9b02      	ldr	r3, [sp, #8]
 8008bda:	3302      	adds	r3, #2
 8008bdc:	9301      	str	r3, [sp, #4]
 8008bde:	9b01      	ldr	r3, [sp, #4]
 8008be0:	9804      	ldr	r0, [sp, #16]
 8008be2:	3b01      	subs	r3, #1
 8008be4:	0021      	movs	r1, r4
 8008be6:	6133      	str	r3, [r6, #16]
 8008be8:	f7ff fd7e 	bl	80086e8 <_Bfree>
 8008bec:	0030      	movs	r0, r6
 8008bee:	b007      	add	sp, #28
 8008bf0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008bf2:	cb02      	ldmia	r3!, {r1}
 8008bf4:	c502      	stmia	r5!, {r1}
 8008bf6:	429a      	cmp	r2, r3
 8008bf8:	d8fb      	bhi.n	8008bf2 <__lshift+0xce>
 8008bfa:	e7f0      	b.n	8008bde <__lshift+0xba>
 8008bfc:	0800a5a0 	.word	0x0800a5a0
 8008c00:	0800a647 	.word	0x0800a647

08008c04 <__mcmp>:
 8008c04:	6902      	ldr	r2, [r0, #16]
 8008c06:	690b      	ldr	r3, [r1, #16]
 8008c08:	b530      	push	{r4, r5, lr}
 8008c0a:	0004      	movs	r4, r0
 8008c0c:	1ad0      	subs	r0, r2, r3
 8008c0e:	429a      	cmp	r2, r3
 8008c10:	d10d      	bne.n	8008c2e <__mcmp+0x2a>
 8008c12:	009b      	lsls	r3, r3, #2
 8008c14:	3414      	adds	r4, #20
 8008c16:	3114      	adds	r1, #20
 8008c18:	18e2      	adds	r2, r4, r3
 8008c1a:	18c9      	adds	r1, r1, r3
 8008c1c:	3a04      	subs	r2, #4
 8008c1e:	3904      	subs	r1, #4
 8008c20:	6815      	ldr	r5, [r2, #0]
 8008c22:	680b      	ldr	r3, [r1, #0]
 8008c24:	429d      	cmp	r5, r3
 8008c26:	d003      	beq.n	8008c30 <__mcmp+0x2c>
 8008c28:	2001      	movs	r0, #1
 8008c2a:	429d      	cmp	r5, r3
 8008c2c:	d303      	bcc.n	8008c36 <__mcmp+0x32>
 8008c2e:	bd30      	pop	{r4, r5, pc}
 8008c30:	4294      	cmp	r4, r2
 8008c32:	d3f3      	bcc.n	8008c1c <__mcmp+0x18>
 8008c34:	e7fb      	b.n	8008c2e <__mcmp+0x2a>
 8008c36:	4240      	negs	r0, r0
 8008c38:	e7f9      	b.n	8008c2e <__mcmp+0x2a>
	...

08008c3c <__mdiff>:
 8008c3c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008c3e:	000e      	movs	r6, r1
 8008c40:	0007      	movs	r7, r0
 8008c42:	0011      	movs	r1, r2
 8008c44:	0030      	movs	r0, r6
 8008c46:	b087      	sub	sp, #28
 8008c48:	0014      	movs	r4, r2
 8008c4a:	f7ff ffdb 	bl	8008c04 <__mcmp>
 8008c4e:	1e05      	subs	r5, r0, #0
 8008c50:	d110      	bne.n	8008c74 <__mdiff+0x38>
 8008c52:	0001      	movs	r1, r0
 8008c54:	0038      	movs	r0, r7
 8008c56:	f7ff fd03 	bl	8008660 <_Balloc>
 8008c5a:	1e02      	subs	r2, r0, #0
 8008c5c:	d104      	bne.n	8008c68 <__mdiff+0x2c>
 8008c5e:	4b40      	ldr	r3, [pc, #256]	; (8008d60 <__mdiff+0x124>)
 8008c60:	4940      	ldr	r1, [pc, #256]	; (8008d64 <__mdiff+0x128>)
 8008c62:	4841      	ldr	r0, [pc, #260]	; (8008d68 <__mdiff+0x12c>)
 8008c64:	f000 fd4c 	bl	8009700 <__assert_func>
 8008c68:	2301      	movs	r3, #1
 8008c6a:	6145      	str	r5, [r0, #20]
 8008c6c:	6103      	str	r3, [r0, #16]
 8008c6e:	0010      	movs	r0, r2
 8008c70:	b007      	add	sp, #28
 8008c72:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008c74:	2301      	movs	r3, #1
 8008c76:	9301      	str	r3, [sp, #4]
 8008c78:	2800      	cmp	r0, #0
 8008c7a:	db04      	blt.n	8008c86 <__mdiff+0x4a>
 8008c7c:	0023      	movs	r3, r4
 8008c7e:	0034      	movs	r4, r6
 8008c80:	001e      	movs	r6, r3
 8008c82:	2300      	movs	r3, #0
 8008c84:	9301      	str	r3, [sp, #4]
 8008c86:	0038      	movs	r0, r7
 8008c88:	6861      	ldr	r1, [r4, #4]
 8008c8a:	f7ff fce9 	bl	8008660 <_Balloc>
 8008c8e:	1e02      	subs	r2, r0, #0
 8008c90:	d103      	bne.n	8008c9a <__mdiff+0x5e>
 8008c92:	2190      	movs	r1, #144	; 0x90
 8008c94:	4b32      	ldr	r3, [pc, #200]	; (8008d60 <__mdiff+0x124>)
 8008c96:	0089      	lsls	r1, r1, #2
 8008c98:	e7e3      	b.n	8008c62 <__mdiff+0x26>
 8008c9a:	9b01      	ldr	r3, [sp, #4]
 8008c9c:	2700      	movs	r7, #0
 8008c9e:	60c3      	str	r3, [r0, #12]
 8008ca0:	6920      	ldr	r0, [r4, #16]
 8008ca2:	3414      	adds	r4, #20
 8008ca4:	9401      	str	r4, [sp, #4]
 8008ca6:	9b01      	ldr	r3, [sp, #4]
 8008ca8:	0084      	lsls	r4, r0, #2
 8008caa:	191b      	adds	r3, r3, r4
 8008cac:	0034      	movs	r4, r6
 8008cae:	9302      	str	r3, [sp, #8]
 8008cb0:	6933      	ldr	r3, [r6, #16]
 8008cb2:	3414      	adds	r4, #20
 8008cb4:	0099      	lsls	r1, r3, #2
 8008cb6:	1863      	adds	r3, r4, r1
 8008cb8:	9303      	str	r3, [sp, #12]
 8008cba:	0013      	movs	r3, r2
 8008cbc:	3314      	adds	r3, #20
 8008cbe:	469c      	mov	ip, r3
 8008cc0:	9305      	str	r3, [sp, #20]
 8008cc2:	9b01      	ldr	r3, [sp, #4]
 8008cc4:	9304      	str	r3, [sp, #16]
 8008cc6:	9b04      	ldr	r3, [sp, #16]
 8008cc8:	cc02      	ldmia	r4!, {r1}
 8008cca:	cb20      	ldmia	r3!, {r5}
 8008ccc:	9304      	str	r3, [sp, #16]
 8008cce:	b2ab      	uxth	r3, r5
 8008cd0:	19df      	adds	r7, r3, r7
 8008cd2:	b28b      	uxth	r3, r1
 8008cd4:	1afb      	subs	r3, r7, r3
 8008cd6:	0c2d      	lsrs	r5, r5, #16
 8008cd8:	0c09      	lsrs	r1, r1, #16
 8008cda:	1a69      	subs	r1, r5, r1
 8008cdc:	141d      	asrs	r5, r3, #16
 8008cde:	1949      	adds	r1, r1, r5
 8008ce0:	140f      	asrs	r7, r1, #16
 8008ce2:	b29b      	uxth	r3, r3
 8008ce4:	0409      	lsls	r1, r1, #16
 8008ce6:	430b      	orrs	r3, r1
 8008ce8:	4661      	mov	r1, ip
 8008cea:	c108      	stmia	r1!, {r3}
 8008cec:	9b03      	ldr	r3, [sp, #12]
 8008cee:	468c      	mov	ip, r1
 8008cf0:	42a3      	cmp	r3, r4
 8008cf2:	d8e8      	bhi.n	8008cc6 <__mdiff+0x8a>
 8008cf4:	0031      	movs	r1, r6
 8008cf6:	9c03      	ldr	r4, [sp, #12]
 8008cf8:	3115      	adds	r1, #21
 8008cfa:	2304      	movs	r3, #4
 8008cfc:	428c      	cmp	r4, r1
 8008cfe:	d304      	bcc.n	8008d0a <__mdiff+0xce>
 8008d00:	1ba3      	subs	r3, r4, r6
 8008d02:	3b15      	subs	r3, #21
 8008d04:	089b      	lsrs	r3, r3, #2
 8008d06:	3301      	adds	r3, #1
 8008d08:	009b      	lsls	r3, r3, #2
 8008d0a:	9901      	ldr	r1, [sp, #4]
 8008d0c:	18cc      	adds	r4, r1, r3
 8008d0e:	9905      	ldr	r1, [sp, #20]
 8008d10:	0026      	movs	r6, r4
 8008d12:	18cb      	adds	r3, r1, r3
 8008d14:	469c      	mov	ip, r3
 8008d16:	9902      	ldr	r1, [sp, #8]
 8008d18:	428e      	cmp	r6, r1
 8008d1a:	d310      	bcc.n	8008d3e <__mdiff+0x102>
 8008d1c:	9e02      	ldr	r6, [sp, #8]
 8008d1e:	1ee5      	subs	r5, r4, #3
 8008d20:	2100      	movs	r1, #0
 8008d22:	42ae      	cmp	r6, r5
 8008d24:	d304      	bcc.n	8008d30 <__mdiff+0xf4>
 8008d26:	0031      	movs	r1, r6
 8008d28:	3103      	adds	r1, #3
 8008d2a:	1b09      	subs	r1, r1, r4
 8008d2c:	0889      	lsrs	r1, r1, #2
 8008d2e:	0089      	lsls	r1, r1, #2
 8008d30:	185b      	adds	r3, r3, r1
 8008d32:	3b04      	subs	r3, #4
 8008d34:	6819      	ldr	r1, [r3, #0]
 8008d36:	2900      	cmp	r1, #0
 8008d38:	d00f      	beq.n	8008d5a <__mdiff+0x11e>
 8008d3a:	6110      	str	r0, [r2, #16]
 8008d3c:	e797      	b.n	8008c6e <__mdiff+0x32>
 8008d3e:	ce02      	ldmia	r6!, {r1}
 8008d40:	b28d      	uxth	r5, r1
 8008d42:	19ed      	adds	r5, r5, r7
 8008d44:	0c0f      	lsrs	r7, r1, #16
 8008d46:	1429      	asrs	r1, r5, #16
 8008d48:	1879      	adds	r1, r7, r1
 8008d4a:	140f      	asrs	r7, r1, #16
 8008d4c:	b2ad      	uxth	r5, r5
 8008d4e:	0409      	lsls	r1, r1, #16
 8008d50:	430d      	orrs	r5, r1
 8008d52:	4661      	mov	r1, ip
 8008d54:	c120      	stmia	r1!, {r5}
 8008d56:	468c      	mov	ip, r1
 8008d58:	e7dd      	b.n	8008d16 <__mdiff+0xda>
 8008d5a:	3801      	subs	r0, #1
 8008d5c:	e7e9      	b.n	8008d32 <__mdiff+0xf6>
 8008d5e:	46c0      	nop			; (mov r8, r8)
 8008d60:	0800a5a0 	.word	0x0800a5a0
 8008d64:	00000232 	.word	0x00000232
 8008d68:	0800a647 	.word	0x0800a647

08008d6c <__ulp>:
 8008d6c:	4b0f      	ldr	r3, [pc, #60]	; (8008dac <__ulp+0x40>)
 8008d6e:	4019      	ands	r1, r3
 8008d70:	4b0f      	ldr	r3, [pc, #60]	; (8008db0 <__ulp+0x44>)
 8008d72:	18c9      	adds	r1, r1, r3
 8008d74:	2900      	cmp	r1, #0
 8008d76:	dd04      	ble.n	8008d82 <__ulp+0x16>
 8008d78:	2200      	movs	r2, #0
 8008d7a:	000b      	movs	r3, r1
 8008d7c:	0010      	movs	r0, r2
 8008d7e:	0019      	movs	r1, r3
 8008d80:	4770      	bx	lr
 8008d82:	4249      	negs	r1, r1
 8008d84:	2200      	movs	r2, #0
 8008d86:	2300      	movs	r3, #0
 8008d88:	1509      	asrs	r1, r1, #20
 8008d8a:	2913      	cmp	r1, #19
 8008d8c:	dc04      	bgt.n	8008d98 <__ulp+0x2c>
 8008d8e:	2080      	movs	r0, #128	; 0x80
 8008d90:	0300      	lsls	r0, r0, #12
 8008d92:	4108      	asrs	r0, r1
 8008d94:	0003      	movs	r3, r0
 8008d96:	e7f1      	b.n	8008d7c <__ulp+0x10>
 8008d98:	3914      	subs	r1, #20
 8008d9a:	2001      	movs	r0, #1
 8008d9c:	291e      	cmp	r1, #30
 8008d9e:	dc02      	bgt.n	8008da6 <__ulp+0x3a>
 8008da0:	2080      	movs	r0, #128	; 0x80
 8008da2:	0600      	lsls	r0, r0, #24
 8008da4:	40c8      	lsrs	r0, r1
 8008da6:	0002      	movs	r2, r0
 8008da8:	e7e8      	b.n	8008d7c <__ulp+0x10>
 8008daa:	46c0      	nop			; (mov r8, r8)
 8008dac:	7ff00000 	.word	0x7ff00000
 8008db0:	fcc00000 	.word	0xfcc00000

08008db4 <__b2d>:
 8008db4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008db6:	0006      	movs	r6, r0
 8008db8:	6903      	ldr	r3, [r0, #16]
 8008dba:	3614      	adds	r6, #20
 8008dbc:	009b      	lsls	r3, r3, #2
 8008dbe:	18f3      	adds	r3, r6, r3
 8008dc0:	1f1d      	subs	r5, r3, #4
 8008dc2:	682c      	ldr	r4, [r5, #0]
 8008dc4:	000f      	movs	r7, r1
 8008dc6:	0020      	movs	r0, r4
 8008dc8:	9301      	str	r3, [sp, #4]
 8008dca:	f7ff fd41 	bl	8008850 <__hi0bits>
 8008dce:	2320      	movs	r3, #32
 8008dd0:	1a1b      	subs	r3, r3, r0
 8008dd2:	491f      	ldr	r1, [pc, #124]	; (8008e50 <__b2d+0x9c>)
 8008dd4:	603b      	str	r3, [r7, #0]
 8008dd6:	280a      	cmp	r0, #10
 8008dd8:	dc16      	bgt.n	8008e08 <__b2d+0x54>
 8008dda:	230b      	movs	r3, #11
 8008ddc:	0027      	movs	r7, r4
 8008dde:	1a1b      	subs	r3, r3, r0
 8008de0:	40df      	lsrs	r7, r3
 8008de2:	4339      	orrs	r1, r7
 8008de4:	469c      	mov	ip, r3
 8008de6:	000b      	movs	r3, r1
 8008de8:	2100      	movs	r1, #0
 8008dea:	42ae      	cmp	r6, r5
 8008dec:	d202      	bcs.n	8008df4 <__b2d+0x40>
 8008dee:	9901      	ldr	r1, [sp, #4]
 8008df0:	3908      	subs	r1, #8
 8008df2:	6809      	ldr	r1, [r1, #0]
 8008df4:	3015      	adds	r0, #21
 8008df6:	4084      	lsls	r4, r0
 8008df8:	4660      	mov	r0, ip
 8008dfa:	40c1      	lsrs	r1, r0
 8008dfc:	430c      	orrs	r4, r1
 8008dfe:	0022      	movs	r2, r4
 8008e00:	0010      	movs	r0, r2
 8008e02:	0019      	movs	r1, r3
 8008e04:	b003      	add	sp, #12
 8008e06:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008e08:	2700      	movs	r7, #0
 8008e0a:	42ae      	cmp	r6, r5
 8008e0c:	d202      	bcs.n	8008e14 <__b2d+0x60>
 8008e0e:	9d01      	ldr	r5, [sp, #4]
 8008e10:	3d08      	subs	r5, #8
 8008e12:	682f      	ldr	r7, [r5, #0]
 8008e14:	230b      	movs	r3, #11
 8008e16:	425b      	negs	r3, r3
 8008e18:	469c      	mov	ip, r3
 8008e1a:	4484      	add	ip, r0
 8008e1c:	280b      	cmp	r0, #11
 8008e1e:	d013      	beq.n	8008e48 <__b2d+0x94>
 8008e20:	4663      	mov	r3, ip
 8008e22:	2020      	movs	r0, #32
 8008e24:	409c      	lsls	r4, r3
 8008e26:	1ac0      	subs	r0, r0, r3
 8008e28:	003b      	movs	r3, r7
 8008e2a:	40c3      	lsrs	r3, r0
 8008e2c:	431c      	orrs	r4, r3
 8008e2e:	4321      	orrs	r1, r4
 8008e30:	000b      	movs	r3, r1
 8008e32:	2100      	movs	r1, #0
 8008e34:	42b5      	cmp	r5, r6
 8008e36:	d901      	bls.n	8008e3c <__b2d+0x88>
 8008e38:	3d04      	subs	r5, #4
 8008e3a:	6829      	ldr	r1, [r5, #0]
 8008e3c:	4664      	mov	r4, ip
 8008e3e:	40c1      	lsrs	r1, r0
 8008e40:	40a7      	lsls	r7, r4
 8008e42:	430f      	orrs	r7, r1
 8008e44:	003a      	movs	r2, r7
 8008e46:	e7db      	b.n	8008e00 <__b2d+0x4c>
 8008e48:	4321      	orrs	r1, r4
 8008e4a:	000b      	movs	r3, r1
 8008e4c:	e7fa      	b.n	8008e44 <__b2d+0x90>
 8008e4e:	46c0      	nop			; (mov r8, r8)
 8008e50:	3ff00000 	.word	0x3ff00000

08008e54 <__d2b>:
 8008e54:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008e56:	2101      	movs	r1, #1
 8008e58:	0014      	movs	r4, r2
 8008e5a:	001e      	movs	r6, r3
 8008e5c:	9f08      	ldr	r7, [sp, #32]
 8008e5e:	f7ff fbff 	bl	8008660 <_Balloc>
 8008e62:	1e05      	subs	r5, r0, #0
 8008e64:	d105      	bne.n	8008e72 <__d2b+0x1e>
 8008e66:	0002      	movs	r2, r0
 8008e68:	4b26      	ldr	r3, [pc, #152]	; (8008f04 <__d2b+0xb0>)
 8008e6a:	4927      	ldr	r1, [pc, #156]	; (8008f08 <__d2b+0xb4>)
 8008e6c:	4827      	ldr	r0, [pc, #156]	; (8008f0c <__d2b+0xb8>)
 8008e6e:	f000 fc47 	bl	8009700 <__assert_func>
 8008e72:	0333      	lsls	r3, r6, #12
 8008e74:	0076      	lsls	r6, r6, #1
 8008e76:	0b1b      	lsrs	r3, r3, #12
 8008e78:	0d76      	lsrs	r6, r6, #21
 8008e7a:	d124      	bne.n	8008ec6 <__d2b+0x72>
 8008e7c:	9301      	str	r3, [sp, #4]
 8008e7e:	2c00      	cmp	r4, #0
 8008e80:	d027      	beq.n	8008ed2 <__d2b+0x7e>
 8008e82:	4668      	mov	r0, sp
 8008e84:	9400      	str	r4, [sp, #0]
 8008e86:	f7ff fcfd 	bl	8008884 <__lo0bits>
 8008e8a:	9c00      	ldr	r4, [sp, #0]
 8008e8c:	2800      	cmp	r0, #0
 8008e8e:	d01e      	beq.n	8008ece <__d2b+0x7a>
 8008e90:	9b01      	ldr	r3, [sp, #4]
 8008e92:	2120      	movs	r1, #32
 8008e94:	001a      	movs	r2, r3
 8008e96:	1a09      	subs	r1, r1, r0
 8008e98:	408a      	lsls	r2, r1
 8008e9a:	40c3      	lsrs	r3, r0
 8008e9c:	4322      	orrs	r2, r4
 8008e9e:	616a      	str	r2, [r5, #20]
 8008ea0:	9301      	str	r3, [sp, #4]
 8008ea2:	9c01      	ldr	r4, [sp, #4]
 8008ea4:	61ac      	str	r4, [r5, #24]
 8008ea6:	1e63      	subs	r3, r4, #1
 8008ea8:	419c      	sbcs	r4, r3
 8008eaa:	3401      	adds	r4, #1
 8008eac:	612c      	str	r4, [r5, #16]
 8008eae:	2e00      	cmp	r6, #0
 8008eb0:	d018      	beq.n	8008ee4 <__d2b+0x90>
 8008eb2:	4b17      	ldr	r3, [pc, #92]	; (8008f10 <__d2b+0xbc>)
 8008eb4:	18f6      	adds	r6, r6, r3
 8008eb6:	2335      	movs	r3, #53	; 0x35
 8008eb8:	1836      	adds	r6, r6, r0
 8008eba:	1a18      	subs	r0, r3, r0
 8008ebc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008ebe:	603e      	str	r6, [r7, #0]
 8008ec0:	6018      	str	r0, [r3, #0]
 8008ec2:	0028      	movs	r0, r5
 8008ec4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8008ec6:	2280      	movs	r2, #128	; 0x80
 8008ec8:	0352      	lsls	r2, r2, #13
 8008eca:	4313      	orrs	r3, r2
 8008ecc:	e7d6      	b.n	8008e7c <__d2b+0x28>
 8008ece:	616c      	str	r4, [r5, #20]
 8008ed0:	e7e7      	b.n	8008ea2 <__d2b+0x4e>
 8008ed2:	a801      	add	r0, sp, #4
 8008ed4:	f7ff fcd6 	bl	8008884 <__lo0bits>
 8008ed8:	2401      	movs	r4, #1
 8008eda:	9b01      	ldr	r3, [sp, #4]
 8008edc:	612c      	str	r4, [r5, #16]
 8008ede:	616b      	str	r3, [r5, #20]
 8008ee0:	3020      	adds	r0, #32
 8008ee2:	e7e4      	b.n	8008eae <__d2b+0x5a>
 8008ee4:	4b0b      	ldr	r3, [pc, #44]	; (8008f14 <__d2b+0xc0>)
 8008ee6:	18c0      	adds	r0, r0, r3
 8008ee8:	4b0b      	ldr	r3, [pc, #44]	; (8008f18 <__d2b+0xc4>)
 8008eea:	6038      	str	r0, [r7, #0]
 8008eec:	18e3      	adds	r3, r4, r3
 8008eee:	009b      	lsls	r3, r3, #2
 8008ef0:	18eb      	adds	r3, r5, r3
 8008ef2:	6958      	ldr	r0, [r3, #20]
 8008ef4:	f7ff fcac 	bl	8008850 <__hi0bits>
 8008ef8:	0164      	lsls	r4, r4, #5
 8008efa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008efc:	1a24      	subs	r4, r4, r0
 8008efe:	601c      	str	r4, [r3, #0]
 8008f00:	e7df      	b.n	8008ec2 <__d2b+0x6e>
 8008f02:	46c0      	nop			; (mov r8, r8)
 8008f04:	0800a5a0 	.word	0x0800a5a0
 8008f08:	0000030a 	.word	0x0000030a
 8008f0c:	0800a647 	.word	0x0800a647
 8008f10:	fffffbcd 	.word	0xfffffbcd
 8008f14:	fffffbce 	.word	0xfffffbce
 8008f18:	3fffffff 	.word	0x3fffffff

08008f1c <__ratio>:
 8008f1c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008f1e:	b085      	sub	sp, #20
 8008f20:	000d      	movs	r5, r1
 8008f22:	a902      	add	r1, sp, #8
 8008f24:	0004      	movs	r4, r0
 8008f26:	f7ff ff45 	bl	8008db4 <__b2d>
 8008f2a:	9000      	str	r0, [sp, #0]
 8008f2c:	9101      	str	r1, [sp, #4]
 8008f2e:	9e00      	ldr	r6, [sp, #0]
 8008f30:	9f01      	ldr	r7, [sp, #4]
 8008f32:	0028      	movs	r0, r5
 8008f34:	a903      	add	r1, sp, #12
 8008f36:	f7ff ff3d 	bl	8008db4 <__b2d>
 8008f3a:	6924      	ldr	r4, [r4, #16]
 8008f3c:	692d      	ldr	r5, [r5, #16]
 8008f3e:	0002      	movs	r2, r0
 8008f40:	1b65      	subs	r5, r4, r5
 8008f42:	016c      	lsls	r4, r5, #5
 8008f44:	46a4      	mov	ip, r4
 8008f46:	9d03      	ldr	r5, [sp, #12]
 8008f48:	9c02      	ldr	r4, [sp, #8]
 8008f4a:	000b      	movs	r3, r1
 8008f4c:	1b64      	subs	r4, r4, r5
 8008f4e:	4464      	add	r4, ip
 8008f50:	0525      	lsls	r5, r4, #20
 8008f52:	2c00      	cmp	r4, #0
 8008f54:	dd07      	ble.n	8008f66 <__ratio+0x4a>
 8008f56:	9901      	ldr	r1, [sp, #4]
 8008f58:	186f      	adds	r7, r5, r1
 8008f5a:	0030      	movs	r0, r6
 8008f5c:	0039      	movs	r1, r7
 8008f5e:	f7f8 fba3 	bl	80016a8 <__aeabi_ddiv>
 8008f62:	b005      	add	sp, #20
 8008f64:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008f66:	1b4b      	subs	r3, r1, r5
 8008f68:	e7f7      	b.n	8008f5a <__ratio+0x3e>

08008f6a <__copybits>:
 8008f6a:	b570      	push	{r4, r5, r6, lr}
 8008f6c:	0015      	movs	r5, r2
 8008f6e:	6913      	ldr	r3, [r2, #16]
 8008f70:	3514      	adds	r5, #20
 8008f72:	009c      	lsls	r4, r3, #2
 8008f74:	0006      	movs	r6, r0
 8008f76:	002b      	movs	r3, r5
 8008f78:	3901      	subs	r1, #1
 8008f7a:	1149      	asrs	r1, r1, #5
 8008f7c:	3101      	adds	r1, #1
 8008f7e:	0089      	lsls	r1, r1, #2
 8008f80:	1841      	adds	r1, r0, r1
 8008f82:	192c      	adds	r4, r5, r4
 8008f84:	429c      	cmp	r4, r3
 8008f86:	d80d      	bhi.n	8008fa4 <__copybits+0x3a>
 8008f88:	0015      	movs	r5, r2
 8008f8a:	3511      	adds	r5, #17
 8008f8c:	2300      	movs	r3, #0
 8008f8e:	42a5      	cmp	r5, r4
 8008f90:	d803      	bhi.n	8008f9a <__copybits+0x30>
 8008f92:	1aa3      	subs	r3, r4, r2
 8008f94:	3b11      	subs	r3, #17
 8008f96:	089b      	lsrs	r3, r3, #2
 8008f98:	009b      	lsls	r3, r3, #2
 8008f9a:	18c0      	adds	r0, r0, r3
 8008f9c:	2300      	movs	r3, #0
 8008f9e:	4281      	cmp	r1, r0
 8008fa0:	d803      	bhi.n	8008faa <__copybits+0x40>
 8008fa2:	bd70      	pop	{r4, r5, r6, pc}
 8008fa4:	cb20      	ldmia	r3!, {r5}
 8008fa6:	c620      	stmia	r6!, {r5}
 8008fa8:	e7ec      	b.n	8008f84 <__copybits+0x1a>
 8008faa:	c008      	stmia	r0!, {r3}
 8008fac:	e7f7      	b.n	8008f9e <__copybits+0x34>

08008fae <__any_on>:
 8008fae:	0002      	movs	r2, r0
 8008fb0:	6900      	ldr	r0, [r0, #16]
 8008fb2:	b510      	push	{r4, lr}
 8008fb4:	3214      	adds	r2, #20
 8008fb6:	114b      	asrs	r3, r1, #5
 8008fb8:	4298      	cmp	r0, r3
 8008fba:	db13      	blt.n	8008fe4 <__any_on+0x36>
 8008fbc:	dd0c      	ble.n	8008fd8 <__any_on+0x2a>
 8008fbe:	241f      	movs	r4, #31
 8008fc0:	0008      	movs	r0, r1
 8008fc2:	4020      	ands	r0, r4
 8008fc4:	4221      	tst	r1, r4
 8008fc6:	d007      	beq.n	8008fd8 <__any_on+0x2a>
 8008fc8:	0099      	lsls	r1, r3, #2
 8008fca:	588c      	ldr	r4, [r1, r2]
 8008fcc:	0021      	movs	r1, r4
 8008fce:	40c1      	lsrs	r1, r0
 8008fd0:	4081      	lsls	r1, r0
 8008fd2:	2001      	movs	r0, #1
 8008fd4:	428c      	cmp	r4, r1
 8008fd6:	d104      	bne.n	8008fe2 <__any_on+0x34>
 8008fd8:	009b      	lsls	r3, r3, #2
 8008fda:	18d3      	adds	r3, r2, r3
 8008fdc:	4293      	cmp	r3, r2
 8008fde:	d803      	bhi.n	8008fe8 <__any_on+0x3a>
 8008fe0:	2000      	movs	r0, #0
 8008fe2:	bd10      	pop	{r4, pc}
 8008fe4:	0003      	movs	r3, r0
 8008fe6:	e7f7      	b.n	8008fd8 <__any_on+0x2a>
 8008fe8:	3b04      	subs	r3, #4
 8008fea:	6819      	ldr	r1, [r3, #0]
 8008fec:	2900      	cmp	r1, #0
 8008fee:	d0f5      	beq.n	8008fdc <__any_on+0x2e>
 8008ff0:	2001      	movs	r0, #1
 8008ff2:	e7f6      	b.n	8008fe2 <__any_on+0x34>

08008ff4 <_calloc_r>:
 8008ff4:	434a      	muls	r2, r1
 8008ff6:	b570      	push	{r4, r5, r6, lr}
 8008ff8:	0011      	movs	r1, r2
 8008ffa:	0015      	movs	r5, r2
 8008ffc:	f000 f808 	bl	8009010 <_malloc_r>
 8009000:	1e04      	subs	r4, r0, #0
 8009002:	d003      	beq.n	800900c <_calloc_r+0x18>
 8009004:	002a      	movs	r2, r5
 8009006:	2100      	movs	r1, #0
 8009008:	f7fe f933 	bl	8007272 <memset>
 800900c:	0020      	movs	r0, r4
 800900e:	bd70      	pop	{r4, r5, r6, pc}

08009010 <_malloc_r>:
 8009010:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009012:	2303      	movs	r3, #3
 8009014:	1ccd      	adds	r5, r1, #3
 8009016:	439d      	bics	r5, r3
 8009018:	3508      	adds	r5, #8
 800901a:	0006      	movs	r6, r0
 800901c:	2d0c      	cmp	r5, #12
 800901e:	d21f      	bcs.n	8009060 <_malloc_r+0x50>
 8009020:	250c      	movs	r5, #12
 8009022:	42a9      	cmp	r1, r5
 8009024:	d81e      	bhi.n	8009064 <_malloc_r+0x54>
 8009026:	0030      	movs	r0, r6
 8009028:	f000 fbc0 	bl	80097ac <__malloc_lock>
 800902c:	4925      	ldr	r1, [pc, #148]	; (80090c4 <_malloc_r+0xb4>)
 800902e:	680a      	ldr	r2, [r1, #0]
 8009030:	0014      	movs	r4, r2
 8009032:	2c00      	cmp	r4, #0
 8009034:	d11a      	bne.n	800906c <_malloc_r+0x5c>
 8009036:	4f24      	ldr	r7, [pc, #144]	; (80090c8 <_malloc_r+0xb8>)
 8009038:	683b      	ldr	r3, [r7, #0]
 800903a:	2b00      	cmp	r3, #0
 800903c:	d104      	bne.n	8009048 <_malloc_r+0x38>
 800903e:	0021      	movs	r1, r4
 8009040:	0030      	movs	r0, r6
 8009042:	f000 fb2d 	bl	80096a0 <_sbrk_r>
 8009046:	6038      	str	r0, [r7, #0]
 8009048:	0029      	movs	r1, r5
 800904a:	0030      	movs	r0, r6
 800904c:	f000 fb28 	bl	80096a0 <_sbrk_r>
 8009050:	1c43      	adds	r3, r0, #1
 8009052:	d12b      	bne.n	80090ac <_malloc_r+0x9c>
 8009054:	230c      	movs	r3, #12
 8009056:	0030      	movs	r0, r6
 8009058:	6033      	str	r3, [r6, #0]
 800905a:	f000 fbaf 	bl	80097bc <__malloc_unlock>
 800905e:	e003      	b.n	8009068 <_malloc_r+0x58>
 8009060:	2d00      	cmp	r5, #0
 8009062:	dade      	bge.n	8009022 <_malloc_r+0x12>
 8009064:	230c      	movs	r3, #12
 8009066:	6033      	str	r3, [r6, #0]
 8009068:	2000      	movs	r0, #0
 800906a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800906c:	6823      	ldr	r3, [r4, #0]
 800906e:	1b5b      	subs	r3, r3, r5
 8009070:	d419      	bmi.n	80090a6 <_malloc_r+0x96>
 8009072:	2b0b      	cmp	r3, #11
 8009074:	d903      	bls.n	800907e <_malloc_r+0x6e>
 8009076:	6023      	str	r3, [r4, #0]
 8009078:	18e4      	adds	r4, r4, r3
 800907a:	6025      	str	r5, [r4, #0]
 800907c:	e003      	b.n	8009086 <_malloc_r+0x76>
 800907e:	6863      	ldr	r3, [r4, #4]
 8009080:	42a2      	cmp	r2, r4
 8009082:	d10e      	bne.n	80090a2 <_malloc_r+0x92>
 8009084:	600b      	str	r3, [r1, #0]
 8009086:	0030      	movs	r0, r6
 8009088:	f000 fb98 	bl	80097bc <__malloc_unlock>
 800908c:	0020      	movs	r0, r4
 800908e:	2207      	movs	r2, #7
 8009090:	300b      	adds	r0, #11
 8009092:	1d23      	adds	r3, r4, #4
 8009094:	4390      	bics	r0, r2
 8009096:	1ac2      	subs	r2, r0, r3
 8009098:	4298      	cmp	r0, r3
 800909a:	d0e6      	beq.n	800906a <_malloc_r+0x5a>
 800909c:	1a1b      	subs	r3, r3, r0
 800909e:	50a3      	str	r3, [r4, r2]
 80090a0:	e7e3      	b.n	800906a <_malloc_r+0x5a>
 80090a2:	6053      	str	r3, [r2, #4]
 80090a4:	e7ef      	b.n	8009086 <_malloc_r+0x76>
 80090a6:	0022      	movs	r2, r4
 80090a8:	6864      	ldr	r4, [r4, #4]
 80090aa:	e7c2      	b.n	8009032 <_malloc_r+0x22>
 80090ac:	2303      	movs	r3, #3
 80090ae:	1cc4      	adds	r4, r0, #3
 80090b0:	439c      	bics	r4, r3
 80090b2:	42a0      	cmp	r0, r4
 80090b4:	d0e1      	beq.n	800907a <_malloc_r+0x6a>
 80090b6:	1a21      	subs	r1, r4, r0
 80090b8:	0030      	movs	r0, r6
 80090ba:	f000 faf1 	bl	80096a0 <_sbrk_r>
 80090be:	1c43      	adds	r3, r0, #1
 80090c0:	d1db      	bne.n	800907a <_malloc_r+0x6a>
 80090c2:	e7c7      	b.n	8009054 <_malloc_r+0x44>
 80090c4:	20000204 	.word	0x20000204
 80090c8:	20000208 	.word	0x20000208

080090cc <__ssputs_r>:
 80090cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80090ce:	688e      	ldr	r6, [r1, #8]
 80090d0:	b085      	sub	sp, #20
 80090d2:	0007      	movs	r7, r0
 80090d4:	000c      	movs	r4, r1
 80090d6:	9203      	str	r2, [sp, #12]
 80090d8:	9301      	str	r3, [sp, #4]
 80090da:	429e      	cmp	r6, r3
 80090dc:	d83c      	bhi.n	8009158 <__ssputs_r+0x8c>
 80090de:	2390      	movs	r3, #144	; 0x90
 80090e0:	898a      	ldrh	r2, [r1, #12]
 80090e2:	00db      	lsls	r3, r3, #3
 80090e4:	421a      	tst	r2, r3
 80090e6:	d034      	beq.n	8009152 <__ssputs_r+0x86>
 80090e8:	2503      	movs	r5, #3
 80090ea:	6909      	ldr	r1, [r1, #16]
 80090ec:	6823      	ldr	r3, [r4, #0]
 80090ee:	1a5b      	subs	r3, r3, r1
 80090f0:	9302      	str	r3, [sp, #8]
 80090f2:	6963      	ldr	r3, [r4, #20]
 80090f4:	9802      	ldr	r0, [sp, #8]
 80090f6:	435d      	muls	r5, r3
 80090f8:	0feb      	lsrs	r3, r5, #31
 80090fa:	195d      	adds	r5, r3, r5
 80090fc:	9b01      	ldr	r3, [sp, #4]
 80090fe:	106d      	asrs	r5, r5, #1
 8009100:	3301      	adds	r3, #1
 8009102:	181b      	adds	r3, r3, r0
 8009104:	42ab      	cmp	r3, r5
 8009106:	d900      	bls.n	800910a <__ssputs_r+0x3e>
 8009108:	001d      	movs	r5, r3
 800910a:	0553      	lsls	r3, r2, #21
 800910c:	d532      	bpl.n	8009174 <__ssputs_r+0xa8>
 800910e:	0029      	movs	r1, r5
 8009110:	0038      	movs	r0, r7
 8009112:	f7ff ff7d 	bl	8009010 <_malloc_r>
 8009116:	1e06      	subs	r6, r0, #0
 8009118:	d109      	bne.n	800912e <__ssputs_r+0x62>
 800911a:	230c      	movs	r3, #12
 800911c:	603b      	str	r3, [r7, #0]
 800911e:	2340      	movs	r3, #64	; 0x40
 8009120:	2001      	movs	r0, #1
 8009122:	89a2      	ldrh	r2, [r4, #12]
 8009124:	4240      	negs	r0, r0
 8009126:	4313      	orrs	r3, r2
 8009128:	81a3      	strh	r3, [r4, #12]
 800912a:	b005      	add	sp, #20
 800912c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800912e:	9a02      	ldr	r2, [sp, #8]
 8009130:	6921      	ldr	r1, [r4, #16]
 8009132:	f7fe f895 	bl	8007260 <memcpy>
 8009136:	89a3      	ldrh	r3, [r4, #12]
 8009138:	4a14      	ldr	r2, [pc, #80]	; (800918c <__ssputs_r+0xc0>)
 800913a:	401a      	ands	r2, r3
 800913c:	2380      	movs	r3, #128	; 0x80
 800913e:	4313      	orrs	r3, r2
 8009140:	81a3      	strh	r3, [r4, #12]
 8009142:	9b02      	ldr	r3, [sp, #8]
 8009144:	6126      	str	r6, [r4, #16]
 8009146:	18f6      	adds	r6, r6, r3
 8009148:	6026      	str	r6, [r4, #0]
 800914a:	6165      	str	r5, [r4, #20]
 800914c:	9e01      	ldr	r6, [sp, #4]
 800914e:	1aed      	subs	r5, r5, r3
 8009150:	60a5      	str	r5, [r4, #8]
 8009152:	9b01      	ldr	r3, [sp, #4]
 8009154:	429e      	cmp	r6, r3
 8009156:	d900      	bls.n	800915a <__ssputs_r+0x8e>
 8009158:	9e01      	ldr	r6, [sp, #4]
 800915a:	0032      	movs	r2, r6
 800915c:	9903      	ldr	r1, [sp, #12]
 800915e:	6820      	ldr	r0, [r4, #0]
 8009160:	f000 fb11 	bl	8009786 <memmove>
 8009164:	68a3      	ldr	r3, [r4, #8]
 8009166:	2000      	movs	r0, #0
 8009168:	1b9b      	subs	r3, r3, r6
 800916a:	60a3      	str	r3, [r4, #8]
 800916c:	6823      	ldr	r3, [r4, #0]
 800916e:	199e      	adds	r6, r3, r6
 8009170:	6026      	str	r6, [r4, #0]
 8009172:	e7da      	b.n	800912a <__ssputs_r+0x5e>
 8009174:	002a      	movs	r2, r5
 8009176:	0038      	movs	r0, r7
 8009178:	f000 fb72 	bl	8009860 <_realloc_r>
 800917c:	1e06      	subs	r6, r0, #0
 800917e:	d1e0      	bne.n	8009142 <__ssputs_r+0x76>
 8009180:	0038      	movs	r0, r7
 8009182:	6921      	ldr	r1, [r4, #16]
 8009184:	f000 fb22 	bl	80097cc <_free_r>
 8009188:	e7c7      	b.n	800911a <__ssputs_r+0x4e>
 800918a:	46c0      	nop			; (mov r8, r8)
 800918c:	fffffb7f 	.word	0xfffffb7f

08009190 <_svfiprintf_r>:
 8009190:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009192:	b0a1      	sub	sp, #132	; 0x84
 8009194:	9003      	str	r0, [sp, #12]
 8009196:	001d      	movs	r5, r3
 8009198:	898b      	ldrh	r3, [r1, #12]
 800919a:	000f      	movs	r7, r1
 800919c:	0016      	movs	r6, r2
 800919e:	061b      	lsls	r3, r3, #24
 80091a0:	d511      	bpl.n	80091c6 <_svfiprintf_r+0x36>
 80091a2:	690b      	ldr	r3, [r1, #16]
 80091a4:	2b00      	cmp	r3, #0
 80091a6:	d10e      	bne.n	80091c6 <_svfiprintf_r+0x36>
 80091a8:	2140      	movs	r1, #64	; 0x40
 80091aa:	f7ff ff31 	bl	8009010 <_malloc_r>
 80091ae:	6038      	str	r0, [r7, #0]
 80091b0:	6138      	str	r0, [r7, #16]
 80091b2:	2800      	cmp	r0, #0
 80091b4:	d105      	bne.n	80091c2 <_svfiprintf_r+0x32>
 80091b6:	230c      	movs	r3, #12
 80091b8:	9a03      	ldr	r2, [sp, #12]
 80091ba:	3801      	subs	r0, #1
 80091bc:	6013      	str	r3, [r2, #0]
 80091be:	b021      	add	sp, #132	; 0x84
 80091c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80091c2:	2340      	movs	r3, #64	; 0x40
 80091c4:	617b      	str	r3, [r7, #20]
 80091c6:	2300      	movs	r3, #0
 80091c8:	ac08      	add	r4, sp, #32
 80091ca:	6163      	str	r3, [r4, #20]
 80091cc:	3320      	adds	r3, #32
 80091ce:	7663      	strb	r3, [r4, #25]
 80091d0:	3310      	adds	r3, #16
 80091d2:	76a3      	strb	r3, [r4, #26]
 80091d4:	9507      	str	r5, [sp, #28]
 80091d6:	0035      	movs	r5, r6
 80091d8:	782b      	ldrb	r3, [r5, #0]
 80091da:	2b00      	cmp	r3, #0
 80091dc:	d001      	beq.n	80091e2 <_svfiprintf_r+0x52>
 80091de:	2b25      	cmp	r3, #37	; 0x25
 80091e0:	d147      	bne.n	8009272 <_svfiprintf_r+0xe2>
 80091e2:	1bab      	subs	r3, r5, r6
 80091e4:	9305      	str	r3, [sp, #20]
 80091e6:	42b5      	cmp	r5, r6
 80091e8:	d00c      	beq.n	8009204 <_svfiprintf_r+0x74>
 80091ea:	0032      	movs	r2, r6
 80091ec:	0039      	movs	r1, r7
 80091ee:	9803      	ldr	r0, [sp, #12]
 80091f0:	f7ff ff6c 	bl	80090cc <__ssputs_r>
 80091f4:	1c43      	adds	r3, r0, #1
 80091f6:	d100      	bne.n	80091fa <_svfiprintf_r+0x6a>
 80091f8:	e0ae      	b.n	8009358 <_svfiprintf_r+0x1c8>
 80091fa:	6962      	ldr	r2, [r4, #20]
 80091fc:	9b05      	ldr	r3, [sp, #20]
 80091fe:	4694      	mov	ip, r2
 8009200:	4463      	add	r3, ip
 8009202:	6163      	str	r3, [r4, #20]
 8009204:	782b      	ldrb	r3, [r5, #0]
 8009206:	2b00      	cmp	r3, #0
 8009208:	d100      	bne.n	800920c <_svfiprintf_r+0x7c>
 800920a:	e0a5      	b.n	8009358 <_svfiprintf_r+0x1c8>
 800920c:	2201      	movs	r2, #1
 800920e:	2300      	movs	r3, #0
 8009210:	4252      	negs	r2, r2
 8009212:	6062      	str	r2, [r4, #4]
 8009214:	a904      	add	r1, sp, #16
 8009216:	3254      	adds	r2, #84	; 0x54
 8009218:	1852      	adds	r2, r2, r1
 800921a:	1c6e      	adds	r6, r5, #1
 800921c:	6023      	str	r3, [r4, #0]
 800921e:	60e3      	str	r3, [r4, #12]
 8009220:	60a3      	str	r3, [r4, #8]
 8009222:	7013      	strb	r3, [r2, #0]
 8009224:	65a3      	str	r3, [r4, #88]	; 0x58
 8009226:	2205      	movs	r2, #5
 8009228:	7831      	ldrb	r1, [r6, #0]
 800922a:	4854      	ldr	r0, [pc, #336]	; (800937c <_svfiprintf_r+0x1ec>)
 800922c:	f000 faa0 	bl	8009770 <memchr>
 8009230:	1c75      	adds	r5, r6, #1
 8009232:	2800      	cmp	r0, #0
 8009234:	d11f      	bne.n	8009276 <_svfiprintf_r+0xe6>
 8009236:	6822      	ldr	r2, [r4, #0]
 8009238:	06d3      	lsls	r3, r2, #27
 800923a:	d504      	bpl.n	8009246 <_svfiprintf_r+0xb6>
 800923c:	2353      	movs	r3, #83	; 0x53
 800923e:	a904      	add	r1, sp, #16
 8009240:	185b      	adds	r3, r3, r1
 8009242:	2120      	movs	r1, #32
 8009244:	7019      	strb	r1, [r3, #0]
 8009246:	0713      	lsls	r3, r2, #28
 8009248:	d504      	bpl.n	8009254 <_svfiprintf_r+0xc4>
 800924a:	2353      	movs	r3, #83	; 0x53
 800924c:	a904      	add	r1, sp, #16
 800924e:	185b      	adds	r3, r3, r1
 8009250:	212b      	movs	r1, #43	; 0x2b
 8009252:	7019      	strb	r1, [r3, #0]
 8009254:	7833      	ldrb	r3, [r6, #0]
 8009256:	2b2a      	cmp	r3, #42	; 0x2a
 8009258:	d016      	beq.n	8009288 <_svfiprintf_r+0xf8>
 800925a:	0035      	movs	r5, r6
 800925c:	2100      	movs	r1, #0
 800925e:	200a      	movs	r0, #10
 8009260:	68e3      	ldr	r3, [r4, #12]
 8009262:	782a      	ldrb	r2, [r5, #0]
 8009264:	1c6e      	adds	r6, r5, #1
 8009266:	3a30      	subs	r2, #48	; 0x30
 8009268:	2a09      	cmp	r2, #9
 800926a:	d94e      	bls.n	800930a <_svfiprintf_r+0x17a>
 800926c:	2900      	cmp	r1, #0
 800926e:	d111      	bne.n	8009294 <_svfiprintf_r+0x104>
 8009270:	e017      	b.n	80092a2 <_svfiprintf_r+0x112>
 8009272:	3501      	adds	r5, #1
 8009274:	e7b0      	b.n	80091d8 <_svfiprintf_r+0x48>
 8009276:	4b41      	ldr	r3, [pc, #260]	; (800937c <_svfiprintf_r+0x1ec>)
 8009278:	6822      	ldr	r2, [r4, #0]
 800927a:	1ac0      	subs	r0, r0, r3
 800927c:	2301      	movs	r3, #1
 800927e:	4083      	lsls	r3, r0
 8009280:	4313      	orrs	r3, r2
 8009282:	002e      	movs	r6, r5
 8009284:	6023      	str	r3, [r4, #0]
 8009286:	e7ce      	b.n	8009226 <_svfiprintf_r+0x96>
 8009288:	9b07      	ldr	r3, [sp, #28]
 800928a:	1d19      	adds	r1, r3, #4
 800928c:	681b      	ldr	r3, [r3, #0]
 800928e:	9107      	str	r1, [sp, #28]
 8009290:	2b00      	cmp	r3, #0
 8009292:	db01      	blt.n	8009298 <_svfiprintf_r+0x108>
 8009294:	930b      	str	r3, [sp, #44]	; 0x2c
 8009296:	e004      	b.n	80092a2 <_svfiprintf_r+0x112>
 8009298:	425b      	negs	r3, r3
 800929a:	60e3      	str	r3, [r4, #12]
 800929c:	2302      	movs	r3, #2
 800929e:	4313      	orrs	r3, r2
 80092a0:	6023      	str	r3, [r4, #0]
 80092a2:	782b      	ldrb	r3, [r5, #0]
 80092a4:	2b2e      	cmp	r3, #46	; 0x2e
 80092a6:	d10a      	bne.n	80092be <_svfiprintf_r+0x12e>
 80092a8:	786b      	ldrb	r3, [r5, #1]
 80092aa:	2b2a      	cmp	r3, #42	; 0x2a
 80092ac:	d135      	bne.n	800931a <_svfiprintf_r+0x18a>
 80092ae:	9b07      	ldr	r3, [sp, #28]
 80092b0:	3502      	adds	r5, #2
 80092b2:	1d1a      	adds	r2, r3, #4
 80092b4:	681b      	ldr	r3, [r3, #0]
 80092b6:	9207      	str	r2, [sp, #28]
 80092b8:	2b00      	cmp	r3, #0
 80092ba:	db2b      	blt.n	8009314 <_svfiprintf_r+0x184>
 80092bc:	9309      	str	r3, [sp, #36]	; 0x24
 80092be:	4e30      	ldr	r6, [pc, #192]	; (8009380 <_svfiprintf_r+0x1f0>)
 80092c0:	2203      	movs	r2, #3
 80092c2:	0030      	movs	r0, r6
 80092c4:	7829      	ldrb	r1, [r5, #0]
 80092c6:	f000 fa53 	bl	8009770 <memchr>
 80092ca:	2800      	cmp	r0, #0
 80092cc:	d006      	beq.n	80092dc <_svfiprintf_r+0x14c>
 80092ce:	2340      	movs	r3, #64	; 0x40
 80092d0:	1b80      	subs	r0, r0, r6
 80092d2:	4083      	lsls	r3, r0
 80092d4:	6822      	ldr	r2, [r4, #0]
 80092d6:	3501      	adds	r5, #1
 80092d8:	4313      	orrs	r3, r2
 80092da:	6023      	str	r3, [r4, #0]
 80092dc:	7829      	ldrb	r1, [r5, #0]
 80092de:	2206      	movs	r2, #6
 80092e0:	4828      	ldr	r0, [pc, #160]	; (8009384 <_svfiprintf_r+0x1f4>)
 80092e2:	1c6e      	adds	r6, r5, #1
 80092e4:	7621      	strb	r1, [r4, #24]
 80092e6:	f000 fa43 	bl	8009770 <memchr>
 80092ea:	2800      	cmp	r0, #0
 80092ec:	d03c      	beq.n	8009368 <_svfiprintf_r+0x1d8>
 80092ee:	4b26      	ldr	r3, [pc, #152]	; (8009388 <_svfiprintf_r+0x1f8>)
 80092f0:	2b00      	cmp	r3, #0
 80092f2:	d125      	bne.n	8009340 <_svfiprintf_r+0x1b0>
 80092f4:	2207      	movs	r2, #7
 80092f6:	9b07      	ldr	r3, [sp, #28]
 80092f8:	3307      	adds	r3, #7
 80092fa:	4393      	bics	r3, r2
 80092fc:	3308      	adds	r3, #8
 80092fe:	9307      	str	r3, [sp, #28]
 8009300:	6963      	ldr	r3, [r4, #20]
 8009302:	9a04      	ldr	r2, [sp, #16]
 8009304:	189b      	adds	r3, r3, r2
 8009306:	6163      	str	r3, [r4, #20]
 8009308:	e765      	b.n	80091d6 <_svfiprintf_r+0x46>
 800930a:	4343      	muls	r3, r0
 800930c:	0035      	movs	r5, r6
 800930e:	2101      	movs	r1, #1
 8009310:	189b      	adds	r3, r3, r2
 8009312:	e7a6      	b.n	8009262 <_svfiprintf_r+0xd2>
 8009314:	2301      	movs	r3, #1
 8009316:	425b      	negs	r3, r3
 8009318:	e7d0      	b.n	80092bc <_svfiprintf_r+0x12c>
 800931a:	2300      	movs	r3, #0
 800931c:	200a      	movs	r0, #10
 800931e:	001a      	movs	r2, r3
 8009320:	3501      	adds	r5, #1
 8009322:	6063      	str	r3, [r4, #4]
 8009324:	7829      	ldrb	r1, [r5, #0]
 8009326:	1c6e      	adds	r6, r5, #1
 8009328:	3930      	subs	r1, #48	; 0x30
 800932a:	2909      	cmp	r1, #9
 800932c:	d903      	bls.n	8009336 <_svfiprintf_r+0x1a6>
 800932e:	2b00      	cmp	r3, #0
 8009330:	d0c5      	beq.n	80092be <_svfiprintf_r+0x12e>
 8009332:	9209      	str	r2, [sp, #36]	; 0x24
 8009334:	e7c3      	b.n	80092be <_svfiprintf_r+0x12e>
 8009336:	4342      	muls	r2, r0
 8009338:	0035      	movs	r5, r6
 800933a:	2301      	movs	r3, #1
 800933c:	1852      	adds	r2, r2, r1
 800933e:	e7f1      	b.n	8009324 <_svfiprintf_r+0x194>
 8009340:	ab07      	add	r3, sp, #28
 8009342:	9300      	str	r3, [sp, #0]
 8009344:	003a      	movs	r2, r7
 8009346:	0021      	movs	r1, r4
 8009348:	4b10      	ldr	r3, [pc, #64]	; (800938c <_svfiprintf_r+0x1fc>)
 800934a:	9803      	ldr	r0, [sp, #12]
 800934c:	e000      	b.n	8009350 <_svfiprintf_r+0x1c0>
 800934e:	bf00      	nop
 8009350:	9004      	str	r0, [sp, #16]
 8009352:	9b04      	ldr	r3, [sp, #16]
 8009354:	3301      	adds	r3, #1
 8009356:	d1d3      	bne.n	8009300 <_svfiprintf_r+0x170>
 8009358:	89bb      	ldrh	r3, [r7, #12]
 800935a:	980d      	ldr	r0, [sp, #52]	; 0x34
 800935c:	065b      	lsls	r3, r3, #25
 800935e:	d400      	bmi.n	8009362 <_svfiprintf_r+0x1d2>
 8009360:	e72d      	b.n	80091be <_svfiprintf_r+0x2e>
 8009362:	2001      	movs	r0, #1
 8009364:	4240      	negs	r0, r0
 8009366:	e72a      	b.n	80091be <_svfiprintf_r+0x2e>
 8009368:	ab07      	add	r3, sp, #28
 800936a:	9300      	str	r3, [sp, #0]
 800936c:	003a      	movs	r2, r7
 800936e:	0021      	movs	r1, r4
 8009370:	4b06      	ldr	r3, [pc, #24]	; (800938c <_svfiprintf_r+0x1fc>)
 8009372:	9803      	ldr	r0, [sp, #12]
 8009374:	f000 f87c 	bl	8009470 <_printf_i>
 8009378:	e7ea      	b.n	8009350 <_svfiprintf_r+0x1c0>
 800937a:	46c0      	nop			; (mov r8, r8)
 800937c:	0800a7a4 	.word	0x0800a7a4
 8009380:	0800a7aa 	.word	0x0800a7aa
 8009384:	0800a7ae 	.word	0x0800a7ae
 8009388:	00000000 	.word	0x00000000
 800938c:	080090cd 	.word	0x080090cd

08009390 <_printf_common>:
 8009390:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009392:	0015      	movs	r5, r2
 8009394:	9301      	str	r3, [sp, #4]
 8009396:	688a      	ldr	r2, [r1, #8]
 8009398:	690b      	ldr	r3, [r1, #16]
 800939a:	000c      	movs	r4, r1
 800939c:	9000      	str	r0, [sp, #0]
 800939e:	4293      	cmp	r3, r2
 80093a0:	da00      	bge.n	80093a4 <_printf_common+0x14>
 80093a2:	0013      	movs	r3, r2
 80093a4:	0022      	movs	r2, r4
 80093a6:	602b      	str	r3, [r5, #0]
 80093a8:	3243      	adds	r2, #67	; 0x43
 80093aa:	7812      	ldrb	r2, [r2, #0]
 80093ac:	2a00      	cmp	r2, #0
 80093ae:	d001      	beq.n	80093b4 <_printf_common+0x24>
 80093b0:	3301      	adds	r3, #1
 80093b2:	602b      	str	r3, [r5, #0]
 80093b4:	6823      	ldr	r3, [r4, #0]
 80093b6:	069b      	lsls	r3, r3, #26
 80093b8:	d502      	bpl.n	80093c0 <_printf_common+0x30>
 80093ba:	682b      	ldr	r3, [r5, #0]
 80093bc:	3302      	adds	r3, #2
 80093be:	602b      	str	r3, [r5, #0]
 80093c0:	6822      	ldr	r2, [r4, #0]
 80093c2:	2306      	movs	r3, #6
 80093c4:	0017      	movs	r7, r2
 80093c6:	401f      	ands	r7, r3
 80093c8:	421a      	tst	r2, r3
 80093ca:	d027      	beq.n	800941c <_printf_common+0x8c>
 80093cc:	0023      	movs	r3, r4
 80093ce:	3343      	adds	r3, #67	; 0x43
 80093d0:	781b      	ldrb	r3, [r3, #0]
 80093d2:	1e5a      	subs	r2, r3, #1
 80093d4:	4193      	sbcs	r3, r2
 80093d6:	6822      	ldr	r2, [r4, #0]
 80093d8:	0692      	lsls	r2, r2, #26
 80093da:	d430      	bmi.n	800943e <_printf_common+0xae>
 80093dc:	0022      	movs	r2, r4
 80093de:	9901      	ldr	r1, [sp, #4]
 80093e0:	9800      	ldr	r0, [sp, #0]
 80093e2:	9e08      	ldr	r6, [sp, #32]
 80093e4:	3243      	adds	r2, #67	; 0x43
 80093e6:	47b0      	blx	r6
 80093e8:	1c43      	adds	r3, r0, #1
 80093ea:	d025      	beq.n	8009438 <_printf_common+0xa8>
 80093ec:	2306      	movs	r3, #6
 80093ee:	6820      	ldr	r0, [r4, #0]
 80093f0:	682a      	ldr	r2, [r5, #0]
 80093f2:	68e1      	ldr	r1, [r4, #12]
 80093f4:	2500      	movs	r5, #0
 80093f6:	4003      	ands	r3, r0
 80093f8:	2b04      	cmp	r3, #4
 80093fa:	d103      	bne.n	8009404 <_printf_common+0x74>
 80093fc:	1a8d      	subs	r5, r1, r2
 80093fe:	43eb      	mvns	r3, r5
 8009400:	17db      	asrs	r3, r3, #31
 8009402:	401d      	ands	r5, r3
 8009404:	68a3      	ldr	r3, [r4, #8]
 8009406:	6922      	ldr	r2, [r4, #16]
 8009408:	4293      	cmp	r3, r2
 800940a:	dd01      	ble.n	8009410 <_printf_common+0x80>
 800940c:	1a9b      	subs	r3, r3, r2
 800940e:	18ed      	adds	r5, r5, r3
 8009410:	2700      	movs	r7, #0
 8009412:	42bd      	cmp	r5, r7
 8009414:	d120      	bne.n	8009458 <_printf_common+0xc8>
 8009416:	2000      	movs	r0, #0
 8009418:	e010      	b.n	800943c <_printf_common+0xac>
 800941a:	3701      	adds	r7, #1
 800941c:	68e3      	ldr	r3, [r4, #12]
 800941e:	682a      	ldr	r2, [r5, #0]
 8009420:	1a9b      	subs	r3, r3, r2
 8009422:	42bb      	cmp	r3, r7
 8009424:	ddd2      	ble.n	80093cc <_printf_common+0x3c>
 8009426:	0022      	movs	r2, r4
 8009428:	2301      	movs	r3, #1
 800942a:	9901      	ldr	r1, [sp, #4]
 800942c:	9800      	ldr	r0, [sp, #0]
 800942e:	9e08      	ldr	r6, [sp, #32]
 8009430:	3219      	adds	r2, #25
 8009432:	47b0      	blx	r6
 8009434:	1c43      	adds	r3, r0, #1
 8009436:	d1f0      	bne.n	800941a <_printf_common+0x8a>
 8009438:	2001      	movs	r0, #1
 800943a:	4240      	negs	r0, r0
 800943c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800943e:	2030      	movs	r0, #48	; 0x30
 8009440:	18e1      	adds	r1, r4, r3
 8009442:	3143      	adds	r1, #67	; 0x43
 8009444:	7008      	strb	r0, [r1, #0]
 8009446:	0021      	movs	r1, r4
 8009448:	1c5a      	adds	r2, r3, #1
 800944a:	3145      	adds	r1, #69	; 0x45
 800944c:	7809      	ldrb	r1, [r1, #0]
 800944e:	18a2      	adds	r2, r4, r2
 8009450:	3243      	adds	r2, #67	; 0x43
 8009452:	3302      	adds	r3, #2
 8009454:	7011      	strb	r1, [r2, #0]
 8009456:	e7c1      	b.n	80093dc <_printf_common+0x4c>
 8009458:	0022      	movs	r2, r4
 800945a:	2301      	movs	r3, #1
 800945c:	9901      	ldr	r1, [sp, #4]
 800945e:	9800      	ldr	r0, [sp, #0]
 8009460:	9e08      	ldr	r6, [sp, #32]
 8009462:	321a      	adds	r2, #26
 8009464:	47b0      	blx	r6
 8009466:	1c43      	adds	r3, r0, #1
 8009468:	d0e6      	beq.n	8009438 <_printf_common+0xa8>
 800946a:	3701      	adds	r7, #1
 800946c:	e7d1      	b.n	8009412 <_printf_common+0x82>
	...

08009470 <_printf_i>:
 8009470:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009472:	b08b      	sub	sp, #44	; 0x2c
 8009474:	9206      	str	r2, [sp, #24]
 8009476:	000a      	movs	r2, r1
 8009478:	3243      	adds	r2, #67	; 0x43
 800947a:	9307      	str	r3, [sp, #28]
 800947c:	9005      	str	r0, [sp, #20]
 800947e:	9204      	str	r2, [sp, #16]
 8009480:	7e0a      	ldrb	r2, [r1, #24]
 8009482:	000c      	movs	r4, r1
 8009484:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8009486:	2a78      	cmp	r2, #120	; 0x78
 8009488:	d806      	bhi.n	8009498 <_printf_i+0x28>
 800948a:	2a62      	cmp	r2, #98	; 0x62
 800948c:	d808      	bhi.n	80094a0 <_printf_i+0x30>
 800948e:	2a00      	cmp	r2, #0
 8009490:	d100      	bne.n	8009494 <_printf_i+0x24>
 8009492:	e0c0      	b.n	8009616 <_printf_i+0x1a6>
 8009494:	2a58      	cmp	r2, #88	; 0x58
 8009496:	d052      	beq.n	800953e <_printf_i+0xce>
 8009498:	0026      	movs	r6, r4
 800949a:	3642      	adds	r6, #66	; 0x42
 800949c:	7032      	strb	r2, [r6, #0]
 800949e:	e022      	b.n	80094e6 <_printf_i+0x76>
 80094a0:	0010      	movs	r0, r2
 80094a2:	3863      	subs	r0, #99	; 0x63
 80094a4:	2815      	cmp	r0, #21
 80094a6:	d8f7      	bhi.n	8009498 <_printf_i+0x28>
 80094a8:	f7f6 fe40 	bl	800012c <__gnu_thumb1_case_shi>
 80094ac:	001f0016 	.word	0x001f0016
 80094b0:	fff6fff6 	.word	0xfff6fff6
 80094b4:	fff6fff6 	.word	0xfff6fff6
 80094b8:	fff6001f 	.word	0xfff6001f
 80094bc:	fff6fff6 	.word	0xfff6fff6
 80094c0:	00a8fff6 	.word	0x00a8fff6
 80094c4:	009a0036 	.word	0x009a0036
 80094c8:	fff6fff6 	.word	0xfff6fff6
 80094cc:	fff600b9 	.word	0xfff600b9
 80094d0:	fff60036 	.word	0xfff60036
 80094d4:	009efff6 	.word	0x009efff6
 80094d8:	0026      	movs	r6, r4
 80094da:	681a      	ldr	r2, [r3, #0]
 80094dc:	3642      	adds	r6, #66	; 0x42
 80094de:	1d11      	adds	r1, r2, #4
 80094e0:	6019      	str	r1, [r3, #0]
 80094e2:	6813      	ldr	r3, [r2, #0]
 80094e4:	7033      	strb	r3, [r6, #0]
 80094e6:	2301      	movs	r3, #1
 80094e8:	e0a7      	b.n	800963a <_printf_i+0x1ca>
 80094ea:	6808      	ldr	r0, [r1, #0]
 80094ec:	6819      	ldr	r1, [r3, #0]
 80094ee:	1d0a      	adds	r2, r1, #4
 80094f0:	0605      	lsls	r5, r0, #24
 80094f2:	d50b      	bpl.n	800950c <_printf_i+0x9c>
 80094f4:	680d      	ldr	r5, [r1, #0]
 80094f6:	601a      	str	r2, [r3, #0]
 80094f8:	2d00      	cmp	r5, #0
 80094fa:	da03      	bge.n	8009504 <_printf_i+0x94>
 80094fc:	232d      	movs	r3, #45	; 0x2d
 80094fe:	9a04      	ldr	r2, [sp, #16]
 8009500:	426d      	negs	r5, r5
 8009502:	7013      	strb	r3, [r2, #0]
 8009504:	4b61      	ldr	r3, [pc, #388]	; (800968c <_printf_i+0x21c>)
 8009506:	270a      	movs	r7, #10
 8009508:	9303      	str	r3, [sp, #12]
 800950a:	e032      	b.n	8009572 <_printf_i+0x102>
 800950c:	680d      	ldr	r5, [r1, #0]
 800950e:	601a      	str	r2, [r3, #0]
 8009510:	0641      	lsls	r1, r0, #25
 8009512:	d5f1      	bpl.n	80094f8 <_printf_i+0x88>
 8009514:	b22d      	sxth	r5, r5
 8009516:	e7ef      	b.n	80094f8 <_printf_i+0x88>
 8009518:	680d      	ldr	r5, [r1, #0]
 800951a:	6819      	ldr	r1, [r3, #0]
 800951c:	1d08      	adds	r0, r1, #4
 800951e:	6018      	str	r0, [r3, #0]
 8009520:	062e      	lsls	r6, r5, #24
 8009522:	d501      	bpl.n	8009528 <_printf_i+0xb8>
 8009524:	680d      	ldr	r5, [r1, #0]
 8009526:	e003      	b.n	8009530 <_printf_i+0xc0>
 8009528:	066d      	lsls	r5, r5, #25
 800952a:	d5fb      	bpl.n	8009524 <_printf_i+0xb4>
 800952c:	680d      	ldr	r5, [r1, #0]
 800952e:	b2ad      	uxth	r5, r5
 8009530:	4b56      	ldr	r3, [pc, #344]	; (800968c <_printf_i+0x21c>)
 8009532:	270a      	movs	r7, #10
 8009534:	9303      	str	r3, [sp, #12]
 8009536:	2a6f      	cmp	r2, #111	; 0x6f
 8009538:	d117      	bne.n	800956a <_printf_i+0xfa>
 800953a:	2708      	movs	r7, #8
 800953c:	e015      	b.n	800956a <_printf_i+0xfa>
 800953e:	3145      	adds	r1, #69	; 0x45
 8009540:	700a      	strb	r2, [r1, #0]
 8009542:	4a52      	ldr	r2, [pc, #328]	; (800968c <_printf_i+0x21c>)
 8009544:	9203      	str	r2, [sp, #12]
 8009546:	681a      	ldr	r2, [r3, #0]
 8009548:	6821      	ldr	r1, [r4, #0]
 800954a:	ca20      	ldmia	r2!, {r5}
 800954c:	601a      	str	r2, [r3, #0]
 800954e:	0608      	lsls	r0, r1, #24
 8009550:	d550      	bpl.n	80095f4 <_printf_i+0x184>
 8009552:	07cb      	lsls	r3, r1, #31
 8009554:	d502      	bpl.n	800955c <_printf_i+0xec>
 8009556:	2320      	movs	r3, #32
 8009558:	4319      	orrs	r1, r3
 800955a:	6021      	str	r1, [r4, #0]
 800955c:	2710      	movs	r7, #16
 800955e:	2d00      	cmp	r5, #0
 8009560:	d103      	bne.n	800956a <_printf_i+0xfa>
 8009562:	2320      	movs	r3, #32
 8009564:	6822      	ldr	r2, [r4, #0]
 8009566:	439a      	bics	r2, r3
 8009568:	6022      	str	r2, [r4, #0]
 800956a:	0023      	movs	r3, r4
 800956c:	2200      	movs	r2, #0
 800956e:	3343      	adds	r3, #67	; 0x43
 8009570:	701a      	strb	r2, [r3, #0]
 8009572:	6863      	ldr	r3, [r4, #4]
 8009574:	60a3      	str	r3, [r4, #8]
 8009576:	2b00      	cmp	r3, #0
 8009578:	db03      	blt.n	8009582 <_printf_i+0x112>
 800957a:	2204      	movs	r2, #4
 800957c:	6821      	ldr	r1, [r4, #0]
 800957e:	4391      	bics	r1, r2
 8009580:	6021      	str	r1, [r4, #0]
 8009582:	2d00      	cmp	r5, #0
 8009584:	d102      	bne.n	800958c <_printf_i+0x11c>
 8009586:	9e04      	ldr	r6, [sp, #16]
 8009588:	2b00      	cmp	r3, #0
 800958a:	d00c      	beq.n	80095a6 <_printf_i+0x136>
 800958c:	9e04      	ldr	r6, [sp, #16]
 800958e:	0028      	movs	r0, r5
 8009590:	0039      	movs	r1, r7
 8009592:	f7f6 fe5b 	bl	800024c <__aeabi_uidivmod>
 8009596:	9b03      	ldr	r3, [sp, #12]
 8009598:	3e01      	subs	r6, #1
 800959a:	5c5b      	ldrb	r3, [r3, r1]
 800959c:	7033      	strb	r3, [r6, #0]
 800959e:	002b      	movs	r3, r5
 80095a0:	0005      	movs	r5, r0
 80095a2:	429f      	cmp	r7, r3
 80095a4:	d9f3      	bls.n	800958e <_printf_i+0x11e>
 80095a6:	2f08      	cmp	r7, #8
 80095a8:	d109      	bne.n	80095be <_printf_i+0x14e>
 80095aa:	6823      	ldr	r3, [r4, #0]
 80095ac:	07db      	lsls	r3, r3, #31
 80095ae:	d506      	bpl.n	80095be <_printf_i+0x14e>
 80095b0:	6863      	ldr	r3, [r4, #4]
 80095b2:	6922      	ldr	r2, [r4, #16]
 80095b4:	4293      	cmp	r3, r2
 80095b6:	dc02      	bgt.n	80095be <_printf_i+0x14e>
 80095b8:	2330      	movs	r3, #48	; 0x30
 80095ba:	3e01      	subs	r6, #1
 80095bc:	7033      	strb	r3, [r6, #0]
 80095be:	9b04      	ldr	r3, [sp, #16]
 80095c0:	1b9b      	subs	r3, r3, r6
 80095c2:	6123      	str	r3, [r4, #16]
 80095c4:	9b07      	ldr	r3, [sp, #28]
 80095c6:	0021      	movs	r1, r4
 80095c8:	9300      	str	r3, [sp, #0]
 80095ca:	9805      	ldr	r0, [sp, #20]
 80095cc:	9b06      	ldr	r3, [sp, #24]
 80095ce:	aa09      	add	r2, sp, #36	; 0x24
 80095d0:	f7ff fede 	bl	8009390 <_printf_common>
 80095d4:	1c43      	adds	r3, r0, #1
 80095d6:	d135      	bne.n	8009644 <_printf_i+0x1d4>
 80095d8:	2001      	movs	r0, #1
 80095da:	4240      	negs	r0, r0
 80095dc:	b00b      	add	sp, #44	; 0x2c
 80095de:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80095e0:	2220      	movs	r2, #32
 80095e2:	6809      	ldr	r1, [r1, #0]
 80095e4:	430a      	orrs	r2, r1
 80095e6:	6022      	str	r2, [r4, #0]
 80095e8:	0022      	movs	r2, r4
 80095ea:	2178      	movs	r1, #120	; 0x78
 80095ec:	3245      	adds	r2, #69	; 0x45
 80095ee:	7011      	strb	r1, [r2, #0]
 80095f0:	4a27      	ldr	r2, [pc, #156]	; (8009690 <_printf_i+0x220>)
 80095f2:	e7a7      	b.n	8009544 <_printf_i+0xd4>
 80095f4:	0648      	lsls	r0, r1, #25
 80095f6:	d5ac      	bpl.n	8009552 <_printf_i+0xe2>
 80095f8:	b2ad      	uxth	r5, r5
 80095fa:	e7aa      	b.n	8009552 <_printf_i+0xe2>
 80095fc:	681a      	ldr	r2, [r3, #0]
 80095fe:	680d      	ldr	r5, [r1, #0]
 8009600:	1d10      	adds	r0, r2, #4
 8009602:	6949      	ldr	r1, [r1, #20]
 8009604:	6018      	str	r0, [r3, #0]
 8009606:	6813      	ldr	r3, [r2, #0]
 8009608:	062e      	lsls	r6, r5, #24
 800960a:	d501      	bpl.n	8009610 <_printf_i+0x1a0>
 800960c:	6019      	str	r1, [r3, #0]
 800960e:	e002      	b.n	8009616 <_printf_i+0x1a6>
 8009610:	066d      	lsls	r5, r5, #25
 8009612:	d5fb      	bpl.n	800960c <_printf_i+0x19c>
 8009614:	8019      	strh	r1, [r3, #0]
 8009616:	2300      	movs	r3, #0
 8009618:	9e04      	ldr	r6, [sp, #16]
 800961a:	6123      	str	r3, [r4, #16]
 800961c:	e7d2      	b.n	80095c4 <_printf_i+0x154>
 800961e:	681a      	ldr	r2, [r3, #0]
 8009620:	1d11      	adds	r1, r2, #4
 8009622:	6019      	str	r1, [r3, #0]
 8009624:	6816      	ldr	r6, [r2, #0]
 8009626:	2100      	movs	r1, #0
 8009628:	0030      	movs	r0, r6
 800962a:	6862      	ldr	r2, [r4, #4]
 800962c:	f000 f8a0 	bl	8009770 <memchr>
 8009630:	2800      	cmp	r0, #0
 8009632:	d001      	beq.n	8009638 <_printf_i+0x1c8>
 8009634:	1b80      	subs	r0, r0, r6
 8009636:	6060      	str	r0, [r4, #4]
 8009638:	6863      	ldr	r3, [r4, #4]
 800963a:	6123      	str	r3, [r4, #16]
 800963c:	2300      	movs	r3, #0
 800963e:	9a04      	ldr	r2, [sp, #16]
 8009640:	7013      	strb	r3, [r2, #0]
 8009642:	e7bf      	b.n	80095c4 <_printf_i+0x154>
 8009644:	6923      	ldr	r3, [r4, #16]
 8009646:	0032      	movs	r2, r6
 8009648:	9906      	ldr	r1, [sp, #24]
 800964a:	9805      	ldr	r0, [sp, #20]
 800964c:	9d07      	ldr	r5, [sp, #28]
 800964e:	47a8      	blx	r5
 8009650:	1c43      	adds	r3, r0, #1
 8009652:	d0c1      	beq.n	80095d8 <_printf_i+0x168>
 8009654:	6823      	ldr	r3, [r4, #0]
 8009656:	079b      	lsls	r3, r3, #30
 8009658:	d415      	bmi.n	8009686 <_printf_i+0x216>
 800965a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800965c:	68e0      	ldr	r0, [r4, #12]
 800965e:	4298      	cmp	r0, r3
 8009660:	dabc      	bge.n	80095dc <_printf_i+0x16c>
 8009662:	0018      	movs	r0, r3
 8009664:	e7ba      	b.n	80095dc <_printf_i+0x16c>
 8009666:	0022      	movs	r2, r4
 8009668:	2301      	movs	r3, #1
 800966a:	9906      	ldr	r1, [sp, #24]
 800966c:	9805      	ldr	r0, [sp, #20]
 800966e:	9e07      	ldr	r6, [sp, #28]
 8009670:	3219      	adds	r2, #25
 8009672:	47b0      	blx	r6
 8009674:	1c43      	adds	r3, r0, #1
 8009676:	d0af      	beq.n	80095d8 <_printf_i+0x168>
 8009678:	3501      	adds	r5, #1
 800967a:	68e3      	ldr	r3, [r4, #12]
 800967c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800967e:	1a9b      	subs	r3, r3, r2
 8009680:	42ab      	cmp	r3, r5
 8009682:	dcf0      	bgt.n	8009666 <_printf_i+0x1f6>
 8009684:	e7e9      	b.n	800965a <_printf_i+0x1ea>
 8009686:	2500      	movs	r5, #0
 8009688:	e7f7      	b.n	800967a <_printf_i+0x20a>
 800968a:	46c0      	nop			; (mov r8, r8)
 800968c:	0800a7b5 	.word	0x0800a7b5
 8009690:	0800a7c6 	.word	0x0800a7c6

08009694 <nan>:
 8009694:	2000      	movs	r0, #0
 8009696:	4901      	ldr	r1, [pc, #4]	; (800969c <nan+0x8>)
 8009698:	4770      	bx	lr
 800969a:	46c0      	nop			; (mov r8, r8)
 800969c:	7ff80000 	.word	0x7ff80000

080096a0 <_sbrk_r>:
 80096a0:	2300      	movs	r3, #0
 80096a2:	b570      	push	{r4, r5, r6, lr}
 80096a4:	4d06      	ldr	r5, [pc, #24]	; (80096c0 <_sbrk_r+0x20>)
 80096a6:	0004      	movs	r4, r0
 80096a8:	0008      	movs	r0, r1
 80096aa:	602b      	str	r3, [r5, #0]
 80096ac:	f7fa fc04 	bl	8003eb8 <_sbrk>
 80096b0:	1c43      	adds	r3, r0, #1
 80096b2:	d103      	bne.n	80096bc <_sbrk_r+0x1c>
 80096b4:	682b      	ldr	r3, [r5, #0]
 80096b6:	2b00      	cmp	r3, #0
 80096b8:	d000      	beq.n	80096bc <_sbrk_r+0x1c>
 80096ba:	6023      	str	r3, [r4, #0]
 80096bc:	bd70      	pop	{r4, r5, r6, pc}
 80096be:	46c0      	nop			; (mov r8, r8)
 80096c0:	200006bc 	.word	0x200006bc

080096c4 <strncmp>:
 80096c4:	b530      	push	{r4, r5, lr}
 80096c6:	0005      	movs	r5, r0
 80096c8:	1e10      	subs	r0, r2, #0
 80096ca:	d00b      	beq.n	80096e4 <strncmp+0x20>
 80096cc:	2400      	movs	r4, #0
 80096ce:	3a01      	subs	r2, #1
 80096d0:	5d2b      	ldrb	r3, [r5, r4]
 80096d2:	5d08      	ldrb	r0, [r1, r4]
 80096d4:	4283      	cmp	r3, r0
 80096d6:	d104      	bne.n	80096e2 <strncmp+0x1e>
 80096d8:	4294      	cmp	r4, r2
 80096da:	d002      	beq.n	80096e2 <strncmp+0x1e>
 80096dc:	3401      	adds	r4, #1
 80096de:	2b00      	cmp	r3, #0
 80096e0:	d1f6      	bne.n	80096d0 <strncmp+0xc>
 80096e2:	1a18      	subs	r0, r3, r0
 80096e4:	bd30      	pop	{r4, r5, pc}

080096e6 <__ascii_wctomb>:
 80096e6:	0003      	movs	r3, r0
 80096e8:	1e08      	subs	r0, r1, #0
 80096ea:	d005      	beq.n	80096f8 <__ascii_wctomb+0x12>
 80096ec:	2aff      	cmp	r2, #255	; 0xff
 80096ee:	d904      	bls.n	80096fa <__ascii_wctomb+0x14>
 80096f0:	228a      	movs	r2, #138	; 0x8a
 80096f2:	2001      	movs	r0, #1
 80096f4:	601a      	str	r2, [r3, #0]
 80096f6:	4240      	negs	r0, r0
 80096f8:	4770      	bx	lr
 80096fa:	2001      	movs	r0, #1
 80096fc:	700a      	strb	r2, [r1, #0]
 80096fe:	e7fb      	b.n	80096f8 <__ascii_wctomb+0x12>

08009700 <__assert_func>:
 8009700:	b530      	push	{r4, r5, lr}
 8009702:	0014      	movs	r4, r2
 8009704:	001a      	movs	r2, r3
 8009706:	4b09      	ldr	r3, [pc, #36]	; (800972c <__assert_func+0x2c>)
 8009708:	0005      	movs	r5, r0
 800970a:	681b      	ldr	r3, [r3, #0]
 800970c:	b085      	sub	sp, #20
 800970e:	68d8      	ldr	r0, [r3, #12]
 8009710:	4b07      	ldr	r3, [pc, #28]	; (8009730 <__assert_func+0x30>)
 8009712:	2c00      	cmp	r4, #0
 8009714:	d101      	bne.n	800971a <__assert_func+0x1a>
 8009716:	4b07      	ldr	r3, [pc, #28]	; (8009734 <__assert_func+0x34>)
 8009718:	001c      	movs	r4, r3
 800971a:	9301      	str	r3, [sp, #4]
 800971c:	9100      	str	r1, [sp, #0]
 800971e:	002b      	movs	r3, r5
 8009720:	4905      	ldr	r1, [pc, #20]	; (8009738 <__assert_func+0x38>)
 8009722:	9402      	str	r4, [sp, #8]
 8009724:	f000 f80a 	bl	800973c <fiprintf>
 8009728:	f000 faf0 	bl	8009d0c <abort>
 800972c:	2000000c 	.word	0x2000000c
 8009730:	0800a7d7 	.word	0x0800a7d7
 8009734:	0800a812 	.word	0x0800a812
 8009738:	0800a7e4 	.word	0x0800a7e4

0800973c <fiprintf>:
 800973c:	b40e      	push	{r1, r2, r3}
 800973e:	b503      	push	{r0, r1, lr}
 8009740:	0001      	movs	r1, r0
 8009742:	ab03      	add	r3, sp, #12
 8009744:	4804      	ldr	r0, [pc, #16]	; (8009758 <fiprintf+0x1c>)
 8009746:	cb04      	ldmia	r3!, {r2}
 8009748:	6800      	ldr	r0, [r0, #0]
 800974a:	9301      	str	r3, [sp, #4]
 800974c:	f000 f8d6 	bl	80098fc <_vfiprintf_r>
 8009750:	b002      	add	sp, #8
 8009752:	bc08      	pop	{r3}
 8009754:	b003      	add	sp, #12
 8009756:	4718      	bx	r3
 8009758:	2000000c 	.word	0x2000000c

0800975c <malloc>:
 800975c:	b510      	push	{r4, lr}
 800975e:	4b03      	ldr	r3, [pc, #12]	; (800976c <malloc+0x10>)
 8009760:	0001      	movs	r1, r0
 8009762:	6818      	ldr	r0, [r3, #0]
 8009764:	f7ff fc54 	bl	8009010 <_malloc_r>
 8009768:	bd10      	pop	{r4, pc}
 800976a:	46c0      	nop			; (mov r8, r8)
 800976c:	2000000c 	.word	0x2000000c

08009770 <memchr>:
 8009770:	b2c9      	uxtb	r1, r1
 8009772:	1882      	adds	r2, r0, r2
 8009774:	4290      	cmp	r0, r2
 8009776:	d101      	bne.n	800977c <memchr+0xc>
 8009778:	2000      	movs	r0, #0
 800977a:	4770      	bx	lr
 800977c:	7803      	ldrb	r3, [r0, #0]
 800977e:	428b      	cmp	r3, r1
 8009780:	d0fb      	beq.n	800977a <memchr+0xa>
 8009782:	3001      	adds	r0, #1
 8009784:	e7f6      	b.n	8009774 <memchr+0x4>

08009786 <memmove>:
 8009786:	b510      	push	{r4, lr}
 8009788:	4288      	cmp	r0, r1
 800978a:	d902      	bls.n	8009792 <memmove+0xc>
 800978c:	188b      	adds	r3, r1, r2
 800978e:	4298      	cmp	r0, r3
 8009790:	d303      	bcc.n	800979a <memmove+0x14>
 8009792:	2300      	movs	r3, #0
 8009794:	e007      	b.n	80097a6 <memmove+0x20>
 8009796:	5c8b      	ldrb	r3, [r1, r2]
 8009798:	5483      	strb	r3, [r0, r2]
 800979a:	3a01      	subs	r2, #1
 800979c:	d2fb      	bcs.n	8009796 <memmove+0x10>
 800979e:	bd10      	pop	{r4, pc}
 80097a0:	5ccc      	ldrb	r4, [r1, r3]
 80097a2:	54c4      	strb	r4, [r0, r3]
 80097a4:	3301      	adds	r3, #1
 80097a6:	429a      	cmp	r2, r3
 80097a8:	d1fa      	bne.n	80097a0 <memmove+0x1a>
 80097aa:	e7f8      	b.n	800979e <memmove+0x18>

080097ac <__malloc_lock>:
 80097ac:	b510      	push	{r4, lr}
 80097ae:	4802      	ldr	r0, [pc, #8]	; (80097b8 <__malloc_lock+0xc>)
 80097b0:	f000 fc83 	bl	800a0ba <__retarget_lock_acquire_recursive>
 80097b4:	bd10      	pop	{r4, pc}
 80097b6:	46c0      	nop			; (mov r8, r8)
 80097b8:	200006c4 	.word	0x200006c4

080097bc <__malloc_unlock>:
 80097bc:	b510      	push	{r4, lr}
 80097be:	4802      	ldr	r0, [pc, #8]	; (80097c8 <__malloc_unlock+0xc>)
 80097c0:	f000 fc7c 	bl	800a0bc <__retarget_lock_release_recursive>
 80097c4:	bd10      	pop	{r4, pc}
 80097c6:	46c0      	nop			; (mov r8, r8)
 80097c8:	200006c4 	.word	0x200006c4

080097cc <_free_r>:
 80097cc:	b570      	push	{r4, r5, r6, lr}
 80097ce:	0005      	movs	r5, r0
 80097d0:	2900      	cmp	r1, #0
 80097d2:	d010      	beq.n	80097f6 <_free_r+0x2a>
 80097d4:	1f0c      	subs	r4, r1, #4
 80097d6:	6823      	ldr	r3, [r4, #0]
 80097d8:	2b00      	cmp	r3, #0
 80097da:	da00      	bge.n	80097de <_free_r+0x12>
 80097dc:	18e4      	adds	r4, r4, r3
 80097de:	0028      	movs	r0, r5
 80097e0:	f7ff ffe4 	bl	80097ac <__malloc_lock>
 80097e4:	4a1d      	ldr	r2, [pc, #116]	; (800985c <_free_r+0x90>)
 80097e6:	6813      	ldr	r3, [r2, #0]
 80097e8:	2b00      	cmp	r3, #0
 80097ea:	d105      	bne.n	80097f8 <_free_r+0x2c>
 80097ec:	6063      	str	r3, [r4, #4]
 80097ee:	6014      	str	r4, [r2, #0]
 80097f0:	0028      	movs	r0, r5
 80097f2:	f7ff ffe3 	bl	80097bc <__malloc_unlock>
 80097f6:	bd70      	pop	{r4, r5, r6, pc}
 80097f8:	42a3      	cmp	r3, r4
 80097fa:	d908      	bls.n	800980e <_free_r+0x42>
 80097fc:	6821      	ldr	r1, [r4, #0]
 80097fe:	1860      	adds	r0, r4, r1
 8009800:	4283      	cmp	r3, r0
 8009802:	d1f3      	bne.n	80097ec <_free_r+0x20>
 8009804:	6818      	ldr	r0, [r3, #0]
 8009806:	685b      	ldr	r3, [r3, #4]
 8009808:	1841      	adds	r1, r0, r1
 800980a:	6021      	str	r1, [r4, #0]
 800980c:	e7ee      	b.n	80097ec <_free_r+0x20>
 800980e:	001a      	movs	r2, r3
 8009810:	685b      	ldr	r3, [r3, #4]
 8009812:	2b00      	cmp	r3, #0
 8009814:	d001      	beq.n	800981a <_free_r+0x4e>
 8009816:	42a3      	cmp	r3, r4
 8009818:	d9f9      	bls.n	800980e <_free_r+0x42>
 800981a:	6811      	ldr	r1, [r2, #0]
 800981c:	1850      	adds	r0, r2, r1
 800981e:	42a0      	cmp	r0, r4
 8009820:	d10b      	bne.n	800983a <_free_r+0x6e>
 8009822:	6820      	ldr	r0, [r4, #0]
 8009824:	1809      	adds	r1, r1, r0
 8009826:	1850      	adds	r0, r2, r1
 8009828:	6011      	str	r1, [r2, #0]
 800982a:	4283      	cmp	r3, r0
 800982c:	d1e0      	bne.n	80097f0 <_free_r+0x24>
 800982e:	6818      	ldr	r0, [r3, #0]
 8009830:	685b      	ldr	r3, [r3, #4]
 8009832:	1841      	adds	r1, r0, r1
 8009834:	6011      	str	r1, [r2, #0]
 8009836:	6053      	str	r3, [r2, #4]
 8009838:	e7da      	b.n	80097f0 <_free_r+0x24>
 800983a:	42a0      	cmp	r0, r4
 800983c:	d902      	bls.n	8009844 <_free_r+0x78>
 800983e:	230c      	movs	r3, #12
 8009840:	602b      	str	r3, [r5, #0]
 8009842:	e7d5      	b.n	80097f0 <_free_r+0x24>
 8009844:	6821      	ldr	r1, [r4, #0]
 8009846:	1860      	adds	r0, r4, r1
 8009848:	4283      	cmp	r3, r0
 800984a:	d103      	bne.n	8009854 <_free_r+0x88>
 800984c:	6818      	ldr	r0, [r3, #0]
 800984e:	685b      	ldr	r3, [r3, #4]
 8009850:	1841      	adds	r1, r0, r1
 8009852:	6021      	str	r1, [r4, #0]
 8009854:	6063      	str	r3, [r4, #4]
 8009856:	6054      	str	r4, [r2, #4]
 8009858:	e7ca      	b.n	80097f0 <_free_r+0x24>
 800985a:	46c0      	nop			; (mov r8, r8)
 800985c:	20000204 	.word	0x20000204

08009860 <_realloc_r>:
 8009860:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009862:	0007      	movs	r7, r0
 8009864:	000d      	movs	r5, r1
 8009866:	0016      	movs	r6, r2
 8009868:	2900      	cmp	r1, #0
 800986a:	d105      	bne.n	8009878 <_realloc_r+0x18>
 800986c:	0011      	movs	r1, r2
 800986e:	f7ff fbcf 	bl	8009010 <_malloc_r>
 8009872:	0004      	movs	r4, r0
 8009874:	0020      	movs	r0, r4
 8009876:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009878:	2a00      	cmp	r2, #0
 800987a:	d103      	bne.n	8009884 <_realloc_r+0x24>
 800987c:	f7ff ffa6 	bl	80097cc <_free_r>
 8009880:	0034      	movs	r4, r6
 8009882:	e7f7      	b.n	8009874 <_realloc_r+0x14>
 8009884:	f000 fc88 	bl	800a198 <_malloc_usable_size_r>
 8009888:	002c      	movs	r4, r5
 800988a:	42b0      	cmp	r0, r6
 800988c:	d2f2      	bcs.n	8009874 <_realloc_r+0x14>
 800988e:	0031      	movs	r1, r6
 8009890:	0038      	movs	r0, r7
 8009892:	f7ff fbbd 	bl	8009010 <_malloc_r>
 8009896:	1e04      	subs	r4, r0, #0
 8009898:	d0ec      	beq.n	8009874 <_realloc_r+0x14>
 800989a:	0029      	movs	r1, r5
 800989c:	0032      	movs	r2, r6
 800989e:	f7fd fcdf 	bl	8007260 <memcpy>
 80098a2:	0029      	movs	r1, r5
 80098a4:	0038      	movs	r0, r7
 80098a6:	f7ff ff91 	bl	80097cc <_free_r>
 80098aa:	e7e3      	b.n	8009874 <_realloc_r+0x14>

080098ac <__sfputc_r>:
 80098ac:	6893      	ldr	r3, [r2, #8]
 80098ae:	b510      	push	{r4, lr}
 80098b0:	3b01      	subs	r3, #1
 80098b2:	6093      	str	r3, [r2, #8]
 80098b4:	2b00      	cmp	r3, #0
 80098b6:	da04      	bge.n	80098c2 <__sfputc_r+0x16>
 80098b8:	6994      	ldr	r4, [r2, #24]
 80098ba:	42a3      	cmp	r3, r4
 80098bc:	db07      	blt.n	80098ce <__sfputc_r+0x22>
 80098be:	290a      	cmp	r1, #10
 80098c0:	d005      	beq.n	80098ce <__sfputc_r+0x22>
 80098c2:	6813      	ldr	r3, [r2, #0]
 80098c4:	1c58      	adds	r0, r3, #1
 80098c6:	6010      	str	r0, [r2, #0]
 80098c8:	7019      	strb	r1, [r3, #0]
 80098ca:	0008      	movs	r0, r1
 80098cc:	bd10      	pop	{r4, pc}
 80098ce:	f000 f94f 	bl	8009b70 <__swbuf_r>
 80098d2:	0001      	movs	r1, r0
 80098d4:	e7f9      	b.n	80098ca <__sfputc_r+0x1e>

080098d6 <__sfputs_r>:
 80098d6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80098d8:	0006      	movs	r6, r0
 80098da:	000f      	movs	r7, r1
 80098dc:	0014      	movs	r4, r2
 80098de:	18d5      	adds	r5, r2, r3
 80098e0:	42ac      	cmp	r4, r5
 80098e2:	d101      	bne.n	80098e8 <__sfputs_r+0x12>
 80098e4:	2000      	movs	r0, #0
 80098e6:	e007      	b.n	80098f8 <__sfputs_r+0x22>
 80098e8:	7821      	ldrb	r1, [r4, #0]
 80098ea:	003a      	movs	r2, r7
 80098ec:	0030      	movs	r0, r6
 80098ee:	f7ff ffdd 	bl	80098ac <__sfputc_r>
 80098f2:	3401      	adds	r4, #1
 80098f4:	1c43      	adds	r3, r0, #1
 80098f6:	d1f3      	bne.n	80098e0 <__sfputs_r+0xa>
 80098f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080098fc <_vfiprintf_r>:
 80098fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80098fe:	b0a1      	sub	sp, #132	; 0x84
 8009900:	0006      	movs	r6, r0
 8009902:	000c      	movs	r4, r1
 8009904:	001f      	movs	r7, r3
 8009906:	9203      	str	r2, [sp, #12]
 8009908:	2800      	cmp	r0, #0
 800990a:	d004      	beq.n	8009916 <_vfiprintf_r+0x1a>
 800990c:	6983      	ldr	r3, [r0, #24]
 800990e:	2b00      	cmp	r3, #0
 8009910:	d101      	bne.n	8009916 <_vfiprintf_r+0x1a>
 8009912:	f000 fb31 	bl	8009f78 <__sinit>
 8009916:	4b8e      	ldr	r3, [pc, #568]	; (8009b50 <_vfiprintf_r+0x254>)
 8009918:	429c      	cmp	r4, r3
 800991a:	d11c      	bne.n	8009956 <_vfiprintf_r+0x5a>
 800991c:	6874      	ldr	r4, [r6, #4]
 800991e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009920:	07db      	lsls	r3, r3, #31
 8009922:	d405      	bmi.n	8009930 <_vfiprintf_r+0x34>
 8009924:	89a3      	ldrh	r3, [r4, #12]
 8009926:	059b      	lsls	r3, r3, #22
 8009928:	d402      	bmi.n	8009930 <_vfiprintf_r+0x34>
 800992a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800992c:	f000 fbc5 	bl	800a0ba <__retarget_lock_acquire_recursive>
 8009930:	89a3      	ldrh	r3, [r4, #12]
 8009932:	071b      	lsls	r3, r3, #28
 8009934:	d502      	bpl.n	800993c <_vfiprintf_r+0x40>
 8009936:	6923      	ldr	r3, [r4, #16]
 8009938:	2b00      	cmp	r3, #0
 800993a:	d11d      	bne.n	8009978 <_vfiprintf_r+0x7c>
 800993c:	0021      	movs	r1, r4
 800993e:	0030      	movs	r0, r6
 8009940:	f000 f96c 	bl	8009c1c <__swsetup_r>
 8009944:	2800      	cmp	r0, #0
 8009946:	d017      	beq.n	8009978 <_vfiprintf_r+0x7c>
 8009948:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800994a:	07db      	lsls	r3, r3, #31
 800994c:	d50d      	bpl.n	800996a <_vfiprintf_r+0x6e>
 800994e:	2001      	movs	r0, #1
 8009950:	4240      	negs	r0, r0
 8009952:	b021      	add	sp, #132	; 0x84
 8009954:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009956:	4b7f      	ldr	r3, [pc, #508]	; (8009b54 <_vfiprintf_r+0x258>)
 8009958:	429c      	cmp	r4, r3
 800995a:	d101      	bne.n	8009960 <_vfiprintf_r+0x64>
 800995c:	68b4      	ldr	r4, [r6, #8]
 800995e:	e7de      	b.n	800991e <_vfiprintf_r+0x22>
 8009960:	4b7d      	ldr	r3, [pc, #500]	; (8009b58 <_vfiprintf_r+0x25c>)
 8009962:	429c      	cmp	r4, r3
 8009964:	d1db      	bne.n	800991e <_vfiprintf_r+0x22>
 8009966:	68f4      	ldr	r4, [r6, #12]
 8009968:	e7d9      	b.n	800991e <_vfiprintf_r+0x22>
 800996a:	89a3      	ldrh	r3, [r4, #12]
 800996c:	059b      	lsls	r3, r3, #22
 800996e:	d4ee      	bmi.n	800994e <_vfiprintf_r+0x52>
 8009970:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009972:	f000 fba3 	bl	800a0bc <__retarget_lock_release_recursive>
 8009976:	e7ea      	b.n	800994e <_vfiprintf_r+0x52>
 8009978:	2300      	movs	r3, #0
 800997a:	ad08      	add	r5, sp, #32
 800997c:	616b      	str	r3, [r5, #20]
 800997e:	3320      	adds	r3, #32
 8009980:	766b      	strb	r3, [r5, #25]
 8009982:	3310      	adds	r3, #16
 8009984:	76ab      	strb	r3, [r5, #26]
 8009986:	9707      	str	r7, [sp, #28]
 8009988:	9f03      	ldr	r7, [sp, #12]
 800998a:	783b      	ldrb	r3, [r7, #0]
 800998c:	2b00      	cmp	r3, #0
 800998e:	d001      	beq.n	8009994 <_vfiprintf_r+0x98>
 8009990:	2b25      	cmp	r3, #37	; 0x25
 8009992:	d14e      	bne.n	8009a32 <_vfiprintf_r+0x136>
 8009994:	9b03      	ldr	r3, [sp, #12]
 8009996:	1afb      	subs	r3, r7, r3
 8009998:	9305      	str	r3, [sp, #20]
 800999a:	9b03      	ldr	r3, [sp, #12]
 800999c:	429f      	cmp	r7, r3
 800999e:	d00d      	beq.n	80099bc <_vfiprintf_r+0xc0>
 80099a0:	9b05      	ldr	r3, [sp, #20]
 80099a2:	0021      	movs	r1, r4
 80099a4:	0030      	movs	r0, r6
 80099a6:	9a03      	ldr	r2, [sp, #12]
 80099a8:	f7ff ff95 	bl	80098d6 <__sfputs_r>
 80099ac:	1c43      	adds	r3, r0, #1
 80099ae:	d100      	bne.n	80099b2 <_vfiprintf_r+0xb6>
 80099b0:	e0b5      	b.n	8009b1e <_vfiprintf_r+0x222>
 80099b2:	696a      	ldr	r2, [r5, #20]
 80099b4:	9b05      	ldr	r3, [sp, #20]
 80099b6:	4694      	mov	ip, r2
 80099b8:	4463      	add	r3, ip
 80099ba:	616b      	str	r3, [r5, #20]
 80099bc:	783b      	ldrb	r3, [r7, #0]
 80099be:	2b00      	cmp	r3, #0
 80099c0:	d100      	bne.n	80099c4 <_vfiprintf_r+0xc8>
 80099c2:	e0ac      	b.n	8009b1e <_vfiprintf_r+0x222>
 80099c4:	2201      	movs	r2, #1
 80099c6:	1c7b      	adds	r3, r7, #1
 80099c8:	9303      	str	r3, [sp, #12]
 80099ca:	2300      	movs	r3, #0
 80099cc:	4252      	negs	r2, r2
 80099ce:	606a      	str	r2, [r5, #4]
 80099d0:	a904      	add	r1, sp, #16
 80099d2:	3254      	adds	r2, #84	; 0x54
 80099d4:	1852      	adds	r2, r2, r1
 80099d6:	602b      	str	r3, [r5, #0]
 80099d8:	60eb      	str	r3, [r5, #12]
 80099da:	60ab      	str	r3, [r5, #8]
 80099dc:	7013      	strb	r3, [r2, #0]
 80099de:	65ab      	str	r3, [r5, #88]	; 0x58
 80099e0:	9b03      	ldr	r3, [sp, #12]
 80099e2:	2205      	movs	r2, #5
 80099e4:	7819      	ldrb	r1, [r3, #0]
 80099e6:	485d      	ldr	r0, [pc, #372]	; (8009b5c <_vfiprintf_r+0x260>)
 80099e8:	f7ff fec2 	bl	8009770 <memchr>
 80099ec:	9b03      	ldr	r3, [sp, #12]
 80099ee:	1c5f      	adds	r7, r3, #1
 80099f0:	2800      	cmp	r0, #0
 80099f2:	d120      	bne.n	8009a36 <_vfiprintf_r+0x13a>
 80099f4:	682a      	ldr	r2, [r5, #0]
 80099f6:	06d3      	lsls	r3, r2, #27
 80099f8:	d504      	bpl.n	8009a04 <_vfiprintf_r+0x108>
 80099fa:	2353      	movs	r3, #83	; 0x53
 80099fc:	a904      	add	r1, sp, #16
 80099fe:	185b      	adds	r3, r3, r1
 8009a00:	2120      	movs	r1, #32
 8009a02:	7019      	strb	r1, [r3, #0]
 8009a04:	0713      	lsls	r3, r2, #28
 8009a06:	d504      	bpl.n	8009a12 <_vfiprintf_r+0x116>
 8009a08:	2353      	movs	r3, #83	; 0x53
 8009a0a:	a904      	add	r1, sp, #16
 8009a0c:	185b      	adds	r3, r3, r1
 8009a0e:	212b      	movs	r1, #43	; 0x2b
 8009a10:	7019      	strb	r1, [r3, #0]
 8009a12:	9b03      	ldr	r3, [sp, #12]
 8009a14:	781b      	ldrb	r3, [r3, #0]
 8009a16:	2b2a      	cmp	r3, #42	; 0x2a
 8009a18:	d016      	beq.n	8009a48 <_vfiprintf_r+0x14c>
 8009a1a:	2100      	movs	r1, #0
 8009a1c:	68eb      	ldr	r3, [r5, #12]
 8009a1e:	9f03      	ldr	r7, [sp, #12]
 8009a20:	783a      	ldrb	r2, [r7, #0]
 8009a22:	1c78      	adds	r0, r7, #1
 8009a24:	3a30      	subs	r2, #48	; 0x30
 8009a26:	4684      	mov	ip, r0
 8009a28:	2a09      	cmp	r2, #9
 8009a2a:	d94f      	bls.n	8009acc <_vfiprintf_r+0x1d0>
 8009a2c:	2900      	cmp	r1, #0
 8009a2e:	d111      	bne.n	8009a54 <_vfiprintf_r+0x158>
 8009a30:	e017      	b.n	8009a62 <_vfiprintf_r+0x166>
 8009a32:	3701      	adds	r7, #1
 8009a34:	e7a9      	b.n	800998a <_vfiprintf_r+0x8e>
 8009a36:	4b49      	ldr	r3, [pc, #292]	; (8009b5c <_vfiprintf_r+0x260>)
 8009a38:	682a      	ldr	r2, [r5, #0]
 8009a3a:	1ac0      	subs	r0, r0, r3
 8009a3c:	2301      	movs	r3, #1
 8009a3e:	4083      	lsls	r3, r0
 8009a40:	4313      	orrs	r3, r2
 8009a42:	602b      	str	r3, [r5, #0]
 8009a44:	9703      	str	r7, [sp, #12]
 8009a46:	e7cb      	b.n	80099e0 <_vfiprintf_r+0xe4>
 8009a48:	9b07      	ldr	r3, [sp, #28]
 8009a4a:	1d19      	adds	r1, r3, #4
 8009a4c:	681b      	ldr	r3, [r3, #0]
 8009a4e:	9107      	str	r1, [sp, #28]
 8009a50:	2b00      	cmp	r3, #0
 8009a52:	db01      	blt.n	8009a58 <_vfiprintf_r+0x15c>
 8009a54:	930b      	str	r3, [sp, #44]	; 0x2c
 8009a56:	e004      	b.n	8009a62 <_vfiprintf_r+0x166>
 8009a58:	425b      	negs	r3, r3
 8009a5a:	60eb      	str	r3, [r5, #12]
 8009a5c:	2302      	movs	r3, #2
 8009a5e:	4313      	orrs	r3, r2
 8009a60:	602b      	str	r3, [r5, #0]
 8009a62:	783b      	ldrb	r3, [r7, #0]
 8009a64:	2b2e      	cmp	r3, #46	; 0x2e
 8009a66:	d10a      	bne.n	8009a7e <_vfiprintf_r+0x182>
 8009a68:	787b      	ldrb	r3, [r7, #1]
 8009a6a:	2b2a      	cmp	r3, #42	; 0x2a
 8009a6c:	d137      	bne.n	8009ade <_vfiprintf_r+0x1e2>
 8009a6e:	9b07      	ldr	r3, [sp, #28]
 8009a70:	3702      	adds	r7, #2
 8009a72:	1d1a      	adds	r2, r3, #4
 8009a74:	681b      	ldr	r3, [r3, #0]
 8009a76:	9207      	str	r2, [sp, #28]
 8009a78:	2b00      	cmp	r3, #0
 8009a7a:	db2d      	blt.n	8009ad8 <_vfiprintf_r+0x1dc>
 8009a7c:	9309      	str	r3, [sp, #36]	; 0x24
 8009a7e:	2203      	movs	r2, #3
 8009a80:	7839      	ldrb	r1, [r7, #0]
 8009a82:	4837      	ldr	r0, [pc, #220]	; (8009b60 <_vfiprintf_r+0x264>)
 8009a84:	f7ff fe74 	bl	8009770 <memchr>
 8009a88:	2800      	cmp	r0, #0
 8009a8a:	d007      	beq.n	8009a9c <_vfiprintf_r+0x1a0>
 8009a8c:	4b34      	ldr	r3, [pc, #208]	; (8009b60 <_vfiprintf_r+0x264>)
 8009a8e:	682a      	ldr	r2, [r5, #0]
 8009a90:	1ac0      	subs	r0, r0, r3
 8009a92:	2340      	movs	r3, #64	; 0x40
 8009a94:	4083      	lsls	r3, r0
 8009a96:	4313      	orrs	r3, r2
 8009a98:	3701      	adds	r7, #1
 8009a9a:	602b      	str	r3, [r5, #0]
 8009a9c:	7839      	ldrb	r1, [r7, #0]
 8009a9e:	1c7b      	adds	r3, r7, #1
 8009aa0:	2206      	movs	r2, #6
 8009aa2:	4830      	ldr	r0, [pc, #192]	; (8009b64 <_vfiprintf_r+0x268>)
 8009aa4:	9303      	str	r3, [sp, #12]
 8009aa6:	7629      	strb	r1, [r5, #24]
 8009aa8:	f7ff fe62 	bl	8009770 <memchr>
 8009aac:	2800      	cmp	r0, #0
 8009aae:	d045      	beq.n	8009b3c <_vfiprintf_r+0x240>
 8009ab0:	4b2d      	ldr	r3, [pc, #180]	; (8009b68 <_vfiprintf_r+0x26c>)
 8009ab2:	2b00      	cmp	r3, #0
 8009ab4:	d127      	bne.n	8009b06 <_vfiprintf_r+0x20a>
 8009ab6:	2207      	movs	r2, #7
 8009ab8:	9b07      	ldr	r3, [sp, #28]
 8009aba:	3307      	adds	r3, #7
 8009abc:	4393      	bics	r3, r2
 8009abe:	3308      	adds	r3, #8
 8009ac0:	9307      	str	r3, [sp, #28]
 8009ac2:	696b      	ldr	r3, [r5, #20]
 8009ac4:	9a04      	ldr	r2, [sp, #16]
 8009ac6:	189b      	adds	r3, r3, r2
 8009ac8:	616b      	str	r3, [r5, #20]
 8009aca:	e75d      	b.n	8009988 <_vfiprintf_r+0x8c>
 8009acc:	210a      	movs	r1, #10
 8009ace:	434b      	muls	r3, r1
 8009ad0:	4667      	mov	r7, ip
 8009ad2:	189b      	adds	r3, r3, r2
 8009ad4:	3909      	subs	r1, #9
 8009ad6:	e7a3      	b.n	8009a20 <_vfiprintf_r+0x124>
 8009ad8:	2301      	movs	r3, #1
 8009ada:	425b      	negs	r3, r3
 8009adc:	e7ce      	b.n	8009a7c <_vfiprintf_r+0x180>
 8009ade:	2300      	movs	r3, #0
 8009ae0:	001a      	movs	r2, r3
 8009ae2:	3701      	adds	r7, #1
 8009ae4:	606b      	str	r3, [r5, #4]
 8009ae6:	7839      	ldrb	r1, [r7, #0]
 8009ae8:	1c78      	adds	r0, r7, #1
 8009aea:	3930      	subs	r1, #48	; 0x30
 8009aec:	4684      	mov	ip, r0
 8009aee:	2909      	cmp	r1, #9
 8009af0:	d903      	bls.n	8009afa <_vfiprintf_r+0x1fe>
 8009af2:	2b00      	cmp	r3, #0
 8009af4:	d0c3      	beq.n	8009a7e <_vfiprintf_r+0x182>
 8009af6:	9209      	str	r2, [sp, #36]	; 0x24
 8009af8:	e7c1      	b.n	8009a7e <_vfiprintf_r+0x182>
 8009afa:	230a      	movs	r3, #10
 8009afc:	435a      	muls	r2, r3
 8009afe:	4667      	mov	r7, ip
 8009b00:	1852      	adds	r2, r2, r1
 8009b02:	3b09      	subs	r3, #9
 8009b04:	e7ef      	b.n	8009ae6 <_vfiprintf_r+0x1ea>
 8009b06:	ab07      	add	r3, sp, #28
 8009b08:	9300      	str	r3, [sp, #0]
 8009b0a:	0022      	movs	r2, r4
 8009b0c:	0029      	movs	r1, r5
 8009b0e:	0030      	movs	r0, r6
 8009b10:	4b16      	ldr	r3, [pc, #88]	; (8009b6c <_vfiprintf_r+0x270>)
 8009b12:	e000      	b.n	8009b16 <_vfiprintf_r+0x21a>
 8009b14:	bf00      	nop
 8009b16:	9004      	str	r0, [sp, #16]
 8009b18:	9b04      	ldr	r3, [sp, #16]
 8009b1a:	3301      	adds	r3, #1
 8009b1c:	d1d1      	bne.n	8009ac2 <_vfiprintf_r+0x1c6>
 8009b1e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009b20:	07db      	lsls	r3, r3, #31
 8009b22:	d405      	bmi.n	8009b30 <_vfiprintf_r+0x234>
 8009b24:	89a3      	ldrh	r3, [r4, #12]
 8009b26:	059b      	lsls	r3, r3, #22
 8009b28:	d402      	bmi.n	8009b30 <_vfiprintf_r+0x234>
 8009b2a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009b2c:	f000 fac6 	bl	800a0bc <__retarget_lock_release_recursive>
 8009b30:	89a3      	ldrh	r3, [r4, #12]
 8009b32:	065b      	lsls	r3, r3, #25
 8009b34:	d500      	bpl.n	8009b38 <_vfiprintf_r+0x23c>
 8009b36:	e70a      	b.n	800994e <_vfiprintf_r+0x52>
 8009b38:	980d      	ldr	r0, [sp, #52]	; 0x34
 8009b3a:	e70a      	b.n	8009952 <_vfiprintf_r+0x56>
 8009b3c:	ab07      	add	r3, sp, #28
 8009b3e:	9300      	str	r3, [sp, #0]
 8009b40:	0022      	movs	r2, r4
 8009b42:	0029      	movs	r1, r5
 8009b44:	0030      	movs	r0, r6
 8009b46:	4b09      	ldr	r3, [pc, #36]	; (8009b6c <_vfiprintf_r+0x270>)
 8009b48:	f7ff fc92 	bl	8009470 <_printf_i>
 8009b4c:	e7e3      	b.n	8009b16 <_vfiprintf_r+0x21a>
 8009b4e:	46c0      	nop			; (mov r8, r8)
 8009b50:	0800a934 	.word	0x0800a934
 8009b54:	0800a954 	.word	0x0800a954
 8009b58:	0800a914 	.word	0x0800a914
 8009b5c:	0800a7a4 	.word	0x0800a7a4
 8009b60:	0800a7aa 	.word	0x0800a7aa
 8009b64:	0800a7ae 	.word	0x0800a7ae
 8009b68:	00000000 	.word	0x00000000
 8009b6c:	080098d7 	.word	0x080098d7

08009b70 <__swbuf_r>:
 8009b70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009b72:	0005      	movs	r5, r0
 8009b74:	000e      	movs	r6, r1
 8009b76:	0014      	movs	r4, r2
 8009b78:	2800      	cmp	r0, #0
 8009b7a:	d004      	beq.n	8009b86 <__swbuf_r+0x16>
 8009b7c:	6983      	ldr	r3, [r0, #24]
 8009b7e:	2b00      	cmp	r3, #0
 8009b80:	d101      	bne.n	8009b86 <__swbuf_r+0x16>
 8009b82:	f000 f9f9 	bl	8009f78 <__sinit>
 8009b86:	4b22      	ldr	r3, [pc, #136]	; (8009c10 <__swbuf_r+0xa0>)
 8009b88:	429c      	cmp	r4, r3
 8009b8a:	d12e      	bne.n	8009bea <__swbuf_r+0x7a>
 8009b8c:	686c      	ldr	r4, [r5, #4]
 8009b8e:	69a3      	ldr	r3, [r4, #24]
 8009b90:	60a3      	str	r3, [r4, #8]
 8009b92:	89a3      	ldrh	r3, [r4, #12]
 8009b94:	071b      	lsls	r3, r3, #28
 8009b96:	d532      	bpl.n	8009bfe <__swbuf_r+0x8e>
 8009b98:	6923      	ldr	r3, [r4, #16]
 8009b9a:	2b00      	cmp	r3, #0
 8009b9c:	d02f      	beq.n	8009bfe <__swbuf_r+0x8e>
 8009b9e:	6823      	ldr	r3, [r4, #0]
 8009ba0:	6922      	ldr	r2, [r4, #16]
 8009ba2:	b2f7      	uxtb	r7, r6
 8009ba4:	1a98      	subs	r0, r3, r2
 8009ba6:	6963      	ldr	r3, [r4, #20]
 8009ba8:	b2f6      	uxtb	r6, r6
 8009baa:	4283      	cmp	r3, r0
 8009bac:	dc05      	bgt.n	8009bba <__swbuf_r+0x4a>
 8009bae:	0021      	movs	r1, r4
 8009bb0:	0028      	movs	r0, r5
 8009bb2:	f000 f93f 	bl	8009e34 <_fflush_r>
 8009bb6:	2800      	cmp	r0, #0
 8009bb8:	d127      	bne.n	8009c0a <__swbuf_r+0x9a>
 8009bba:	68a3      	ldr	r3, [r4, #8]
 8009bbc:	3001      	adds	r0, #1
 8009bbe:	3b01      	subs	r3, #1
 8009bc0:	60a3      	str	r3, [r4, #8]
 8009bc2:	6823      	ldr	r3, [r4, #0]
 8009bc4:	1c5a      	adds	r2, r3, #1
 8009bc6:	6022      	str	r2, [r4, #0]
 8009bc8:	701f      	strb	r7, [r3, #0]
 8009bca:	6963      	ldr	r3, [r4, #20]
 8009bcc:	4283      	cmp	r3, r0
 8009bce:	d004      	beq.n	8009bda <__swbuf_r+0x6a>
 8009bd0:	89a3      	ldrh	r3, [r4, #12]
 8009bd2:	07db      	lsls	r3, r3, #31
 8009bd4:	d507      	bpl.n	8009be6 <__swbuf_r+0x76>
 8009bd6:	2e0a      	cmp	r6, #10
 8009bd8:	d105      	bne.n	8009be6 <__swbuf_r+0x76>
 8009bda:	0021      	movs	r1, r4
 8009bdc:	0028      	movs	r0, r5
 8009bde:	f000 f929 	bl	8009e34 <_fflush_r>
 8009be2:	2800      	cmp	r0, #0
 8009be4:	d111      	bne.n	8009c0a <__swbuf_r+0x9a>
 8009be6:	0030      	movs	r0, r6
 8009be8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009bea:	4b0a      	ldr	r3, [pc, #40]	; (8009c14 <__swbuf_r+0xa4>)
 8009bec:	429c      	cmp	r4, r3
 8009bee:	d101      	bne.n	8009bf4 <__swbuf_r+0x84>
 8009bf0:	68ac      	ldr	r4, [r5, #8]
 8009bf2:	e7cc      	b.n	8009b8e <__swbuf_r+0x1e>
 8009bf4:	4b08      	ldr	r3, [pc, #32]	; (8009c18 <__swbuf_r+0xa8>)
 8009bf6:	429c      	cmp	r4, r3
 8009bf8:	d1c9      	bne.n	8009b8e <__swbuf_r+0x1e>
 8009bfa:	68ec      	ldr	r4, [r5, #12]
 8009bfc:	e7c7      	b.n	8009b8e <__swbuf_r+0x1e>
 8009bfe:	0021      	movs	r1, r4
 8009c00:	0028      	movs	r0, r5
 8009c02:	f000 f80b 	bl	8009c1c <__swsetup_r>
 8009c06:	2800      	cmp	r0, #0
 8009c08:	d0c9      	beq.n	8009b9e <__swbuf_r+0x2e>
 8009c0a:	2601      	movs	r6, #1
 8009c0c:	4276      	negs	r6, r6
 8009c0e:	e7ea      	b.n	8009be6 <__swbuf_r+0x76>
 8009c10:	0800a934 	.word	0x0800a934
 8009c14:	0800a954 	.word	0x0800a954
 8009c18:	0800a914 	.word	0x0800a914

08009c1c <__swsetup_r>:
 8009c1c:	4b37      	ldr	r3, [pc, #220]	; (8009cfc <__swsetup_r+0xe0>)
 8009c1e:	b570      	push	{r4, r5, r6, lr}
 8009c20:	681d      	ldr	r5, [r3, #0]
 8009c22:	0006      	movs	r6, r0
 8009c24:	000c      	movs	r4, r1
 8009c26:	2d00      	cmp	r5, #0
 8009c28:	d005      	beq.n	8009c36 <__swsetup_r+0x1a>
 8009c2a:	69ab      	ldr	r3, [r5, #24]
 8009c2c:	2b00      	cmp	r3, #0
 8009c2e:	d102      	bne.n	8009c36 <__swsetup_r+0x1a>
 8009c30:	0028      	movs	r0, r5
 8009c32:	f000 f9a1 	bl	8009f78 <__sinit>
 8009c36:	4b32      	ldr	r3, [pc, #200]	; (8009d00 <__swsetup_r+0xe4>)
 8009c38:	429c      	cmp	r4, r3
 8009c3a:	d10f      	bne.n	8009c5c <__swsetup_r+0x40>
 8009c3c:	686c      	ldr	r4, [r5, #4]
 8009c3e:	230c      	movs	r3, #12
 8009c40:	5ee2      	ldrsh	r2, [r4, r3]
 8009c42:	b293      	uxth	r3, r2
 8009c44:	0711      	lsls	r1, r2, #28
 8009c46:	d42d      	bmi.n	8009ca4 <__swsetup_r+0x88>
 8009c48:	06d9      	lsls	r1, r3, #27
 8009c4a:	d411      	bmi.n	8009c70 <__swsetup_r+0x54>
 8009c4c:	2309      	movs	r3, #9
 8009c4e:	2001      	movs	r0, #1
 8009c50:	6033      	str	r3, [r6, #0]
 8009c52:	3337      	adds	r3, #55	; 0x37
 8009c54:	4313      	orrs	r3, r2
 8009c56:	81a3      	strh	r3, [r4, #12]
 8009c58:	4240      	negs	r0, r0
 8009c5a:	bd70      	pop	{r4, r5, r6, pc}
 8009c5c:	4b29      	ldr	r3, [pc, #164]	; (8009d04 <__swsetup_r+0xe8>)
 8009c5e:	429c      	cmp	r4, r3
 8009c60:	d101      	bne.n	8009c66 <__swsetup_r+0x4a>
 8009c62:	68ac      	ldr	r4, [r5, #8]
 8009c64:	e7eb      	b.n	8009c3e <__swsetup_r+0x22>
 8009c66:	4b28      	ldr	r3, [pc, #160]	; (8009d08 <__swsetup_r+0xec>)
 8009c68:	429c      	cmp	r4, r3
 8009c6a:	d1e8      	bne.n	8009c3e <__swsetup_r+0x22>
 8009c6c:	68ec      	ldr	r4, [r5, #12]
 8009c6e:	e7e6      	b.n	8009c3e <__swsetup_r+0x22>
 8009c70:	075b      	lsls	r3, r3, #29
 8009c72:	d513      	bpl.n	8009c9c <__swsetup_r+0x80>
 8009c74:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009c76:	2900      	cmp	r1, #0
 8009c78:	d008      	beq.n	8009c8c <__swsetup_r+0x70>
 8009c7a:	0023      	movs	r3, r4
 8009c7c:	3344      	adds	r3, #68	; 0x44
 8009c7e:	4299      	cmp	r1, r3
 8009c80:	d002      	beq.n	8009c88 <__swsetup_r+0x6c>
 8009c82:	0030      	movs	r0, r6
 8009c84:	f7ff fda2 	bl	80097cc <_free_r>
 8009c88:	2300      	movs	r3, #0
 8009c8a:	6363      	str	r3, [r4, #52]	; 0x34
 8009c8c:	2224      	movs	r2, #36	; 0x24
 8009c8e:	89a3      	ldrh	r3, [r4, #12]
 8009c90:	4393      	bics	r3, r2
 8009c92:	81a3      	strh	r3, [r4, #12]
 8009c94:	2300      	movs	r3, #0
 8009c96:	6063      	str	r3, [r4, #4]
 8009c98:	6923      	ldr	r3, [r4, #16]
 8009c9a:	6023      	str	r3, [r4, #0]
 8009c9c:	2308      	movs	r3, #8
 8009c9e:	89a2      	ldrh	r2, [r4, #12]
 8009ca0:	4313      	orrs	r3, r2
 8009ca2:	81a3      	strh	r3, [r4, #12]
 8009ca4:	6923      	ldr	r3, [r4, #16]
 8009ca6:	2b00      	cmp	r3, #0
 8009ca8:	d10b      	bne.n	8009cc2 <__swsetup_r+0xa6>
 8009caa:	21a0      	movs	r1, #160	; 0xa0
 8009cac:	2280      	movs	r2, #128	; 0x80
 8009cae:	89a3      	ldrh	r3, [r4, #12]
 8009cb0:	0089      	lsls	r1, r1, #2
 8009cb2:	0092      	lsls	r2, r2, #2
 8009cb4:	400b      	ands	r3, r1
 8009cb6:	4293      	cmp	r3, r2
 8009cb8:	d003      	beq.n	8009cc2 <__swsetup_r+0xa6>
 8009cba:	0021      	movs	r1, r4
 8009cbc:	0030      	movs	r0, r6
 8009cbe:	f000 fa27 	bl	800a110 <__smakebuf_r>
 8009cc2:	220c      	movs	r2, #12
 8009cc4:	5ea3      	ldrsh	r3, [r4, r2]
 8009cc6:	2001      	movs	r0, #1
 8009cc8:	001a      	movs	r2, r3
 8009cca:	b299      	uxth	r1, r3
 8009ccc:	4002      	ands	r2, r0
 8009cce:	4203      	tst	r3, r0
 8009cd0:	d00f      	beq.n	8009cf2 <__swsetup_r+0xd6>
 8009cd2:	2200      	movs	r2, #0
 8009cd4:	60a2      	str	r2, [r4, #8]
 8009cd6:	6962      	ldr	r2, [r4, #20]
 8009cd8:	4252      	negs	r2, r2
 8009cda:	61a2      	str	r2, [r4, #24]
 8009cdc:	2000      	movs	r0, #0
 8009cde:	6922      	ldr	r2, [r4, #16]
 8009ce0:	4282      	cmp	r2, r0
 8009ce2:	d1ba      	bne.n	8009c5a <__swsetup_r+0x3e>
 8009ce4:	060a      	lsls	r2, r1, #24
 8009ce6:	d5b8      	bpl.n	8009c5a <__swsetup_r+0x3e>
 8009ce8:	2240      	movs	r2, #64	; 0x40
 8009cea:	4313      	orrs	r3, r2
 8009cec:	81a3      	strh	r3, [r4, #12]
 8009cee:	3801      	subs	r0, #1
 8009cf0:	e7b3      	b.n	8009c5a <__swsetup_r+0x3e>
 8009cf2:	0788      	lsls	r0, r1, #30
 8009cf4:	d400      	bmi.n	8009cf8 <__swsetup_r+0xdc>
 8009cf6:	6962      	ldr	r2, [r4, #20]
 8009cf8:	60a2      	str	r2, [r4, #8]
 8009cfa:	e7ef      	b.n	8009cdc <__swsetup_r+0xc0>
 8009cfc:	2000000c 	.word	0x2000000c
 8009d00:	0800a934 	.word	0x0800a934
 8009d04:	0800a954 	.word	0x0800a954
 8009d08:	0800a914 	.word	0x0800a914

08009d0c <abort>:
 8009d0c:	2006      	movs	r0, #6
 8009d0e:	b510      	push	{r4, lr}
 8009d10:	f000 fa74 	bl	800a1fc <raise>
 8009d14:	2001      	movs	r0, #1
 8009d16:	f7fa f85e 	bl	8003dd6 <_exit>
	...

08009d1c <__sflush_r>:
 8009d1c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009d1e:	898b      	ldrh	r3, [r1, #12]
 8009d20:	0005      	movs	r5, r0
 8009d22:	000c      	movs	r4, r1
 8009d24:	071a      	lsls	r2, r3, #28
 8009d26:	d45f      	bmi.n	8009de8 <__sflush_r+0xcc>
 8009d28:	684a      	ldr	r2, [r1, #4]
 8009d2a:	2a00      	cmp	r2, #0
 8009d2c:	dc04      	bgt.n	8009d38 <__sflush_r+0x1c>
 8009d2e:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 8009d30:	2a00      	cmp	r2, #0
 8009d32:	dc01      	bgt.n	8009d38 <__sflush_r+0x1c>
 8009d34:	2000      	movs	r0, #0
 8009d36:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8009d38:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8009d3a:	2f00      	cmp	r7, #0
 8009d3c:	d0fa      	beq.n	8009d34 <__sflush_r+0x18>
 8009d3e:	2200      	movs	r2, #0
 8009d40:	2180      	movs	r1, #128	; 0x80
 8009d42:	682e      	ldr	r6, [r5, #0]
 8009d44:	602a      	str	r2, [r5, #0]
 8009d46:	001a      	movs	r2, r3
 8009d48:	0149      	lsls	r1, r1, #5
 8009d4a:	400a      	ands	r2, r1
 8009d4c:	420b      	tst	r3, r1
 8009d4e:	d034      	beq.n	8009dba <__sflush_r+0x9e>
 8009d50:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009d52:	89a3      	ldrh	r3, [r4, #12]
 8009d54:	075b      	lsls	r3, r3, #29
 8009d56:	d506      	bpl.n	8009d66 <__sflush_r+0x4a>
 8009d58:	6863      	ldr	r3, [r4, #4]
 8009d5a:	1ac0      	subs	r0, r0, r3
 8009d5c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009d5e:	2b00      	cmp	r3, #0
 8009d60:	d001      	beq.n	8009d66 <__sflush_r+0x4a>
 8009d62:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009d64:	1ac0      	subs	r0, r0, r3
 8009d66:	0002      	movs	r2, r0
 8009d68:	6a21      	ldr	r1, [r4, #32]
 8009d6a:	2300      	movs	r3, #0
 8009d6c:	0028      	movs	r0, r5
 8009d6e:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8009d70:	47b8      	blx	r7
 8009d72:	89a1      	ldrh	r1, [r4, #12]
 8009d74:	1c43      	adds	r3, r0, #1
 8009d76:	d106      	bne.n	8009d86 <__sflush_r+0x6a>
 8009d78:	682b      	ldr	r3, [r5, #0]
 8009d7a:	2b1d      	cmp	r3, #29
 8009d7c:	d831      	bhi.n	8009de2 <__sflush_r+0xc6>
 8009d7e:	4a2c      	ldr	r2, [pc, #176]	; (8009e30 <__sflush_r+0x114>)
 8009d80:	40da      	lsrs	r2, r3
 8009d82:	07d3      	lsls	r3, r2, #31
 8009d84:	d52d      	bpl.n	8009de2 <__sflush_r+0xc6>
 8009d86:	2300      	movs	r3, #0
 8009d88:	6063      	str	r3, [r4, #4]
 8009d8a:	6923      	ldr	r3, [r4, #16]
 8009d8c:	6023      	str	r3, [r4, #0]
 8009d8e:	04cb      	lsls	r3, r1, #19
 8009d90:	d505      	bpl.n	8009d9e <__sflush_r+0x82>
 8009d92:	1c43      	adds	r3, r0, #1
 8009d94:	d102      	bne.n	8009d9c <__sflush_r+0x80>
 8009d96:	682b      	ldr	r3, [r5, #0]
 8009d98:	2b00      	cmp	r3, #0
 8009d9a:	d100      	bne.n	8009d9e <__sflush_r+0x82>
 8009d9c:	6560      	str	r0, [r4, #84]	; 0x54
 8009d9e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009da0:	602e      	str	r6, [r5, #0]
 8009da2:	2900      	cmp	r1, #0
 8009da4:	d0c6      	beq.n	8009d34 <__sflush_r+0x18>
 8009da6:	0023      	movs	r3, r4
 8009da8:	3344      	adds	r3, #68	; 0x44
 8009daa:	4299      	cmp	r1, r3
 8009dac:	d002      	beq.n	8009db4 <__sflush_r+0x98>
 8009dae:	0028      	movs	r0, r5
 8009db0:	f7ff fd0c 	bl	80097cc <_free_r>
 8009db4:	2000      	movs	r0, #0
 8009db6:	6360      	str	r0, [r4, #52]	; 0x34
 8009db8:	e7bd      	b.n	8009d36 <__sflush_r+0x1a>
 8009dba:	2301      	movs	r3, #1
 8009dbc:	0028      	movs	r0, r5
 8009dbe:	6a21      	ldr	r1, [r4, #32]
 8009dc0:	47b8      	blx	r7
 8009dc2:	1c43      	adds	r3, r0, #1
 8009dc4:	d1c5      	bne.n	8009d52 <__sflush_r+0x36>
 8009dc6:	682b      	ldr	r3, [r5, #0]
 8009dc8:	2b00      	cmp	r3, #0
 8009dca:	d0c2      	beq.n	8009d52 <__sflush_r+0x36>
 8009dcc:	2b1d      	cmp	r3, #29
 8009dce:	d001      	beq.n	8009dd4 <__sflush_r+0xb8>
 8009dd0:	2b16      	cmp	r3, #22
 8009dd2:	d101      	bne.n	8009dd8 <__sflush_r+0xbc>
 8009dd4:	602e      	str	r6, [r5, #0]
 8009dd6:	e7ad      	b.n	8009d34 <__sflush_r+0x18>
 8009dd8:	2340      	movs	r3, #64	; 0x40
 8009dda:	89a2      	ldrh	r2, [r4, #12]
 8009ddc:	4313      	orrs	r3, r2
 8009dde:	81a3      	strh	r3, [r4, #12]
 8009de0:	e7a9      	b.n	8009d36 <__sflush_r+0x1a>
 8009de2:	2340      	movs	r3, #64	; 0x40
 8009de4:	430b      	orrs	r3, r1
 8009de6:	e7fa      	b.n	8009dde <__sflush_r+0xc2>
 8009de8:	690f      	ldr	r7, [r1, #16]
 8009dea:	2f00      	cmp	r7, #0
 8009dec:	d0a2      	beq.n	8009d34 <__sflush_r+0x18>
 8009dee:	680a      	ldr	r2, [r1, #0]
 8009df0:	600f      	str	r7, [r1, #0]
 8009df2:	1bd2      	subs	r2, r2, r7
 8009df4:	9201      	str	r2, [sp, #4]
 8009df6:	2200      	movs	r2, #0
 8009df8:	079b      	lsls	r3, r3, #30
 8009dfa:	d100      	bne.n	8009dfe <__sflush_r+0xe2>
 8009dfc:	694a      	ldr	r2, [r1, #20]
 8009dfe:	60a2      	str	r2, [r4, #8]
 8009e00:	9b01      	ldr	r3, [sp, #4]
 8009e02:	2b00      	cmp	r3, #0
 8009e04:	dc00      	bgt.n	8009e08 <__sflush_r+0xec>
 8009e06:	e795      	b.n	8009d34 <__sflush_r+0x18>
 8009e08:	003a      	movs	r2, r7
 8009e0a:	0028      	movs	r0, r5
 8009e0c:	9b01      	ldr	r3, [sp, #4]
 8009e0e:	6a21      	ldr	r1, [r4, #32]
 8009e10:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8009e12:	47b0      	blx	r6
 8009e14:	2800      	cmp	r0, #0
 8009e16:	dc06      	bgt.n	8009e26 <__sflush_r+0x10a>
 8009e18:	2340      	movs	r3, #64	; 0x40
 8009e1a:	2001      	movs	r0, #1
 8009e1c:	89a2      	ldrh	r2, [r4, #12]
 8009e1e:	4240      	negs	r0, r0
 8009e20:	4313      	orrs	r3, r2
 8009e22:	81a3      	strh	r3, [r4, #12]
 8009e24:	e787      	b.n	8009d36 <__sflush_r+0x1a>
 8009e26:	9b01      	ldr	r3, [sp, #4]
 8009e28:	183f      	adds	r7, r7, r0
 8009e2a:	1a1b      	subs	r3, r3, r0
 8009e2c:	9301      	str	r3, [sp, #4]
 8009e2e:	e7e7      	b.n	8009e00 <__sflush_r+0xe4>
 8009e30:	20400001 	.word	0x20400001

08009e34 <_fflush_r>:
 8009e34:	690b      	ldr	r3, [r1, #16]
 8009e36:	b570      	push	{r4, r5, r6, lr}
 8009e38:	0005      	movs	r5, r0
 8009e3a:	000c      	movs	r4, r1
 8009e3c:	2b00      	cmp	r3, #0
 8009e3e:	d102      	bne.n	8009e46 <_fflush_r+0x12>
 8009e40:	2500      	movs	r5, #0
 8009e42:	0028      	movs	r0, r5
 8009e44:	bd70      	pop	{r4, r5, r6, pc}
 8009e46:	2800      	cmp	r0, #0
 8009e48:	d004      	beq.n	8009e54 <_fflush_r+0x20>
 8009e4a:	6983      	ldr	r3, [r0, #24]
 8009e4c:	2b00      	cmp	r3, #0
 8009e4e:	d101      	bne.n	8009e54 <_fflush_r+0x20>
 8009e50:	f000 f892 	bl	8009f78 <__sinit>
 8009e54:	4b14      	ldr	r3, [pc, #80]	; (8009ea8 <_fflush_r+0x74>)
 8009e56:	429c      	cmp	r4, r3
 8009e58:	d11b      	bne.n	8009e92 <_fflush_r+0x5e>
 8009e5a:	686c      	ldr	r4, [r5, #4]
 8009e5c:	220c      	movs	r2, #12
 8009e5e:	5ea3      	ldrsh	r3, [r4, r2]
 8009e60:	2b00      	cmp	r3, #0
 8009e62:	d0ed      	beq.n	8009e40 <_fflush_r+0xc>
 8009e64:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009e66:	07d2      	lsls	r2, r2, #31
 8009e68:	d404      	bmi.n	8009e74 <_fflush_r+0x40>
 8009e6a:	059b      	lsls	r3, r3, #22
 8009e6c:	d402      	bmi.n	8009e74 <_fflush_r+0x40>
 8009e6e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009e70:	f000 f923 	bl	800a0ba <__retarget_lock_acquire_recursive>
 8009e74:	0028      	movs	r0, r5
 8009e76:	0021      	movs	r1, r4
 8009e78:	f7ff ff50 	bl	8009d1c <__sflush_r>
 8009e7c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009e7e:	0005      	movs	r5, r0
 8009e80:	07db      	lsls	r3, r3, #31
 8009e82:	d4de      	bmi.n	8009e42 <_fflush_r+0xe>
 8009e84:	89a3      	ldrh	r3, [r4, #12]
 8009e86:	059b      	lsls	r3, r3, #22
 8009e88:	d4db      	bmi.n	8009e42 <_fflush_r+0xe>
 8009e8a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009e8c:	f000 f916 	bl	800a0bc <__retarget_lock_release_recursive>
 8009e90:	e7d7      	b.n	8009e42 <_fflush_r+0xe>
 8009e92:	4b06      	ldr	r3, [pc, #24]	; (8009eac <_fflush_r+0x78>)
 8009e94:	429c      	cmp	r4, r3
 8009e96:	d101      	bne.n	8009e9c <_fflush_r+0x68>
 8009e98:	68ac      	ldr	r4, [r5, #8]
 8009e9a:	e7df      	b.n	8009e5c <_fflush_r+0x28>
 8009e9c:	4b04      	ldr	r3, [pc, #16]	; (8009eb0 <_fflush_r+0x7c>)
 8009e9e:	429c      	cmp	r4, r3
 8009ea0:	d1dc      	bne.n	8009e5c <_fflush_r+0x28>
 8009ea2:	68ec      	ldr	r4, [r5, #12]
 8009ea4:	e7da      	b.n	8009e5c <_fflush_r+0x28>
 8009ea6:	46c0      	nop			; (mov r8, r8)
 8009ea8:	0800a934 	.word	0x0800a934
 8009eac:	0800a954 	.word	0x0800a954
 8009eb0:	0800a914 	.word	0x0800a914

08009eb4 <std>:
 8009eb4:	2300      	movs	r3, #0
 8009eb6:	b510      	push	{r4, lr}
 8009eb8:	0004      	movs	r4, r0
 8009eba:	6003      	str	r3, [r0, #0]
 8009ebc:	6043      	str	r3, [r0, #4]
 8009ebe:	6083      	str	r3, [r0, #8]
 8009ec0:	8181      	strh	r1, [r0, #12]
 8009ec2:	6643      	str	r3, [r0, #100]	; 0x64
 8009ec4:	0019      	movs	r1, r3
 8009ec6:	81c2      	strh	r2, [r0, #14]
 8009ec8:	6103      	str	r3, [r0, #16]
 8009eca:	6143      	str	r3, [r0, #20]
 8009ecc:	6183      	str	r3, [r0, #24]
 8009ece:	2208      	movs	r2, #8
 8009ed0:	305c      	adds	r0, #92	; 0x5c
 8009ed2:	f7fd f9ce 	bl	8007272 <memset>
 8009ed6:	4b05      	ldr	r3, [pc, #20]	; (8009eec <std+0x38>)
 8009ed8:	6263      	str	r3, [r4, #36]	; 0x24
 8009eda:	4b05      	ldr	r3, [pc, #20]	; (8009ef0 <std+0x3c>)
 8009edc:	6224      	str	r4, [r4, #32]
 8009ede:	62a3      	str	r3, [r4, #40]	; 0x28
 8009ee0:	4b04      	ldr	r3, [pc, #16]	; (8009ef4 <std+0x40>)
 8009ee2:	62e3      	str	r3, [r4, #44]	; 0x2c
 8009ee4:	4b04      	ldr	r3, [pc, #16]	; (8009ef8 <std+0x44>)
 8009ee6:	6323      	str	r3, [r4, #48]	; 0x30
 8009ee8:	bd10      	pop	{r4, pc}
 8009eea:	46c0      	nop			; (mov r8, r8)
 8009eec:	0800a23d 	.word	0x0800a23d
 8009ef0:	0800a265 	.word	0x0800a265
 8009ef4:	0800a29d 	.word	0x0800a29d
 8009ef8:	0800a2c9 	.word	0x0800a2c9

08009efc <_cleanup_r>:
 8009efc:	b510      	push	{r4, lr}
 8009efe:	4902      	ldr	r1, [pc, #8]	; (8009f08 <_cleanup_r+0xc>)
 8009f00:	f000 f8ba 	bl	800a078 <_fwalk_reent>
 8009f04:	bd10      	pop	{r4, pc}
 8009f06:	46c0      	nop			; (mov r8, r8)
 8009f08:	08009e35 	.word	0x08009e35

08009f0c <__sfmoreglue>:
 8009f0c:	b570      	push	{r4, r5, r6, lr}
 8009f0e:	2568      	movs	r5, #104	; 0x68
 8009f10:	1e4a      	subs	r2, r1, #1
 8009f12:	4355      	muls	r5, r2
 8009f14:	000e      	movs	r6, r1
 8009f16:	0029      	movs	r1, r5
 8009f18:	3174      	adds	r1, #116	; 0x74
 8009f1a:	f7ff f879 	bl	8009010 <_malloc_r>
 8009f1e:	1e04      	subs	r4, r0, #0
 8009f20:	d008      	beq.n	8009f34 <__sfmoreglue+0x28>
 8009f22:	2100      	movs	r1, #0
 8009f24:	002a      	movs	r2, r5
 8009f26:	6001      	str	r1, [r0, #0]
 8009f28:	6046      	str	r6, [r0, #4]
 8009f2a:	300c      	adds	r0, #12
 8009f2c:	60a0      	str	r0, [r4, #8]
 8009f2e:	3268      	adds	r2, #104	; 0x68
 8009f30:	f7fd f99f 	bl	8007272 <memset>
 8009f34:	0020      	movs	r0, r4
 8009f36:	bd70      	pop	{r4, r5, r6, pc}

08009f38 <__sfp_lock_acquire>:
 8009f38:	b510      	push	{r4, lr}
 8009f3a:	4802      	ldr	r0, [pc, #8]	; (8009f44 <__sfp_lock_acquire+0xc>)
 8009f3c:	f000 f8bd 	bl	800a0ba <__retarget_lock_acquire_recursive>
 8009f40:	bd10      	pop	{r4, pc}
 8009f42:	46c0      	nop			; (mov r8, r8)
 8009f44:	200006c8 	.word	0x200006c8

08009f48 <__sfp_lock_release>:
 8009f48:	b510      	push	{r4, lr}
 8009f4a:	4802      	ldr	r0, [pc, #8]	; (8009f54 <__sfp_lock_release+0xc>)
 8009f4c:	f000 f8b6 	bl	800a0bc <__retarget_lock_release_recursive>
 8009f50:	bd10      	pop	{r4, pc}
 8009f52:	46c0      	nop			; (mov r8, r8)
 8009f54:	200006c8 	.word	0x200006c8

08009f58 <__sinit_lock_acquire>:
 8009f58:	b510      	push	{r4, lr}
 8009f5a:	4802      	ldr	r0, [pc, #8]	; (8009f64 <__sinit_lock_acquire+0xc>)
 8009f5c:	f000 f8ad 	bl	800a0ba <__retarget_lock_acquire_recursive>
 8009f60:	bd10      	pop	{r4, pc}
 8009f62:	46c0      	nop			; (mov r8, r8)
 8009f64:	200006c3 	.word	0x200006c3

08009f68 <__sinit_lock_release>:
 8009f68:	b510      	push	{r4, lr}
 8009f6a:	4802      	ldr	r0, [pc, #8]	; (8009f74 <__sinit_lock_release+0xc>)
 8009f6c:	f000 f8a6 	bl	800a0bc <__retarget_lock_release_recursive>
 8009f70:	bd10      	pop	{r4, pc}
 8009f72:	46c0      	nop			; (mov r8, r8)
 8009f74:	200006c3 	.word	0x200006c3

08009f78 <__sinit>:
 8009f78:	b513      	push	{r0, r1, r4, lr}
 8009f7a:	0004      	movs	r4, r0
 8009f7c:	f7ff ffec 	bl	8009f58 <__sinit_lock_acquire>
 8009f80:	69a3      	ldr	r3, [r4, #24]
 8009f82:	2b00      	cmp	r3, #0
 8009f84:	d002      	beq.n	8009f8c <__sinit+0x14>
 8009f86:	f7ff ffef 	bl	8009f68 <__sinit_lock_release>
 8009f8a:	bd13      	pop	{r0, r1, r4, pc}
 8009f8c:	64a3      	str	r3, [r4, #72]	; 0x48
 8009f8e:	64e3      	str	r3, [r4, #76]	; 0x4c
 8009f90:	6523      	str	r3, [r4, #80]	; 0x50
 8009f92:	4b13      	ldr	r3, [pc, #76]	; (8009fe0 <__sinit+0x68>)
 8009f94:	4a13      	ldr	r2, [pc, #76]	; (8009fe4 <__sinit+0x6c>)
 8009f96:	681b      	ldr	r3, [r3, #0]
 8009f98:	62a2      	str	r2, [r4, #40]	; 0x28
 8009f9a:	9301      	str	r3, [sp, #4]
 8009f9c:	42a3      	cmp	r3, r4
 8009f9e:	d101      	bne.n	8009fa4 <__sinit+0x2c>
 8009fa0:	2301      	movs	r3, #1
 8009fa2:	61a3      	str	r3, [r4, #24]
 8009fa4:	0020      	movs	r0, r4
 8009fa6:	f000 f81f 	bl	8009fe8 <__sfp>
 8009faa:	6060      	str	r0, [r4, #4]
 8009fac:	0020      	movs	r0, r4
 8009fae:	f000 f81b 	bl	8009fe8 <__sfp>
 8009fb2:	60a0      	str	r0, [r4, #8]
 8009fb4:	0020      	movs	r0, r4
 8009fb6:	f000 f817 	bl	8009fe8 <__sfp>
 8009fba:	2200      	movs	r2, #0
 8009fbc:	2104      	movs	r1, #4
 8009fbe:	60e0      	str	r0, [r4, #12]
 8009fc0:	6860      	ldr	r0, [r4, #4]
 8009fc2:	f7ff ff77 	bl	8009eb4 <std>
 8009fc6:	2201      	movs	r2, #1
 8009fc8:	2109      	movs	r1, #9
 8009fca:	68a0      	ldr	r0, [r4, #8]
 8009fcc:	f7ff ff72 	bl	8009eb4 <std>
 8009fd0:	2202      	movs	r2, #2
 8009fd2:	2112      	movs	r1, #18
 8009fd4:	68e0      	ldr	r0, [r4, #12]
 8009fd6:	f7ff ff6d 	bl	8009eb4 <std>
 8009fda:	2301      	movs	r3, #1
 8009fdc:	61a3      	str	r3, [r4, #24]
 8009fde:	e7d2      	b.n	8009f86 <__sinit+0xe>
 8009fe0:	0800a53c 	.word	0x0800a53c
 8009fe4:	08009efd 	.word	0x08009efd

08009fe8 <__sfp>:
 8009fe8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009fea:	0007      	movs	r7, r0
 8009fec:	f7ff ffa4 	bl	8009f38 <__sfp_lock_acquire>
 8009ff0:	4b1f      	ldr	r3, [pc, #124]	; (800a070 <__sfp+0x88>)
 8009ff2:	681e      	ldr	r6, [r3, #0]
 8009ff4:	69b3      	ldr	r3, [r6, #24]
 8009ff6:	2b00      	cmp	r3, #0
 8009ff8:	d102      	bne.n	800a000 <__sfp+0x18>
 8009ffa:	0030      	movs	r0, r6
 8009ffc:	f7ff ffbc 	bl	8009f78 <__sinit>
 800a000:	3648      	adds	r6, #72	; 0x48
 800a002:	68b4      	ldr	r4, [r6, #8]
 800a004:	6873      	ldr	r3, [r6, #4]
 800a006:	3b01      	subs	r3, #1
 800a008:	d504      	bpl.n	800a014 <__sfp+0x2c>
 800a00a:	6833      	ldr	r3, [r6, #0]
 800a00c:	2b00      	cmp	r3, #0
 800a00e:	d022      	beq.n	800a056 <__sfp+0x6e>
 800a010:	6836      	ldr	r6, [r6, #0]
 800a012:	e7f6      	b.n	800a002 <__sfp+0x1a>
 800a014:	220c      	movs	r2, #12
 800a016:	5ea5      	ldrsh	r5, [r4, r2]
 800a018:	2d00      	cmp	r5, #0
 800a01a:	d11a      	bne.n	800a052 <__sfp+0x6a>
 800a01c:	0020      	movs	r0, r4
 800a01e:	4b15      	ldr	r3, [pc, #84]	; (800a074 <__sfp+0x8c>)
 800a020:	3058      	adds	r0, #88	; 0x58
 800a022:	60e3      	str	r3, [r4, #12]
 800a024:	6665      	str	r5, [r4, #100]	; 0x64
 800a026:	f000 f847 	bl	800a0b8 <__retarget_lock_init_recursive>
 800a02a:	f7ff ff8d 	bl	8009f48 <__sfp_lock_release>
 800a02e:	0020      	movs	r0, r4
 800a030:	2208      	movs	r2, #8
 800a032:	0029      	movs	r1, r5
 800a034:	6025      	str	r5, [r4, #0]
 800a036:	60a5      	str	r5, [r4, #8]
 800a038:	6065      	str	r5, [r4, #4]
 800a03a:	6125      	str	r5, [r4, #16]
 800a03c:	6165      	str	r5, [r4, #20]
 800a03e:	61a5      	str	r5, [r4, #24]
 800a040:	305c      	adds	r0, #92	; 0x5c
 800a042:	f7fd f916 	bl	8007272 <memset>
 800a046:	6365      	str	r5, [r4, #52]	; 0x34
 800a048:	63a5      	str	r5, [r4, #56]	; 0x38
 800a04a:	64a5      	str	r5, [r4, #72]	; 0x48
 800a04c:	64e5      	str	r5, [r4, #76]	; 0x4c
 800a04e:	0020      	movs	r0, r4
 800a050:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a052:	3468      	adds	r4, #104	; 0x68
 800a054:	e7d7      	b.n	800a006 <__sfp+0x1e>
 800a056:	2104      	movs	r1, #4
 800a058:	0038      	movs	r0, r7
 800a05a:	f7ff ff57 	bl	8009f0c <__sfmoreglue>
 800a05e:	1e04      	subs	r4, r0, #0
 800a060:	6030      	str	r0, [r6, #0]
 800a062:	d1d5      	bne.n	800a010 <__sfp+0x28>
 800a064:	f7ff ff70 	bl	8009f48 <__sfp_lock_release>
 800a068:	230c      	movs	r3, #12
 800a06a:	603b      	str	r3, [r7, #0]
 800a06c:	e7ef      	b.n	800a04e <__sfp+0x66>
 800a06e:	46c0      	nop			; (mov r8, r8)
 800a070:	0800a53c 	.word	0x0800a53c
 800a074:	ffff0001 	.word	0xffff0001

0800a078 <_fwalk_reent>:
 800a078:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a07a:	0004      	movs	r4, r0
 800a07c:	0006      	movs	r6, r0
 800a07e:	2700      	movs	r7, #0
 800a080:	9101      	str	r1, [sp, #4]
 800a082:	3448      	adds	r4, #72	; 0x48
 800a084:	6863      	ldr	r3, [r4, #4]
 800a086:	68a5      	ldr	r5, [r4, #8]
 800a088:	9300      	str	r3, [sp, #0]
 800a08a:	9b00      	ldr	r3, [sp, #0]
 800a08c:	3b01      	subs	r3, #1
 800a08e:	9300      	str	r3, [sp, #0]
 800a090:	d504      	bpl.n	800a09c <_fwalk_reent+0x24>
 800a092:	6824      	ldr	r4, [r4, #0]
 800a094:	2c00      	cmp	r4, #0
 800a096:	d1f5      	bne.n	800a084 <_fwalk_reent+0xc>
 800a098:	0038      	movs	r0, r7
 800a09a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800a09c:	89ab      	ldrh	r3, [r5, #12]
 800a09e:	2b01      	cmp	r3, #1
 800a0a0:	d908      	bls.n	800a0b4 <_fwalk_reent+0x3c>
 800a0a2:	220e      	movs	r2, #14
 800a0a4:	5eab      	ldrsh	r3, [r5, r2]
 800a0a6:	3301      	adds	r3, #1
 800a0a8:	d004      	beq.n	800a0b4 <_fwalk_reent+0x3c>
 800a0aa:	0029      	movs	r1, r5
 800a0ac:	0030      	movs	r0, r6
 800a0ae:	9b01      	ldr	r3, [sp, #4]
 800a0b0:	4798      	blx	r3
 800a0b2:	4307      	orrs	r7, r0
 800a0b4:	3568      	adds	r5, #104	; 0x68
 800a0b6:	e7e8      	b.n	800a08a <_fwalk_reent+0x12>

0800a0b8 <__retarget_lock_init_recursive>:
 800a0b8:	4770      	bx	lr

0800a0ba <__retarget_lock_acquire_recursive>:
 800a0ba:	4770      	bx	lr

0800a0bc <__retarget_lock_release_recursive>:
 800a0bc:	4770      	bx	lr
	...

0800a0c0 <__swhatbuf_r>:
 800a0c0:	b570      	push	{r4, r5, r6, lr}
 800a0c2:	000e      	movs	r6, r1
 800a0c4:	001d      	movs	r5, r3
 800a0c6:	230e      	movs	r3, #14
 800a0c8:	5ec9      	ldrsh	r1, [r1, r3]
 800a0ca:	0014      	movs	r4, r2
 800a0cc:	b096      	sub	sp, #88	; 0x58
 800a0ce:	2900      	cmp	r1, #0
 800a0d0:	da07      	bge.n	800a0e2 <__swhatbuf_r+0x22>
 800a0d2:	2300      	movs	r3, #0
 800a0d4:	602b      	str	r3, [r5, #0]
 800a0d6:	89b3      	ldrh	r3, [r6, #12]
 800a0d8:	061b      	lsls	r3, r3, #24
 800a0da:	d411      	bmi.n	800a100 <__swhatbuf_r+0x40>
 800a0dc:	2380      	movs	r3, #128	; 0x80
 800a0de:	00db      	lsls	r3, r3, #3
 800a0e0:	e00f      	b.n	800a102 <__swhatbuf_r+0x42>
 800a0e2:	466a      	mov	r2, sp
 800a0e4:	f000 f91c 	bl	800a320 <_fstat_r>
 800a0e8:	2800      	cmp	r0, #0
 800a0ea:	dbf2      	blt.n	800a0d2 <__swhatbuf_r+0x12>
 800a0ec:	23f0      	movs	r3, #240	; 0xf0
 800a0ee:	9901      	ldr	r1, [sp, #4]
 800a0f0:	021b      	lsls	r3, r3, #8
 800a0f2:	4019      	ands	r1, r3
 800a0f4:	4b05      	ldr	r3, [pc, #20]	; (800a10c <__swhatbuf_r+0x4c>)
 800a0f6:	18c9      	adds	r1, r1, r3
 800a0f8:	424b      	negs	r3, r1
 800a0fa:	4159      	adcs	r1, r3
 800a0fc:	6029      	str	r1, [r5, #0]
 800a0fe:	e7ed      	b.n	800a0dc <__swhatbuf_r+0x1c>
 800a100:	2340      	movs	r3, #64	; 0x40
 800a102:	2000      	movs	r0, #0
 800a104:	6023      	str	r3, [r4, #0]
 800a106:	b016      	add	sp, #88	; 0x58
 800a108:	bd70      	pop	{r4, r5, r6, pc}
 800a10a:	46c0      	nop			; (mov r8, r8)
 800a10c:	ffffe000 	.word	0xffffe000

0800a110 <__smakebuf_r>:
 800a110:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a112:	2602      	movs	r6, #2
 800a114:	898b      	ldrh	r3, [r1, #12]
 800a116:	0005      	movs	r5, r0
 800a118:	000c      	movs	r4, r1
 800a11a:	4233      	tst	r3, r6
 800a11c:	d006      	beq.n	800a12c <__smakebuf_r+0x1c>
 800a11e:	0023      	movs	r3, r4
 800a120:	3347      	adds	r3, #71	; 0x47
 800a122:	6023      	str	r3, [r4, #0]
 800a124:	6123      	str	r3, [r4, #16]
 800a126:	2301      	movs	r3, #1
 800a128:	6163      	str	r3, [r4, #20]
 800a12a:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 800a12c:	466a      	mov	r2, sp
 800a12e:	ab01      	add	r3, sp, #4
 800a130:	f7ff ffc6 	bl	800a0c0 <__swhatbuf_r>
 800a134:	9900      	ldr	r1, [sp, #0]
 800a136:	0007      	movs	r7, r0
 800a138:	0028      	movs	r0, r5
 800a13a:	f7fe ff69 	bl	8009010 <_malloc_r>
 800a13e:	2800      	cmp	r0, #0
 800a140:	d108      	bne.n	800a154 <__smakebuf_r+0x44>
 800a142:	220c      	movs	r2, #12
 800a144:	5ea3      	ldrsh	r3, [r4, r2]
 800a146:	059a      	lsls	r2, r3, #22
 800a148:	d4ef      	bmi.n	800a12a <__smakebuf_r+0x1a>
 800a14a:	2203      	movs	r2, #3
 800a14c:	4393      	bics	r3, r2
 800a14e:	431e      	orrs	r6, r3
 800a150:	81a6      	strh	r6, [r4, #12]
 800a152:	e7e4      	b.n	800a11e <__smakebuf_r+0xe>
 800a154:	4b0f      	ldr	r3, [pc, #60]	; (800a194 <__smakebuf_r+0x84>)
 800a156:	62ab      	str	r3, [r5, #40]	; 0x28
 800a158:	2380      	movs	r3, #128	; 0x80
 800a15a:	89a2      	ldrh	r2, [r4, #12]
 800a15c:	6020      	str	r0, [r4, #0]
 800a15e:	4313      	orrs	r3, r2
 800a160:	81a3      	strh	r3, [r4, #12]
 800a162:	9b00      	ldr	r3, [sp, #0]
 800a164:	6120      	str	r0, [r4, #16]
 800a166:	6163      	str	r3, [r4, #20]
 800a168:	9b01      	ldr	r3, [sp, #4]
 800a16a:	2b00      	cmp	r3, #0
 800a16c:	d00d      	beq.n	800a18a <__smakebuf_r+0x7a>
 800a16e:	0028      	movs	r0, r5
 800a170:	230e      	movs	r3, #14
 800a172:	5ee1      	ldrsh	r1, [r4, r3]
 800a174:	f000 f8e6 	bl	800a344 <_isatty_r>
 800a178:	2800      	cmp	r0, #0
 800a17a:	d006      	beq.n	800a18a <__smakebuf_r+0x7a>
 800a17c:	2203      	movs	r2, #3
 800a17e:	89a3      	ldrh	r3, [r4, #12]
 800a180:	4393      	bics	r3, r2
 800a182:	001a      	movs	r2, r3
 800a184:	2301      	movs	r3, #1
 800a186:	4313      	orrs	r3, r2
 800a188:	81a3      	strh	r3, [r4, #12]
 800a18a:	89a0      	ldrh	r0, [r4, #12]
 800a18c:	4307      	orrs	r7, r0
 800a18e:	81a7      	strh	r7, [r4, #12]
 800a190:	e7cb      	b.n	800a12a <__smakebuf_r+0x1a>
 800a192:	46c0      	nop			; (mov r8, r8)
 800a194:	08009efd 	.word	0x08009efd

0800a198 <_malloc_usable_size_r>:
 800a198:	1f0b      	subs	r3, r1, #4
 800a19a:	681b      	ldr	r3, [r3, #0]
 800a19c:	1f18      	subs	r0, r3, #4
 800a19e:	2b00      	cmp	r3, #0
 800a1a0:	da01      	bge.n	800a1a6 <_malloc_usable_size_r+0xe>
 800a1a2:	580b      	ldr	r3, [r1, r0]
 800a1a4:	18c0      	adds	r0, r0, r3
 800a1a6:	4770      	bx	lr

0800a1a8 <_raise_r>:
 800a1a8:	b570      	push	{r4, r5, r6, lr}
 800a1aa:	0004      	movs	r4, r0
 800a1ac:	000d      	movs	r5, r1
 800a1ae:	291f      	cmp	r1, #31
 800a1b0:	d904      	bls.n	800a1bc <_raise_r+0x14>
 800a1b2:	2316      	movs	r3, #22
 800a1b4:	6003      	str	r3, [r0, #0]
 800a1b6:	2001      	movs	r0, #1
 800a1b8:	4240      	negs	r0, r0
 800a1ba:	bd70      	pop	{r4, r5, r6, pc}
 800a1bc:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800a1be:	2b00      	cmp	r3, #0
 800a1c0:	d004      	beq.n	800a1cc <_raise_r+0x24>
 800a1c2:	008a      	lsls	r2, r1, #2
 800a1c4:	189b      	adds	r3, r3, r2
 800a1c6:	681a      	ldr	r2, [r3, #0]
 800a1c8:	2a00      	cmp	r2, #0
 800a1ca:	d108      	bne.n	800a1de <_raise_r+0x36>
 800a1cc:	0020      	movs	r0, r4
 800a1ce:	f000 f831 	bl	800a234 <_getpid_r>
 800a1d2:	002a      	movs	r2, r5
 800a1d4:	0001      	movs	r1, r0
 800a1d6:	0020      	movs	r0, r4
 800a1d8:	f000 f81a 	bl	800a210 <_kill_r>
 800a1dc:	e7ed      	b.n	800a1ba <_raise_r+0x12>
 800a1de:	2000      	movs	r0, #0
 800a1e0:	2a01      	cmp	r2, #1
 800a1e2:	d0ea      	beq.n	800a1ba <_raise_r+0x12>
 800a1e4:	1c51      	adds	r1, r2, #1
 800a1e6:	d103      	bne.n	800a1f0 <_raise_r+0x48>
 800a1e8:	2316      	movs	r3, #22
 800a1ea:	3001      	adds	r0, #1
 800a1ec:	6023      	str	r3, [r4, #0]
 800a1ee:	e7e4      	b.n	800a1ba <_raise_r+0x12>
 800a1f0:	2400      	movs	r4, #0
 800a1f2:	0028      	movs	r0, r5
 800a1f4:	601c      	str	r4, [r3, #0]
 800a1f6:	4790      	blx	r2
 800a1f8:	0020      	movs	r0, r4
 800a1fa:	e7de      	b.n	800a1ba <_raise_r+0x12>

0800a1fc <raise>:
 800a1fc:	b510      	push	{r4, lr}
 800a1fe:	4b03      	ldr	r3, [pc, #12]	; (800a20c <raise+0x10>)
 800a200:	0001      	movs	r1, r0
 800a202:	6818      	ldr	r0, [r3, #0]
 800a204:	f7ff ffd0 	bl	800a1a8 <_raise_r>
 800a208:	bd10      	pop	{r4, pc}
 800a20a:	46c0      	nop			; (mov r8, r8)
 800a20c:	2000000c 	.word	0x2000000c

0800a210 <_kill_r>:
 800a210:	2300      	movs	r3, #0
 800a212:	b570      	push	{r4, r5, r6, lr}
 800a214:	4d06      	ldr	r5, [pc, #24]	; (800a230 <_kill_r+0x20>)
 800a216:	0004      	movs	r4, r0
 800a218:	0008      	movs	r0, r1
 800a21a:	0011      	movs	r1, r2
 800a21c:	602b      	str	r3, [r5, #0]
 800a21e:	f7f9 fdca 	bl	8003db6 <_kill>
 800a222:	1c43      	adds	r3, r0, #1
 800a224:	d103      	bne.n	800a22e <_kill_r+0x1e>
 800a226:	682b      	ldr	r3, [r5, #0]
 800a228:	2b00      	cmp	r3, #0
 800a22a:	d000      	beq.n	800a22e <_kill_r+0x1e>
 800a22c:	6023      	str	r3, [r4, #0]
 800a22e:	bd70      	pop	{r4, r5, r6, pc}
 800a230:	200006bc 	.word	0x200006bc

0800a234 <_getpid_r>:
 800a234:	b510      	push	{r4, lr}
 800a236:	f7f9 fdb8 	bl	8003daa <_getpid>
 800a23a:	bd10      	pop	{r4, pc}

0800a23c <__sread>:
 800a23c:	b570      	push	{r4, r5, r6, lr}
 800a23e:	000c      	movs	r4, r1
 800a240:	250e      	movs	r5, #14
 800a242:	5f49      	ldrsh	r1, [r1, r5]
 800a244:	f000 f8a4 	bl	800a390 <_read_r>
 800a248:	2800      	cmp	r0, #0
 800a24a:	db03      	blt.n	800a254 <__sread+0x18>
 800a24c:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800a24e:	181b      	adds	r3, r3, r0
 800a250:	6563      	str	r3, [r4, #84]	; 0x54
 800a252:	bd70      	pop	{r4, r5, r6, pc}
 800a254:	89a3      	ldrh	r3, [r4, #12]
 800a256:	4a02      	ldr	r2, [pc, #8]	; (800a260 <__sread+0x24>)
 800a258:	4013      	ands	r3, r2
 800a25a:	81a3      	strh	r3, [r4, #12]
 800a25c:	e7f9      	b.n	800a252 <__sread+0x16>
 800a25e:	46c0      	nop			; (mov r8, r8)
 800a260:	ffffefff 	.word	0xffffefff

0800a264 <__swrite>:
 800a264:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a266:	001f      	movs	r7, r3
 800a268:	898b      	ldrh	r3, [r1, #12]
 800a26a:	0005      	movs	r5, r0
 800a26c:	000c      	movs	r4, r1
 800a26e:	0016      	movs	r6, r2
 800a270:	05db      	lsls	r3, r3, #23
 800a272:	d505      	bpl.n	800a280 <__swrite+0x1c>
 800a274:	230e      	movs	r3, #14
 800a276:	5ec9      	ldrsh	r1, [r1, r3]
 800a278:	2200      	movs	r2, #0
 800a27a:	2302      	movs	r3, #2
 800a27c:	f000 f874 	bl	800a368 <_lseek_r>
 800a280:	89a3      	ldrh	r3, [r4, #12]
 800a282:	4a05      	ldr	r2, [pc, #20]	; (800a298 <__swrite+0x34>)
 800a284:	0028      	movs	r0, r5
 800a286:	4013      	ands	r3, r2
 800a288:	81a3      	strh	r3, [r4, #12]
 800a28a:	0032      	movs	r2, r6
 800a28c:	230e      	movs	r3, #14
 800a28e:	5ee1      	ldrsh	r1, [r4, r3]
 800a290:	003b      	movs	r3, r7
 800a292:	f000 f81f 	bl	800a2d4 <_write_r>
 800a296:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a298:	ffffefff 	.word	0xffffefff

0800a29c <__sseek>:
 800a29c:	b570      	push	{r4, r5, r6, lr}
 800a29e:	000c      	movs	r4, r1
 800a2a0:	250e      	movs	r5, #14
 800a2a2:	5f49      	ldrsh	r1, [r1, r5]
 800a2a4:	f000 f860 	bl	800a368 <_lseek_r>
 800a2a8:	89a3      	ldrh	r3, [r4, #12]
 800a2aa:	1c42      	adds	r2, r0, #1
 800a2ac:	d103      	bne.n	800a2b6 <__sseek+0x1a>
 800a2ae:	4a05      	ldr	r2, [pc, #20]	; (800a2c4 <__sseek+0x28>)
 800a2b0:	4013      	ands	r3, r2
 800a2b2:	81a3      	strh	r3, [r4, #12]
 800a2b4:	bd70      	pop	{r4, r5, r6, pc}
 800a2b6:	2280      	movs	r2, #128	; 0x80
 800a2b8:	0152      	lsls	r2, r2, #5
 800a2ba:	4313      	orrs	r3, r2
 800a2bc:	81a3      	strh	r3, [r4, #12]
 800a2be:	6560      	str	r0, [r4, #84]	; 0x54
 800a2c0:	e7f8      	b.n	800a2b4 <__sseek+0x18>
 800a2c2:	46c0      	nop			; (mov r8, r8)
 800a2c4:	ffffefff 	.word	0xffffefff

0800a2c8 <__sclose>:
 800a2c8:	b510      	push	{r4, lr}
 800a2ca:	230e      	movs	r3, #14
 800a2cc:	5ec9      	ldrsh	r1, [r1, r3]
 800a2ce:	f000 f815 	bl	800a2fc <_close_r>
 800a2d2:	bd10      	pop	{r4, pc}

0800a2d4 <_write_r>:
 800a2d4:	b570      	push	{r4, r5, r6, lr}
 800a2d6:	0004      	movs	r4, r0
 800a2d8:	0008      	movs	r0, r1
 800a2da:	0011      	movs	r1, r2
 800a2dc:	001a      	movs	r2, r3
 800a2de:	2300      	movs	r3, #0
 800a2e0:	4d05      	ldr	r5, [pc, #20]	; (800a2f8 <_write_r+0x24>)
 800a2e2:	602b      	str	r3, [r5, #0]
 800a2e4:	f7f9 fda0 	bl	8003e28 <_write>
 800a2e8:	1c43      	adds	r3, r0, #1
 800a2ea:	d103      	bne.n	800a2f4 <_write_r+0x20>
 800a2ec:	682b      	ldr	r3, [r5, #0]
 800a2ee:	2b00      	cmp	r3, #0
 800a2f0:	d000      	beq.n	800a2f4 <_write_r+0x20>
 800a2f2:	6023      	str	r3, [r4, #0]
 800a2f4:	bd70      	pop	{r4, r5, r6, pc}
 800a2f6:	46c0      	nop			; (mov r8, r8)
 800a2f8:	200006bc 	.word	0x200006bc

0800a2fc <_close_r>:
 800a2fc:	2300      	movs	r3, #0
 800a2fe:	b570      	push	{r4, r5, r6, lr}
 800a300:	4d06      	ldr	r5, [pc, #24]	; (800a31c <_close_r+0x20>)
 800a302:	0004      	movs	r4, r0
 800a304:	0008      	movs	r0, r1
 800a306:	602b      	str	r3, [r5, #0]
 800a308:	f7f9 fdaa 	bl	8003e60 <_close>
 800a30c:	1c43      	adds	r3, r0, #1
 800a30e:	d103      	bne.n	800a318 <_close_r+0x1c>
 800a310:	682b      	ldr	r3, [r5, #0]
 800a312:	2b00      	cmp	r3, #0
 800a314:	d000      	beq.n	800a318 <_close_r+0x1c>
 800a316:	6023      	str	r3, [r4, #0]
 800a318:	bd70      	pop	{r4, r5, r6, pc}
 800a31a:	46c0      	nop			; (mov r8, r8)
 800a31c:	200006bc 	.word	0x200006bc

0800a320 <_fstat_r>:
 800a320:	2300      	movs	r3, #0
 800a322:	b570      	push	{r4, r5, r6, lr}
 800a324:	4d06      	ldr	r5, [pc, #24]	; (800a340 <_fstat_r+0x20>)
 800a326:	0004      	movs	r4, r0
 800a328:	0008      	movs	r0, r1
 800a32a:	0011      	movs	r1, r2
 800a32c:	602b      	str	r3, [r5, #0]
 800a32e:	f7f9 fda1 	bl	8003e74 <_fstat>
 800a332:	1c43      	adds	r3, r0, #1
 800a334:	d103      	bne.n	800a33e <_fstat_r+0x1e>
 800a336:	682b      	ldr	r3, [r5, #0]
 800a338:	2b00      	cmp	r3, #0
 800a33a:	d000      	beq.n	800a33e <_fstat_r+0x1e>
 800a33c:	6023      	str	r3, [r4, #0]
 800a33e:	bd70      	pop	{r4, r5, r6, pc}
 800a340:	200006bc 	.word	0x200006bc

0800a344 <_isatty_r>:
 800a344:	2300      	movs	r3, #0
 800a346:	b570      	push	{r4, r5, r6, lr}
 800a348:	4d06      	ldr	r5, [pc, #24]	; (800a364 <_isatty_r+0x20>)
 800a34a:	0004      	movs	r4, r0
 800a34c:	0008      	movs	r0, r1
 800a34e:	602b      	str	r3, [r5, #0]
 800a350:	f7f9 fd9e 	bl	8003e90 <_isatty>
 800a354:	1c43      	adds	r3, r0, #1
 800a356:	d103      	bne.n	800a360 <_isatty_r+0x1c>
 800a358:	682b      	ldr	r3, [r5, #0]
 800a35a:	2b00      	cmp	r3, #0
 800a35c:	d000      	beq.n	800a360 <_isatty_r+0x1c>
 800a35e:	6023      	str	r3, [r4, #0]
 800a360:	bd70      	pop	{r4, r5, r6, pc}
 800a362:	46c0      	nop			; (mov r8, r8)
 800a364:	200006bc 	.word	0x200006bc

0800a368 <_lseek_r>:
 800a368:	b570      	push	{r4, r5, r6, lr}
 800a36a:	0004      	movs	r4, r0
 800a36c:	0008      	movs	r0, r1
 800a36e:	0011      	movs	r1, r2
 800a370:	001a      	movs	r2, r3
 800a372:	2300      	movs	r3, #0
 800a374:	4d05      	ldr	r5, [pc, #20]	; (800a38c <_lseek_r+0x24>)
 800a376:	602b      	str	r3, [r5, #0]
 800a378:	f7f9 fd93 	bl	8003ea2 <_lseek>
 800a37c:	1c43      	adds	r3, r0, #1
 800a37e:	d103      	bne.n	800a388 <_lseek_r+0x20>
 800a380:	682b      	ldr	r3, [r5, #0]
 800a382:	2b00      	cmp	r3, #0
 800a384:	d000      	beq.n	800a388 <_lseek_r+0x20>
 800a386:	6023      	str	r3, [r4, #0]
 800a388:	bd70      	pop	{r4, r5, r6, pc}
 800a38a:	46c0      	nop			; (mov r8, r8)
 800a38c:	200006bc 	.word	0x200006bc

0800a390 <_read_r>:
 800a390:	b570      	push	{r4, r5, r6, lr}
 800a392:	0004      	movs	r4, r0
 800a394:	0008      	movs	r0, r1
 800a396:	0011      	movs	r1, r2
 800a398:	001a      	movs	r2, r3
 800a39a:	2300      	movs	r3, #0
 800a39c:	4d05      	ldr	r5, [pc, #20]	; (800a3b4 <_read_r+0x24>)
 800a39e:	602b      	str	r3, [r5, #0]
 800a3a0:	f7f9 fd25 	bl	8003dee <_read>
 800a3a4:	1c43      	adds	r3, r0, #1
 800a3a6:	d103      	bne.n	800a3b0 <_read_r+0x20>
 800a3a8:	682b      	ldr	r3, [r5, #0]
 800a3aa:	2b00      	cmp	r3, #0
 800a3ac:	d000      	beq.n	800a3b0 <_read_r+0x20>
 800a3ae:	6023      	str	r3, [r4, #0]
 800a3b0:	bd70      	pop	{r4, r5, r6, pc}
 800a3b2:	46c0      	nop			; (mov r8, r8)
 800a3b4:	200006bc 	.word	0x200006bc

0800a3b8 <_init>:
 800a3b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a3ba:	46c0      	nop			; (mov r8, r8)
 800a3bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a3be:	bc08      	pop	{r3}
 800a3c0:	469e      	mov	lr, r3
 800a3c2:	4770      	bx	lr

0800a3c4 <_fini>:
 800a3c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a3c6:	46c0      	nop			; (mov r8, r8)
 800a3c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a3ca:	bc08      	pop	{r3}
 800a3cc:	469e      	mov	lr, r3
 800a3ce:	4770      	bx	lr
